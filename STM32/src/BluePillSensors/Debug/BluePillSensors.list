
BluePillSensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001c1c  08001c1c  00011c1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001c44  08001c44  00011c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c48  08001c48  00011c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000140  2000000c  08001c58  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000014c  08001c58  0002014c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012151  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026ac  00000000  00000000  00032186  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000700  00000000  00000000  00034838  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac0  00000000  00000000  00034f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005630  00000000  00000000  000359f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002a04  00000000  00000000  0003b028  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003da2c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001394  00000000  00000000  0003daa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00004fc7  00000000  00000000  0003ee3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c04 	.word	0x08001c04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001c04 	.word	0x08001c04

0800014c <config>:
#include "MagConfig.h"
#include "i2c.h"
unsigned char buffer[6];
uint8_t config_regadd;
uint8_t config_data;
void config(void) {
 800014c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* SetUp measurement mode -------------------------------------------*/

	config_regadd = 0x10; // Select mode register
	config_data = 0x01; //Continuous measurement mode
 8000150:	2401      	movs	r4, #1
	config_regadd = 0x10; // Select mode register
 8000152:	f04f 0910 	mov.w	r9, #16
	//HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR<<1, buffer, 2, 100);
	HAL_I2C_Mem_Write(&hi2c1, MAG_ADDR, config_regadd, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 0xFFFF);
 8000156:	f64f 77ff 	movw	r7, #65535	; 0xffff

	HAL_Delay(15);
	config_regadd = 0x11; // Select mode register
 800015a:	2611      	movs	r6, #17
	config_data = 0x80; //Continuous measurement mode
 800015c:	f04f 0b80 	mov.w	fp, #128	; 0x80
	config_data = 0x01; //Continuous measurement mode
 8000160:	4d21      	ldr	r5, [pc, #132]	; (80001e8 <config+0x9c>)
	HAL_I2C_Mem_Write(&hi2c1, MAG_ADDR, config_regadd, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 0xFFFF);
 8000162:	f8df a088 	ldr.w	sl, [pc, #136]	; 80001ec <config+0xa0>
void config(void) {
 8000166:	b085      	sub	sp, #20
	config_regadd = 0x10; // Select mode register
 8000168:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80001f0 <config+0xa4>
	HAL_I2C_Mem_Write(&hi2c1, MAG_ADDR, config_regadd, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 0xFFFF);
 800016c:	4623      	mov	r3, r4
 800016e:	464a      	mov	r2, r9
 8000170:	210e      	movs	r1, #14
 8000172:	9702      	str	r7, [sp, #8]
 8000174:	9401      	str	r4, [sp, #4]
 8000176:	9500      	str	r5, [sp, #0]
 8000178:	4650      	mov	r0, sl
	config_regadd = 0x10; // Select mode register
 800017a:	f888 9000 	strb.w	r9, [r8]
	config_data = 0x01; //Continuous measurement mode
 800017e:	702c      	strb	r4, [r5, #0]
	HAL_I2C_Mem_Write(&hi2c1, MAG_ADDR, config_regadd, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 0xFFFF);
 8000180:	f001 f8f2 	bl	8001368 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8000184:	200f      	movs	r0, #15
 8000186:	f000 fabf 	bl	8000708 <HAL_Delay>
	//HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR<<1, buffer, 2, 100);
	HAL_I2C_Mem_Write(&hi2c1, MAG_ADDR, config_regadd, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 0xFFFF);
 800018a:	4650      	mov	r0, sl

	config_regadd = 0x10; // Select mode register
	config_data = 0x01; //Continuous measurement mode
	//HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR<<1, buffer, 2, 100);
	HAL_I2C_Mem_Write(&hi2c2, MAG_ADDR, config_regadd, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 0xFFFF);
 800018c:	f8df a064 	ldr.w	sl, [pc, #100]	; 80001f4 <config+0xa8>
	HAL_I2C_Mem_Write(&hi2c1, MAG_ADDR, config_regadd, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 0xFFFF);
 8000190:	4623      	mov	r3, r4
 8000192:	4632      	mov	r2, r6
 8000194:	9702      	str	r7, [sp, #8]
 8000196:	9401      	str	r4, [sp, #4]
 8000198:	9500      	str	r5, [sp, #0]
 800019a:	210e      	movs	r1, #14
	config_regadd = 0x11; // Select mode register
 800019c:	f888 6000 	strb.w	r6, [r8]
	config_data = 0x80; //Continuous measurement mode
 80001a0:	f885 b000 	strb.w	fp, [r5]
	HAL_I2C_Mem_Write(&hi2c1, MAG_ADDR, config_regadd, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 0xFFFF);
 80001a4:	f001 f8e0 	bl	8001368 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MAG_ADDR, config_regadd, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 0xFFFF);
 80001a8:	4623      	mov	r3, r4
 80001aa:	464a      	mov	r2, r9
 80001ac:	210e      	movs	r1, #14
 80001ae:	9702      	str	r7, [sp, #8]
 80001b0:	9401      	str	r4, [sp, #4]
 80001b2:	9500      	str	r5, [sp, #0]
 80001b4:	4650      	mov	r0, sl
	config_regadd = 0x10; // Select mode register
 80001b6:	f888 9000 	strb.w	r9, [r8]
	config_data = 0x01; //Continuous measurement mode
 80001ba:	702c      	strb	r4, [r5, #0]
	HAL_I2C_Mem_Write(&hi2c2, MAG_ADDR, config_regadd, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 0xFFFF);
 80001bc:	f001 f8d4 	bl	8001368 <HAL_I2C_Mem_Write>

	HAL_Delay(15);
 80001c0:	200f      	movs	r0, #15
 80001c2:	f000 faa1 	bl	8000708 <HAL_Delay>
	config_regadd = 0x11; // Select mode register
	config_data = 0x80; //Continuous measurement mode
	//HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR<<1, buffer, 2, 100);
	HAL_I2C_Mem_Write(&hi2c2, MAG_ADDR, config_regadd, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 0xFFFF);
 80001c6:	9702      	str	r7, [sp, #8]
 80001c8:	9401      	str	r4, [sp, #4]
 80001ca:	9500      	str	r5, [sp, #0]
 80001cc:	4623      	mov	r3, r4
 80001ce:	4632      	mov	r2, r6
 80001d0:	210e      	movs	r1, #14
 80001d2:	4650      	mov	r0, sl
	config_regadd = 0x11; // Select mode register
 80001d4:	f888 6000 	strb.w	r6, [r8]
	config_data = 0x80; //Continuous measurement mode
 80001d8:	f885 b000 	strb.w	fp, [r5]
	HAL_I2C_Mem_Write(&hi2c2, MAG_ADDR, config_regadd, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 0xFFFF);
 80001dc:	f001 f8c4 	bl	8001368 <HAL_I2C_Mem_Write>
}
 80001e0:	b005      	add	sp, #20
 80001e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80001e6:	bf00      	nop
 80001e8:	2000002f 	.word	0x2000002f
 80001ec:	20000060 	.word	0x20000060
 80001f0:	20000028 	.word	0x20000028
 80001f4:	200000b4 	.word	0x200000b4

080001f8 <mag_read_valueL>:
    HAL_I2C_Master_Sequential_Receive_IT(&hi2c2, MAG_ADDR, receive_buffer, 6, I2C_LAST_FRAME);
}
*/

void mag_read_valueL(int koord_L[])
{
 80001f8:	b570      	push	{r4, r5, r6, lr}
	uint8_t whoami_answer[1];
	uint8_t whoami_address = 0x07;
 80001fa:	2307      	movs	r3, #7
    // first set the register pointer to the register wanted to be read
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, &whoami_address, 1, 100);  // note the & operator which gives us the address of the register_pointer variable
 80001fc:	2664      	movs	r6, #100	; 0x64
{
 80001fe:	b086      	sub	sp, #24
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, &whoami_address, 1, 100);  // note the & operator which gives us the address of the register_pointer variable
 8000200:	4d19      	ldr	r5, [pc, #100]	; (8000268 <mag_read_valueL+0x70>)
	uint8_t whoami_address = 0x07;
 8000202:	aa06      	add	r2, sp, #24
{
 8000204:	4604      	mov	r4, r0
	uint8_t whoami_address = 0x07;
 8000206:	f802 3d0a 	strb.w	r3, [r2, #-10]!
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, &whoami_address, 1, 100);  // note the & operator which gives us the address of the register_pointer variable
 800020a:	210e      	movs	r1, #14
 800020c:	9600      	str	r6, [sp, #0]
 800020e:	2301      	movs	r3, #1
 8000210:	4628      	mov	r0, r5
 8000212:	f000 fd9b 	bl	8000d4c <HAL_I2C_Master_Transmit>

    // receive the 2 x 8bit data into the receive buffer
    HAL_I2C_Master_Receive(&hi2c1, MAG_ADDR, whoami_answer, 1, 100);
 8000216:	aa03      	add	r2, sp, #12
 8000218:	9600      	str	r6, [sp, #0]
 800021a:	2301      	movs	r3, #1
 800021c:	210e      	movs	r1, #14
 800021e:	4628      	mov	r0, r5
 8000220:	f000 fe6a 	bl	8000ef8 <HAL_I2C_Master_Receive>

    uint8_t reg_value[6];

    uint8_t addr = 0x01;
 8000224:	2301      	movs	r3, #1
 8000226:	aa06      	add	r2, sp, #24
 8000228:	f802 3d09 	strb.w	r3, [r2, #-9]!
    // first set the register pointer to the register wanted to be read
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, &addr, 1, 100);  // note the & operator which gives us the address of the register_pointer variable
 800022c:	210e      	movs	r1, #14
 800022e:	9600      	str	r6, [sp, #0]
 8000230:	4628      	mov	r0, r5
 8000232:	f000 fd8b 	bl	8000d4c <HAL_I2C_Master_Transmit>

    // receive the 2 x 8bit data into the receive buffer
    HAL_I2C_Master_Receive(&hi2c1, MAG_ADDR, reg_value, 6, 100);
 8000236:	9600      	str	r6, [sp, #0]
 8000238:	2306      	movs	r3, #6
 800023a:	aa04      	add	r2, sp, #16
 800023c:	210e      	movs	r1, #14
 800023e:	4628      	mov	r0, r5
 8000240:	f000 fe5a 	bl	8000ef8 <HAL_I2C_Master_Receive>

	koord_L[0] = (reg_value[1]|(reg_value[0] << 8));
 8000244:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8000248:	ba5b      	rev16	r3, r3
 800024a:	b29b      	uxth	r3, r3
 800024c:	6023      	str	r3, [r4, #0]
	koord_L[1] = (reg_value[3]|(reg_value[2] << 8));
 800024e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8000252:	ba5b      	rev16	r3, r3
 8000254:	b29b      	uxth	r3, r3
 8000256:	6063      	str	r3, [r4, #4]
	koord_L[2] = (reg_value[5]|(reg_value[4] << 8));
 8000258:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800025c:	ba5b      	rev16	r3, r3
 800025e:	b29b      	uxth	r3, r3
 8000260:	60a3      	str	r3, [r4, #8]
  //val_high = mag_read_registerL(msb_reg);
  //HAL_Delay(2);
  //val_low = mag_read_registerL(lsb_reg);
  //unsigned int out = (val_low|(val_high << 8)); //concatenate the MSB and LSB
  //return out;
}
 8000262:	b006      	add	sp, #24
 8000264:	bd70      	pop	{r4, r5, r6, pc}
 8000266:	bf00      	nop
 8000268:	20000060 	.word	0x20000060

0800026c <mag_read_valueR>:
void mag_read_valueR(int koord_R[])
{
	uint8_t reg_value[6];
	uint8_t addr = 0x01;
 800026c:	2301      	movs	r3, #1
{
 800026e:	b530      	push	{r4, r5, lr}
    // first set the register pointer to the register wanted to be read
    HAL_I2C_Master_Transmit_IT(&hi2c2, MAG_ADDR, &addr, 1);  // note the & operator which gives us the address of the register_pointer variable
 8000270:	4d11      	ldr	r5, [pc, #68]	; (80002b8 <mag_read_valueR+0x4c>)
{
 8000272:	b087      	sub	sp, #28
	uint8_t addr = 0x01;
 8000274:	aa06      	add	r2, sp, #24
{
 8000276:	4604      	mov	r4, r0
	uint8_t addr = 0x01;
 8000278:	f802 3d09 	strb.w	r3, [r2, #-9]!
    HAL_I2C_Master_Transmit_IT(&hi2c2, MAG_ADDR, &addr, 1);  // note the & operator which gives us the address of the register_pointer variable
 800027c:	210e      	movs	r1, #14
 800027e:	4628      	mov	r0, r5
 8000280:	f000 ffbc 	bl	80011fc <HAL_I2C_Master_Transmit_IT>

    // receive the 2 x 8bit data into the receive buffer
    HAL_I2C_Master_Sequential_Receive_IT(&hi2c2, MAG_ADDR, reg_value, 6, I2C_LAST_FRAME);
 8000284:	2308      	movs	r3, #8
 8000286:	aa04      	add	r2, sp, #16
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	210e      	movs	r1, #14
 800028c:	2306      	movs	r3, #6
 800028e:	4628      	mov	r0, r5
 8000290:	f001 f808 	bl	80012a4 <HAL_I2C_Master_Sequential_Receive_IT>

	koord_R[0] = (reg_value[1]|(reg_value[0] << 8));
 8000294:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8000298:	ba5b      	rev16	r3, r3
 800029a:	b29b      	uxth	r3, r3
 800029c:	6023      	str	r3, [r4, #0]
	koord_R[1] = (reg_value[3]|(reg_value[2] << 8));
 800029e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80002a2:	ba5b      	rev16	r3, r3
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	6063      	str	r3, [r4, #4]
	koord_R[2] = (reg_value[5]|(reg_value[4] << 8));
 80002a8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80002ac:	ba5b      	rev16	r3, r3
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	60a3      	str	r3, [r4, #8]
	//val_high = mag_read_registerL(msb_reg);
	//HAL_Delay(2);
	//val_low = mag_read_registerL(lsb_reg);
	//unsigned int out = (val_low|(val_high << 8)); //concatenate the MSB and LSB
	//return out;
}
 80002b2:	b007      	add	sp, #28
 80002b4:	bd30      	pop	{r4, r5, pc}
 80002b6:	bf00      	nop
 80002b8:	200000b4 	.word	0x200000b4

080002bc <read_values_to_arrays>:
{
 80002bc:	b510      	push	{r4, lr}
 80002be:	460c      	mov	r4, r1
	mag_read_valueL(koord_L);
 80002c0:	f7ff ff9a 	bl	80001f8 <mag_read_valueL>
	mag_read_valueR(koord_R);
 80002c4:	4620      	mov	r0, r4
}
 80002c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mag_read_valueR(koord_R);
 80002ca:	f7ff bfcf 	b.w	800026c <mag_read_valueR>
	...

080002d0 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d0:	2210      	movs	r2, #16
{
 80002d2:	b510      	push	{r4, lr}
 80002d4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	eb0d 0002 	add.w	r0, sp, r2
 80002da:	2100      	movs	r1, #0
 80002dc:	f001 fc8a 	bl	8001bf4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e0:	4b1d      	ldr	r3, [pc, #116]	; (8000358 <MX_GPIO_Init+0x88>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002e2:	4c1e      	ldr	r4, [pc, #120]	; (800035c <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002e6:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e8:	f042 0210 	orr.w	r2, r2, #16
 80002ec:	619a      	str	r2, [r3, #24]
 80002ee:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f4:	f002 0210 	and.w	r2, r2, #16
 80002f8:	9200      	str	r2, [sp, #0]
 80002fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002fc:	699a      	ldr	r2, [r3, #24]
 80002fe:	f042 0220 	orr.w	r2, r2, #32
 8000302:	619a      	str	r2, [r3, #24]
 8000304:	699a      	ldr	r2, [r3, #24]
 8000306:	f002 0220 	and.w	r2, r2, #32
 800030a:	9201      	str	r2, [sp, #4]
 800030c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030e:	699a      	ldr	r2, [r3, #24]
 8000310:	f042 0208 	orr.w	r2, r2, #8
 8000314:	619a      	str	r2, [r3, #24]
 8000316:	699a      	ldr	r2, [r3, #24]
 8000318:	f002 0208 	and.w	r2, r2, #8
 800031c:	9202      	str	r2, [sp, #8]
 800031e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000320:	699a      	ldr	r2, [r3, #24]
 8000322:	f042 0204 	orr.w	r2, r2, #4
 8000326:	619a      	str	r2, [r3, #24]
 8000328:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	f003 0304 	and.w	r3, r3, #4
 8000330:	9303      	str	r3, [sp, #12]
 8000332:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000334:	f000 fb36 	bl	80009a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800033c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	2301      	movs	r3, #1
 8000340:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000346:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000348:	a904      	add	r1, sp, #16
 800034a:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800034e:	f000 fa49 	bl	80007e4 <HAL_GPIO_Init>

}
 8000352:	b008      	add	sp, #32
 8000354:	bd10      	pop	{r4, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	40011000 	.word	0x40011000

08000360 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000360:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8000362:	480c      	ldr	r0, [pc, #48]	; (8000394 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_I2C1_Init+0x38>)
 8000366:	f8df e034 	ldr.w	lr, [pc, #52]	; 800039c <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800036a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 800036e:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000372:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000374:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000376:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000378:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800037a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800037c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800037e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000380:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000382:	f000 fc63 	bl	8000c4c <HAL_I2C_Init>
 8000386:	b118      	cbz	r0, 8000390 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8000388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800038c:	f000 b8c6 	b.w	800051c <Error_Handler>
 8000390:	bd08      	pop	{r3, pc}
 8000392:	bf00      	nop
 8000394:	20000060 	.word	0x20000060
 8000398:	40005400 	.word	0x40005400
 800039c:	00061a80 	.word	0x00061a80

080003a0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80003a0:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80003a2:	480c      	ldr	r0, [pc, #48]	; (80003d4 <MX_I2C2_Init+0x34>)
  hi2c2.Init.ClockSpeed = 400000;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_I2C2_Init+0x38>)
 80003a6:	f8df e034 	ldr.w	lr, [pc, #52]	; 80003dc <MX_I2C2_Init+0x3c>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 400000;
 80003ae:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003b2:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b4:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003b6:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80003b8:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ba:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80003bc:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003be:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003c2:	f000 fc43 	bl	8000c4c <HAL_I2C_Init>
 80003c6:	b118      	cbz	r0, 80003d0 <MX_I2C2_Init+0x30>
  {
    Error_Handler();
  }

}
 80003c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80003cc:	f000 b8a6 	b.w	800051c <Error_Handler>
 80003d0:	bd08      	pop	{r3, pc}
 80003d2:	bf00      	nop
 80003d4:	200000b4 	.word	0x200000b4
 80003d8:	40005800 	.word	0x40005800
 80003dc:	00061a80 	.word	0x00061a80

080003e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e0:	2210      	movs	r2, #16
{
 80003e2:	b510      	push	{r4, lr}
 80003e4:	4604      	mov	r4, r0
 80003e6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e8:	eb0d 0002 	add.w	r0, sp, r2
 80003ec:	2100      	movs	r1, #0
 80003ee:	f001 fc01 	bl	8001bf4 <memset>
  if(i2cHandle->Instance==I2C1)
 80003f2:	6823      	ldr	r3, [r4, #0]
 80003f4:	4a21      	ldr	r2, [pc, #132]	; (800047c <HAL_I2C_MspInit+0x9c>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d11e      	bne.n	8000438 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fa:	4c21      	ldr	r4, [pc, #132]	; (8000480 <HAL_I2C_MspInit+0xa0>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fc:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fe:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000400:	4820      	ldr	r0, [pc, #128]	; (8000484 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	61a3      	str	r3, [r4, #24]
 8000408:	69a3      	ldr	r3, [r4, #24]
 800040a:	f003 0308 	and.w	r3, r3, #8
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000412:	23c0      	movs	r3, #192	; 0xc0
 8000414:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000416:	2312      	movs	r3, #18
 8000418:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800041a:	2303      	movs	r3, #3
 800041c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041e:	f000 f9e1 	bl	80007e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000422:	69e3      	ldr	r3, [r4, #28]
 8000424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000428:	61e3      	str	r3, [r4, #28]
 800042a:	69e3      	ldr	r3, [r4, #28]
 800042c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000430:	9301      	str	r3, [sp, #4]
 8000432:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000434:	b008      	add	sp, #32
 8000436:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 8000438:	4a13      	ldr	r2, [pc, #76]	; (8000488 <HAL_I2C_MspInit+0xa8>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d1fa      	bne.n	8000434 <HAL_I2C_MspInit+0x54>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800043e:	4c10      	ldr	r4, [pc, #64]	; (8000480 <HAL_I2C_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000440:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000444:	480f      	ldr	r0, [pc, #60]	; (8000484 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	61a3      	str	r3, [r4, #24]
 800044c:	69a3      	ldr	r3, [r4, #24]
 800044e:	f003 0308 	and.w	r3, r3, #8
 8000452:	9302      	str	r3, [sp, #8]
 8000454:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000456:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800045a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800045c:	2312      	movs	r3, #18
 800045e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000460:	2303      	movs	r3, #3
 8000462:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000464:	f000 f9be 	bl	80007e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000468:	69e3      	ldr	r3, [r4, #28]
 800046a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800046e:	61e3      	str	r3, [r4, #28]
 8000470:	69e3      	ldr	r3, [r4, #28]
 8000472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000476:	9303      	str	r3, [sp, #12]
 8000478:	9b03      	ldr	r3, [sp, #12]
}
 800047a:	e7db      	b.n	8000434 <HAL_I2C_MspInit+0x54>
 800047c:	40005400 	.word	0x40005400
 8000480:	40021000 	.word	0x40021000
 8000484:	40010c00 	.word	0x40010c00
 8000488:	40005800 	.word	0x40005800

0800048c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800048c:	b510      	push	{r4, lr}
 800048e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000490:	2228      	movs	r2, #40	; 0x28
 8000492:	2100      	movs	r1, #0
 8000494:	a806      	add	r0, sp, #24
 8000496:	f001 fbad 	bl	8001bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049a:	2100      	movs	r1, #0
 800049c:	2214      	movs	r2, #20
 800049e:	a801      	add	r0, sp, #4
 80004a0:	f001 fba8 	bl	8001bf4 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004a8:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ac:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ae:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004b6:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004ba:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004bc:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004be:	f000 ffe9 	bl	8001494 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004cc:	4621      	mov	r1, r4
 80004ce:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004d4:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004d8:	f001 f9a4 	bl	8001824 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80004dc:	b010      	add	sp, #64	; 0x40
 80004de:	bd10      	pop	{r4, pc}

080004e0 <main>:
{
 80004e0:	b508      	push	{r3, lr}
  HAL_Init();
 80004e2:	f000 f8ed 	bl	80006c0 <HAL_Init>
  SystemClock_Config();
 80004e6:	f7ff ffd1 	bl	800048c <SystemClock_Config>
  MX_GPIO_Init();
 80004ea:	f7ff fef1 	bl	80002d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ee:	f7ff ff37 	bl	8000360 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004f2:	f7ff ff55 	bl	80003a0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80004f6:	f000 f865 	bl	80005c4 <MX_USART1_UART_Init>
  config();
 80004fa:	f7ff fe27 	bl	800014c <config>
	read_values_to_arrays(coord_L, coord_R);
 80004fe:	4d05      	ldr	r5, [pc, #20]	; (8000514 <main+0x34>)
 8000500:	4c05      	ldr	r4, [pc, #20]	; (8000518 <main+0x38>)
 8000502:	4620      	mov	r0, r4
 8000504:	4629      	mov	r1, r5
 8000506:	f7ff fed9 	bl	80002bc <read_values_to_arrays>
	HAL_Delay(100);
 800050a:	2064      	movs	r0, #100	; 0x64
 800050c:	f000 f8fc 	bl	8000708 <HAL_Delay>
 8000510:	e7f7      	b.n	8000502 <main+0x22>
 8000512:	bf00      	nop
 8000514:	20000030 	.word	0x20000030
 8000518:	20000054 	.word	0x20000054

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	4770      	bx	lr
	...

08000520 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000520:	4b0e      	ldr	r3, [pc, #56]	; (800055c <HAL_MspInit+0x3c>)
{
 8000522:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000524:	699a      	ldr	r2, [r3, #24]
 8000526:	f042 0201 	orr.w	r2, r2, #1
 800052a:	619a      	str	r2, [r3, #24]
 800052c:	699a      	ldr	r2, [r3, #24]
 800052e:	f002 0201 	and.w	r2, r2, #1
 8000532:	9200      	str	r2, [sp, #0]
 8000534:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000536:	69da      	ldr	r2, [r3, #28]
 8000538:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800053c:	61da      	str	r2, [r3, #28]
 800053e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000546:	9301      	str	r3, [sp, #4]
 8000548:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800054a:	6853      	ldr	r3, [r2, #4]
 800054c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000550:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000554:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	b002      	add	sp, #8
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	40010000 	.word	0x40010000

08000564 <NMI_Handler>:
 8000564:	4770      	bx	lr

08000566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000566:	e7fe      	b.n	8000566 <HardFault_Handler>

08000568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000568:	e7fe      	b.n	8000568 <MemManage_Handler>

0800056a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056a:	e7fe      	b.n	800056a <BusFault_Handler>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	e7fe      	b.n	800056c <UsageFault_Handler>

0800056e <SVC_Handler>:
 800056e:	4770      	bx	lr

08000570 <DebugMon_Handler>:
 8000570:	4770      	bx	lr

08000572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000572:	4770      	bx	lr

08000574 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000574:	f000 b8b6 	b.w	80006e4 <HAL_IncTick>

08000578 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <SystemInit+0x40>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	f042 0201 	orr.w	r2, r2, #1
 8000580:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000582:	6859      	ldr	r1, [r3, #4]
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <SystemInit+0x44>)
 8000586:	400a      	ands	r2, r1
 8000588:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000590:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000594:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800059c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800059e:	685a      	ldr	r2, [r3, #4]
 80005a0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80005a4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <SystemInit+0x48>)
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000
 80005bc:	f8ff0000 	.word	0xf8ff0000
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80005c4:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_EVEN;
 80005c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  huart1.Init.BaudRate = 115200;
 80005ca:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 80005ce:	480a      	ldr	r0, [pc, #40]	; (80005f8 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <MX_USART1_UART_Init+0x38>)
  huart1.Init.Parity = UART_PARITY_EVEN;
 80005d2:	6102      	str	r2, [r0, #16]
  huart1.Init.BaudRate = 115200;
 80005d4:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005d8:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005da:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005dc:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e0:	60c3      	str	r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005e6:	f001 fa8d 	bl	8001b04 <HAL_UART_Init>
 80005ea:	b118      	cbz	r0, 80005f4 <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 80005ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80005f0:	f7ff bf94 	b.w	800051c <Error_Handler>
 80005f4:	bd08      	pop	{r3, pc}
 80005f6:	bf00      	nop
 80005f8:	20000108 	.word	0x20000108
 80005fc:	40013800 	.word	0x40013800

08000600 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000600:	b510      	push	{r4, lr}
 8000602:	4604      	mov	r4, r0
 8000604:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	2210      	movs	r2, #16
 8000608:	2100      	movs	r1, #0
 800060a:	a802      	add	r0, sp, #8
 800060c:	f001 faf2 	bl	8001bf4 <memset>
  if(uartHandle->Instance==USART1)
 8000610:	6822      	ldr	r2, [r4, #0]
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_UART_MspInit+0x70>)
 8000614:	429a      	cmp	r2, r3
 8000616:	d128      	bne.n	800066a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000618:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800061c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8000620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000624:	619a      	str	r2, [r3, #24]
 8000626:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800062a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800062e:	9200      	str	r2, [sp, #0]
 8000630:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	699a      	ldr	r2, [r3, #24]
 8000634:	f042 0204 	orr.w	r2, r2, #4
 8000638:	619a      	str	r2, [r3, #24]
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0304 	and.w	r3, r3, #4
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000648:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064a:	2302      	movs	r3, #2
 800064c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064e:	2303      	movs	r3, #3
 8000650:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f000 f8c7 	bl	80007e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800065a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	a902      	add	r1, sp, #8
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000662:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	f000 f8bd 	bl	80007e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800066a:	b006      	add	sp, #24
 800066c:	bd10      	pop	{r4, pc}
 800066e:	bf00      	nop
 8000670:	40013800 	.word	0x40013800
 8000674:	40010800 	.word	0x40010800

08000678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000678:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <HAL_InitTick+0x3c>)
{
 800067c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800067e:	7818      	ldrb	r0, [r3, #0]
 8000680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000684:	fbb3 f3f0 	udiv	r3, r3, r0
 8000688:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <HAL_InitTick+0x40>)
 800068a:	6810      	ldr	r0, [r2, #0]
 800068c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000690:	f000 f892 	bl	80007b8 <HAL_SYSTICK_Config>
 8000694:	4604      	mov	r4, r0
 8000696:	b958      	cbnz	r0, 80006b0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000698:	2d0f      	cmp	r5, #15
 800069a:	d809      	bhi.n	80006b0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069c:	4602      	mov	r2, r0
 800069e:	4629      	mov	r1, r5
 80006a0:	f04f 30ff 	mov.w	r0, #4294967295
 80006a4:	f000 f854 	bl	8000750 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <HAL_InitTick+0x44>)
 80006aa:	4620      	mov	r0, r4
 80006ac:	601d      	str	r5, [r3, #0]
 80006ae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80006b0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006b2:	bd38      	pop	{r3, r4, r5, pc}
 80006b4:	20000004 	.word	0x20000004
 80006b8:	20000000 	.word	0x20000000
 80006bc:	20000008 	.word	0x20000008

080006c0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c0:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <HAL_Init+0x20>)
{
 80006c2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ce:	f000 f82d 	bl	800072c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f7ff ffd0 	bl	8000678 <HAL_InitTick>
  HAL_MspInit();
 80006d8:	f7ff ff22 	bl	8000520 <HAL_MspInit>
}
 80006dc:	2000      	movs	r0, #0
 80006de:	bd08      	pop	{r3, pc}
 80006e0:	40022000 	.word	0x40022000

080006e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006e4:	4a03      	ldr	r2, [pc, #12]	; (80006f4 <HAL_IncTick+0x10>)
 80006e6:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <HAL_IncTick+0x14>)
 80006e8:	6811      	ldr	r1, [r2, #0]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	440b      	add	r3, r1
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000148 	.word	0x20000148
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006fc:	4b01      	ldr	r3, [pc, #4]	; (8000704 <HAL_GetTick+0x8>)
 80006fe:	6818      	ldr	r0, [r3, #0]
}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000148 	.word	0x20000148

08000708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000708:	b538      	push	{r3, r4, r5, lr}
 800070a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800070c:	f7ff fff6 	bl	80006fc <HAL_GetTick>
 8000710:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000712:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000714:	bf1e      	ittt	ne
 8000716:	4b04      	ldrne	r3, [pc, #16]	; (8000728 <HAL_Delay+0x20>)
 8000718:	781b      	ldrbne	r3, [r3, #0]
 800071a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071c:	f7ff ffee 	bl	80006fc <HAL_GetTick>
 8000720:	1b40      	subs	r0, r0, r5
 8000722:	4284      	cmp	r4, r0
 8000724:	d8fa      	bhi.n	800071c <HAL_Delay+0x14>
  {
  }
}
 8000726:	bd38      	pop	{r3, r4, r5, pc}
 8000728:	20000004 	.word	0x20000004

0800072c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800072e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000730:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000732:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000736:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800073a:	041b      	lsls	r3, r3, #16
 800073c:	0c1b      	lsrs	r3, r3, #16
 800073e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000746:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000748:	60d3      	str	r3, [r2, #12]
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	68dc      	ldr	r4, [r3, #12]
 8000756:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800075a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	2b04      	cmp	r3, #4
 8000762:	bf28      	it	cs
 8000764:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000766:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076c:	bf98      	it	ls
 800076e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	fa05 f303 	lsl.w	r3, r5, r3
 8000774:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000778:	bf88      	it	hi
 800077a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4019      	ands	r1, r3
 800077e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000780:	fa05 f404 	lsl.w	r4, r5, r4
 8000784:	3c01      	subs	r4, #1
 8000786:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000788:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078a:	ea42 0201 	orr.w	r2, r2, r1
 800078e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000792:	bfaf      	iteee	ge
 8000794:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	4b06      	ldrlt	r3, [pc, #24]	; (80007b4 <HAL_NVIC_SetPriority+0x64>)
 800079a:	f000 000f 	andlt.w	r0, r0, #15
 800079e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	bfa5      	ittet	ge
 80007a2:	b2d2      	uxtbge	r2, r2
 80007a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80007ae:	bd30      	pop	{r4, r5, pc}
 80007b0:	e000ed00 	.word	0xe000ed00
 80007b4:	e000ed14 	.word	0xe000ed14

080007b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b8:	3801      	subs	r0, #1
 80007ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007be:	d20a      	bcs.n	80007d6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007cc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ce:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007d6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000e010 	.word	0xe000e010
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80007e8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80007ea:	4616      	mov	r6, r2
 80007ec:	4b65      	ldr	r3, [pc, #404]	; (8000984 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007ee:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000994 <HAL_GPIO_Init+0x1b0>
 80007f2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000998 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80007f6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007fa:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80007fc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000800:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000804:	45a0      	cmp	r8, r4
 8000806:	d17f      	bne.n	8000908 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000808:	684d      	ldr	r5, [r1, #4]
 800080a:	2d12      	cmp	r5, #18
 800080c:	f000 80af 	beq.w	800096e <HAL_GPIO_Init+0x18a>
 8000810:	f200 8088 	bhi.w	8000924 <HAL_GPIO_Init+0x140>
 8000814:	2d02      	cmp	r5, #2
 8000816:	f000 80a7 	beq.w	8000968 <HAL_GPIO_Init+0x184>
 800081a:	d87c      	bhi.n	8000916 <HAL_GPIO_Init+0x132>
 800081c:	2d00      	cmp	r5, #0
 800081e:	f000 808e 	beq.w	800093e <HAL_GPIO_Init+0x15a>
 8000822:	2d01      	cmp	r5, #1
 8000824:	f000 809e 	beq.w	8000964 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000828:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800082c:	2cff      	cmp	r4, #255	; 0xff
 800082e:	bf93      	iteet	ls
 8000830:	4682      	movls	sl, r0
 8000832:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000836:	3d08      	subhi	r5, #8
 8000838:	f8d0 b000 	ldrls.w	fp, [r0]
 800083c:	bf92      	itee	ls
 800083e:	00b5      	lslls	r5, r6, #2
 8000840:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000844:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000846:	fa09 f805 	lsl.w	r8, r9, r5
 800084a:	ea2b 0808 	bic.w	r8, fp, r8
 800084e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000852:	bf88      	it	hi
 8000854:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000858:	ea48 0505 	orr.w	r5, r8, r5
 800085c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000860:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000864:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000868:	d04e      	beq.n	8000908 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800086a:	4d47      	ldr	r5, [pc, #284]	; (8000988 <HAL_GPIO_Init+0x1a4>)
 800086c:	4f46      	ldr	r7, [pc, #280]	; (8000988 <HAL_GPIO_Init+0x1a4>)
 800086e:	69ad      	ldr	r5, [r5, #24]
 8000870:	f026 0803 	bic.w	r8, r6, #3
 8000874:	f045 0501 	orr.w	r5, r5, #1
 8000878:	61bd      	str	r5, [r7, #24]
 800087a:	69bd      	ldr	r5, [r7, #24]
 800087c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000880:	f005 0501 	and.w	r5, r5, #1
 8000884:	9501      	str	r5, [sp, #4]
 8000886:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800088a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800088e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000890:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000894:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000898:	fa09 f90b 	lsl.w	r9, r9, fp
 800089c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a0:	4d3a      	ldr	r5, [pc, #232]	; (800098c <HAL_GPIO_Init+0x1a8>)
 80008a2:	42a8      	cmp	r0, r5
 80008a4:	d068      	beq.n	8000978 <HAL_GPIO_Init+0x194>
 80008a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008aa:	42a8      	cmp	r0, r5
 80008ac:	d066      	beq.n	800097c <HAL_GPIO_Init+0x198>
 80008ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	d064      	beq.n	8000980 <HAL_GPIO_Init+0x19c>
 80008b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008ba:	42a8      	cmp	r0, r5
 80008bc:	bf0c      	ite	eq
 80008be:	2503      	moveq	r5, #3
 80008c0:	2504      	movne	r5, #4
 80008c2:	fa05 f50b 	lsl.w	r5, r5, fp
 80008c6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80008ca:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008ce:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008d0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80008d4:	bf14      	ite	ne
 80008d6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008d8:	43a5      	biceq	r5, r4
 80008da:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008dc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008de:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80008e2:	bf14      	ite	ne
 80008e4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008e6:	43a5      	biceq	r5, r4
 80008e8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008ea:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ec:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80008f0:	bf14      	ite	ne
 80008f2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008f4:	43a5      	biceq	r5, r4
 80008f6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008f8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008fa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80008fe:	bf14      	ite	ne
 8000900:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000902:	ea25 0404 	biceq.w	r4, r5, r4
 8000906:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000908:	3601      	adds	r6, #1
 800090a:	2e10      	cmp	r6, #16
 800090c:	f47f af73 	bne.w	80007f6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000910:	b003      	add	sp, #12
 8000912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000916:	2d03      	cmp	r5, #3
 8000918:	d022      	beq.n	8000960 <HAL_GPIO_Init+0x17c>
 800091a:	2d11      	cmp	r5, #17
 800091c:	d184      	bne.n	8000828 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800091e:	68ca      	ldr	r2, [r1, #12]
 8000920:	3204      	adds	r2, #4
          break;
 8000922:	e781      	b.n	8000828 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000924:	4f1a      	ldr	r7, [pc, #104]	; (8000990 <HAL_GPIO_Init+0x1ac>)
 8000926:	42bd      	cmp	r5, r7
 8000928:	d009      	beq.n	800093e <HAL_GPIO_Init+0x15a>
 800092a:	d812      	bhi.n	8000952 <HAL_GPIO_Init+0x16e>
 800092c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800099c <HAL_GPIO_Init+0x1b8>
 8000930:	454d      	cmp	r5, r9
 8000932:	d004      	beq.n	800093e <HAL_GPIO_Init+0x15a>
 8000934:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000938:	454d      	cmp	r5, r9
 800093a:	f47f af75 	bne.w	8000828 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800093e:	688a      	ldr	r2, [r1, #8]
 8000940:	b1c2      	cbz	r2, 8000974 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000942:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000944:	bf0c      	ite	eq
 8000946:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800094a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800094e:	2208      	movs	r2, #8
 8000950:	e76a      	b.n	8000828 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000952:	4575      	cmp	r5, lr
 8000954:	d0f3      	beq.n	800093e <HAL_GPIO_Init+0x15a>
 8000956:	4565      	cmp	r5, ip
 8000958:	d0f1      	beq.n	800093e <HAL_GPIO_Init+0x15a>
 800095a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80009a0 <HAL_GPIO_Init+0x1bc>
 800095e:	e7eb      	b.n	8000938 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000960:	2200      	movs	r2, #0
 8000962:	e761      	b.n	8000828 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000964:	68ca      	ldr	r2, [r1, #12]
          break;
 8000966:	e75f      	b.n	8000828 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000968:	68ca      	ldr	r2, [r1, #12]
 800096a:	3208      	adds	r2, #8
          break;
 800096c:	e75c      	b.n	8000828 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800096e:	68ca      	ldr	r2, [r1, #12]
 8000970:	320c      	adds	r2, #12
          break;
 8000972:	e759      	b.n	8000828 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000974:	2204      	movs	r2, #4
 8000976:	e757      	b.n	8000828 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000978:	2500      	movs	r5, #0
 800097a:	e7a2      	b.n	80008c2 <HAL_GPIO_Init+0xde>
 800097c:	2501      	movs	r5, #1
 800097e:	e7a0      	b.n	80008c2 <HAL_GPIO_Init+0xde>
 8000980:	2502      	movs	r5, #2
 8000982:	e79e      	b.n	80008c2 <HAL_GPIO_Init+0xde>
 8000984:	40010400 	.word	0x40010400
 8000988:	40021000 	.word	0x40021000
 800098c:	40010800 	.word	0x40010800
 8000990:	10210000 	.word	0x10210000
 8000994:	10310000 	.word	0x10310000
 8000998:	10320000 	.word	0x10320000
 800099c:	10110000 	.word	0x10110000
 80009a0:	10220000 	.word	0x10220000

080009a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009a4:	b10a      	cbz	r2, 80009aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80009a6:	6101      	str	r1, [r0, #16]
 80009a8:	4770      	bx	lr
 80009aa:	0409      	lsls	r1, r1, #16
 80009ac:	e7fb      	b.n	80009a6 <HAL_GPIO_WritePin+0x2>

080009ae <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009ae:	6802      	ldr	r2, [r0, #0]
 80009b0:	6953      	ldr	r3, [r2, #20]
 80009b2:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80009b6:	d00d      	beq.n	80009d4 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80009b8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80009bc:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80009be:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80009c0:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80009c2:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80009c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80009cc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80009d0:	2001      	movs	r0, #1
 80009d2:	4770      	bx	lr
  }
  return HAL_OK;
 80009d4:	4618      	mov	r0, r3
}
 80009d6:	4770      	bx	lr

080009d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80009d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009dc:	4604      	mov	r4, r0
 80009de:	4617      	mov	r7, r2
 80009e0:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80009e2:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80009e6:	b28e      	uxth	r6, r1
 80009e8:	6825      	ldr	r5, [r4, #0]
 80009ea:	f1b8 0f01 	cmp.w	r8, #1
 80009ee:	bf0c      	ite	eq
 80009f0:	696b      	ldreq	r3, [r5, #20]
 80009f2:	69ab      	ldrne	r3, [r5, #24]
 80009f4:	ea36 0303 	bics.w	r3, r6, r3
 80009f8:	bf14      	ite	ne
 80009fa:	2001      	movne	r0, #1
 80009fc:	2000      	moveq	r0, #0
 80009fe:	b908      	cbnz	r0, 8000a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a04:	696b      	ldr	r3, [r5, #20]
 8000a06:	055a      	lsls	r2, r3, #21
 8000a08:	d512      	bpl.n	8000a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a0a:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8000a0c:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a12:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a14:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000a18:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000a1e:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000a20:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8000a22:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8000a24:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8000a28:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000a30:	1c7b      	adds	r3, r7, #1
 8000a32:	d0d9      	beq.n	80009e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000a34:	b94f      	cbnz	r7, 8000a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000a36:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000a38:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000a3a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000a3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000a40:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000a44:	2003      	movs	r0, #3
 8000a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000a4a:	f7ff fe57 	bl	80006fc <HAL_GetTick>
 8000a4e:	eba0 0009 	sub.w	r0, r0, r9
 8000a52:	4287      	cmp	r7, r0
 8000a54:	d2c8      	bcs.n	80009e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8000a56:	e7ee      	b.n	8000a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08000a58 <I2C_WaitOnFlagUntilTimeout>:
{
 8000a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a5c:	4604      	mov	r4, r0
 8000a5e:	4690      	mov	r8, r2
 8000a60:	461f      	mov	r7, r3
 8000a62:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000a64:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000a68:	b28d      	uxth	r5, r1
 8000a6a:	6823      	ldr	r3, [r4, #0]
 8000a6c:	f1b9 0f01 	cmp.w	r9, #1
 8000a70:	bf0c      	ite	eq
 8000a72:	695b      	ldreq	r3, [r3, #20]
 8000a74:	699b      	ldrne	r3, [r3, #24]
 8000a76:	ea35 0303 	bics.w	r3, r5, r3
 8000a7a:	bf0c      	ite	eq
 8000a7c:	2301      	moveq	r3, #1
 8000a7e:	2300      	movne	r3, #0
 8000a80:	4543      	cmp	r3, r8
 8000a82:	d002      	beq.n	8000a8a <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000a84:	2000      	movs	r0, #0
}
 8000a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000a8a:	1c7b      	adds	r3, r7, #1
 8000a8c:	d0ed      	beq.n	8000a6a <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000a8e:	b95f      	cbnz	r7, 8000aa8 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000a90:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000a92:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000a94:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000a96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000a9a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000a9e:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000aa0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000aa8:	f7ff fe28 	bl	80006fc <HAL_GetTick>
 8000aac:	1b80      	subs	r0, r0, r6
 8000aae:	4287      	cmp	r7, r0
 8000ab0:	d2db      	bcs.n	8000a6a <I2C_WaitOnFlagUntilTimeout+0x12>
 8000ab2:	e7ed      	b.n	8000a90 <I2C_WaitOnFlagUntilTimeout+0x38>

08000ab4 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	460d      	mov	r5, r1
 8000aba:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000abc:	6823      	ldr	r3, [r4, #0]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	061b      	lsls	r3, r3, #24
 8000ac2:	d501      	bpl.n	8000ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f7ff ff70 	bl	80009ae <I2C_IsAcknowledgeFailed>
 8000ace:	b9a8      	cbnz	r0, 8000afc <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000ad0:	1c6a      	adds	r2, r5, #1
 8000ad2:	d0f3      	beq.n	8000abc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ad4:	b965      	cbnz	r5, 8000af0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000ad8:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ada:	f043 0320 	orr.w	r3, r3, #32
 8000ade:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000ae0:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000ae2:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000ae4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000ae6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000aea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000af0:	f7ff fe04 	bl	80006fc <HAL_GetTick>
 8000af4:	1b80      	subs	r0, r0, r6
 8000af6:	4285      	cmp	r5, r0
 8000af8:	d2e0      	bcs.n	8000abc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000afa:	e7ec      	b.n	8000ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000afc:	2001      	movs	r0, #1
}
 8000afe:	bd70      	pop	{r4, r5, r6, pc}

08000b00 <I2C_RequestMemoryWrite>:
{
 8000b00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000b04:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b06:	6802      	ldr	r2, [r0, #0]
{
 8000b08:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b0a:	6813      	ldr	r3, [r2, #0]
{
 8000b0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b12:	6013      	str	r3, [r2, #0]
{
 8000b14:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b16:	9600      	str	r6, [sp, #0]
 8000b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000b20:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b22:	f7ff ff99 	bl	8000a58 <I2C_WaitOnFlagUntilTimeout>
 8000b26:	b968      	cbnz	r0, 8000b44 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000b2e:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000b32:	4633      	mov	r3, r6
 8000b34:	491a      	ldr	r1, [pc, #104]	; (8000ba0 <I2C_RequestMemoryWrite+0xa0>)
 8000b36:	4620      	mov	r0, r4
 8000b38:	f7ff ff4e 	bl	80009d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b3c:	b130      	cbz	r0, 8000b4c <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b40:	2b04      	cmp	r3, #4
 8000b42:	d018      	beq.n	8000b76 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8000b44:	2003      	movs	r0, #3
}
 8000b46:	b004      	add	sp, #16
 8000b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b4c:	6823      	ldr	r3, [r4, #0]
 8000b4e:	9003      	str	r0, [sp, #12]
 8000b50:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b52:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b54:	9203      	str	r2, [sp, #12]
 8000b56:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b58:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b5a:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b5c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b5e:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b60:	f7ff ffa8 	bl	8000ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b64:	b148      	cbz	r0, 8000b7a <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d1eb      	bne.n	8000b44 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b6c:	6822      	ldr	r2, [r4, #0]
 8000b6e:	6813      	ldr	r3, [r2, #0]
 8000b70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b74:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8000b76:	2001      	movs	r0, #1
 8000b78:	e7e5      	b.n	8000b46 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000b7a:	f1b8 0f01 	cmp.w	r8, #1
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	d102      	bne.n	8000b88 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000b82:	b2ed      	uxtb	r5, r5
 8000b84:	611d      	str	r5, [r3, #16]
 8000b86:	e7de      	b.n	8000b46 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000b88:	0a2a      	lsrs	r2, r5, #8
 8000b8a:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000b8e:	4632      	mov	r2, r6
 8000b90:	4620      	mov	r0, r4
 8000b92:	f7ff ff8f 	bl	8000ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d1e5      	bne.n	8000b66 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	e7f1      	b.n	8000b82 <I2C_RequestMemoryWrite+0x82>
 8000b9e:	bf00      	nop
 8000ba0:	00010002 	.word	0x00010002

08000ba4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	460d      	mov	r5, r1
 8000baa:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000bac:	6820      	ldr	r0, [r4, #0]
 8000bae:	6943      	ldr	r3, [r0, #20]
 8000bb0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000bb4:	d001      	beq.n	8000bba <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000bb6:	2000      	movs	r0, #0
}
 8000bb8:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000bba:	6942      	ldr	r2, [r0, #20]
 8000bbc:	06d2      	lsls	r2, r2, #27
 8000bbe:	d50b      	bpl.n	8000bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000bc0:	f06f 0210 	mvn.w	r2, #16
 8000bc4:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8000bc6:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bc8:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000bca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8000bce:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8000bd0:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8000bd2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000bd8:	b95d      	cbnz	r5, 8000bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000bda:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000bdc:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000bde:	f043 0320 	orr.w	r3, r3, #32
 8000be2:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000be4:	2320      	movs	r3, #32
 8000be6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8000bea:	2300      	movs	r3, #0
 8000bec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000bf0:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000bf2:	f7ff fd83 	bl	80006fc <HAL_GetTick>
 8000bf6:	1b80      	subs	r0, r0, r6
 8000bf8:	4285      	cmp	r5, r0
 8000bfa:	d2d7      	bcs.n	8000bac <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8000bfc:	e7ed      	b.n	8000bda <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08000bfe <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8000bfe:	b570      	push	{r4, r5, r6, lr}
 8000c00:	4604      	mov	r4, r0
 8000c02:	460d      	mov	r5, r1
 8000c04:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	075b      	lsls	r3, r3, #29
 8000c0c:	d501      	bpl.n	8000c12 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000c0e:	2000      	movs	r0, #0
 8000c10:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000c12:	4620      	mov	r0, r4
 8000c14:	f7ff fecb 	bl	80009ae <I2C_IsAcknowledgeFailed>
 8000c18:	b9a8      	cbnz	r0, 8000c46 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000c1a:	1c6a      	adds	r2, r5, #1
 8000c1c:	d0f3      	beq.n	8000c06 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000c1e:	b965      	cbnz	r5, 8000c3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000c22:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000c2a:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000c2c:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000c2e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000c30:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000c34:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000c38:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000c3a:	f7ff fd5f 	bl	80006fc <HAL_GetTick>
 8000c3e:	1b80      	subs	r0, r0, r6
 8000c40:	4285      	cmp	r5, r0
 8000c42:	d2e0      	bcs.n	8000c06 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8000c44:	e7ec      	b.n	8000c20 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000c46:	2001      	movs	r0, #1
}
 8000c48:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c4c <HAL_I2C_Init>:
{
 8000c4c:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8000c4e:	4604      	mov	r4, r0
 8000c50:	b908      	cbnz	r0, 8000c56 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000c52:	2001      	movs	r0, #1
 8000c54:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000c56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c5e:	b91b      	cbnz	r3, 8000c68 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000c60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000c64:	f7ff fbbc 	bl	80003e0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c68:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000c6a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000c70:	6813      	ldr	r3, [r2, #0]
 8000c72:	f023 0301 	bic.w	r3, r3, #1
 8000c76:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c78:	f000 fe86 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c7c:	6863      	ldr	r3, [r4, #4]
 8000c7e:	4a2f      	ldr	r2, [pc, #188]	; (8000d3c <HAL_I2C_Init+0xf0>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d830      	bhi.n	8000ce6 <HAL_I2C_Init+0x9a>
 8000c84:	4a2e      	ldr	r2, [pc, #184]	; (8000d40 <HAL_I2C_Init+0xf4>)
 8000c86:	4290      	cmp	r0, r2
 8000c88:	d9e3      	bls.n	8000c52 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000c8a:	4a2e      	ldr	r2, [pc, #184]	; (8000d44 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8000c8c:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000c8e:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8000c92:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c94:	3201      	adds	r2, #1
 8000c96:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000c98:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <HAL_I2C_Init+0xf0>)
 8000c9a:	3801      	subs	r0, #1
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d832      	bhi.n	8000d06 <HAL_I2C_Init+0xba>
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ca6:	1c43      	adds	r3, r0, #1
 8000ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	bf38      	it	cc
 8000cb0:	2304      	movcc	r3, #4
 8000cb2:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000cb4:	6a22      	ldr	r2, [r4, #32]
 8000cb6:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cb8:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000cbe:	68e2      	ldr	r2, [r4, #12]
 8000cc0:	6923      	ldr	r3, [r4, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000cc6:	69a2      	ldr	r2, [r4, #24]
 8000cc8:	6963      	ldr	r3, [r4, #20]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000cce:	680b      	ldr	r3, [r1, #0]
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000cd6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cd8:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000cda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cde:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ce0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ce6:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <HAL_I2C_Init+0xfc>)
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	d9b2      	bls.n	8000c52 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000cec:	4d15      	ldr	r5, [pc, #84]	; (8000d44 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000cee:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000cf2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8000cf6:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000cf8:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8000cfa:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000cfc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000d00:	fbb2 f2f5 	udiv	r2, r2, r5
 8000d04:	e7c6      	b.n	8000c94 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000d06:	68a2      	ldr	r2, [r4, #8]
 8000d08:	b952      	cbnz	r2, 8000d20 <HAL_I2C_Init+0xd4>
 8000d0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000d0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d12:	1c43      	adds	r3, r0, #1
 8000d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d18:	b16b      	cbz	r3, 8000d36 <HAL_I2C_Init+0xea>
 8000d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d1e:	e7c8      	b.n	8000cb2 <HAL_I2C_Init+0x66>
 8000d20:	2219      	movs	r2, #25
 8000d22:	4353      	muls	r3, r2
 8000d24:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d28:	1c43      	adds	r3, r0, #1
 8000d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d2e:	b113      	cbz	r3, 8000d36 <HAL_I2C_Init+0xea>
 8000d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d34:	e7bd      	b.n	8000cb2 <HAL_I2C_Init+0x66>
 8000d36:	2301      	movs	r3, #1
 8000d38:	e7bb      	b.n	8000cb2 <HAL_I2C_Init+0x66>
 8000d3a:	bf00      	nop
 8000d3c:	000186a0 	.word	0x000186a0
 8000d40:	001e847f 	.word	0x001e847f
 8000d44:	000f4240 	.word	0x000f4240
 8000d48:	003d08ff 	.word	0x003d08ff

08000d4c <HAL_I2C_Master_Transmit>:
{
 8000d4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000d50:	4604      	mov	r4, r0
 8000d52:	461f      	mov	r7, r3
 8000d54:	460d      	mov	r5, r1
 8000d56:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8000d58:	f7ff fcd0 	bl	80006fc <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000d5c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000d60:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000d62:	2b20      	cmp	r3, #32
 8000d64:	d004      	beq.n	8000d70 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8000d66:	2502      	movs	r5, #2
}
 8000d68:	4628      	mov	r0, r5
 8000d6a:	b004      	add	sp, #16
 8000d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d70:	9000      	str	r0, [sp, #0]
 8000d72:	2319      	movs	r3, #25
 8000d74:	2201      	movs	r2, #1
 8000d76:	495d      	ldr	r1, [pc, #372]	; (8000eec <HAL_I2C_Master_Transmit+0x1a0>)
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f7ff fe6d 	bl	8000a58 <I2C_WaitOnFlagUntilTimeout>
 8000d7e:	2800      	cmp	r0, #0
 8000d80:	d1f1      	bne.n	8000d66 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000d82:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d0ed      	beq.n	8000d66 <HAL_I2C_Master_Transmit+0x1a>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000d96:	bf5e      	ittt	pl
 8000d98:	681a      	ldrpl	r2, [r3, #0]
 8000d9a:	f042 0201 	orrpl.w	r2, r2, #1
 8000d9e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000da6:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000da8:	2221      	movs	r2, #33	; 0x21
 8000daa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000dae:	2210      	movs	r2, #16
 8000db0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000db4:	2200      	movs	r2, #0
 8000db6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000db8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8000dbc:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000dbe:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000dc0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000dc2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000dc6:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000dc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000dca:	2a04      	cmp	r2, #4
 8000dcc:	d004      	beq.n	8000dd8 <HAL_I2C_Master_Transmit+0x8c>
 8000dce:	2a01      	cmp	r2, #1
 8000dd0:	d002      	beq.n	8000dd8 <HAL_I2C_Master_Transmit+0x8c>
 8000dd2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000dd6:	d104      	bne.n	8000de2 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e002      	b.n	8000de8 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000de2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000de4:	2a12      	cmp	r2, #18
 8000de6:	d0f7      	beq.n	8000dd8 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000de8:	9600      	str	r6, [sp, #0]
 8000dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000dec:	2200      	movs	r2, #0
 8000dee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff fe30 	bl	8000a58 <I2C_WaitOnFlagUntilTimeout>
 8000df8:	bb28      	cbnz	r0, 8000e46 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dfa:	6923      	ldr	r3, [r4, #16]
 8000dfc:	6822      	ldr	r2, [r4, #0]
 8000dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e02:	d112      	bne.n	8000e2a <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000e04:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000e08:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000e0a:	4633      	mov	r3, r6
 8000e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000e0e:	4938      	ldr	r1, [pc, #224]	; (8000ef0 <HAL_I2C_Master_Transmit+0x1a4>)
 8000e10:	4620      	mov	r0, r4
 8000e12:	f7ff fde1 	bl	80009d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000e16:	4605      	mov	r5, r0
 8000e18:	b9a0      	cbnz	r0, 8000e44 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	9003      	str	r0, [sp, #12]
 8000e1e:	695a      	ldr	r2, [r3, #20]
 8000e20:	9203      	str	r2, [sp, #12]
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	9303      	str	r3, [sp, #12]
 8000e26:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8000e28:	e050      	b.n	8000ecc <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000e2a:	11eb      	asrs	r3, r5, #7
 8000e2c:	f003 0306 	and.w	r3, r3, #6
 8000e30:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000e34:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000e36:	492f      	ldr	r1, [pc, #188]	; (8000ef4 <HAL_I2C_Master_Transmit+0x1a8>)
 8000e38:	4633      	mov	r3, r6
 8000e3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f7ff fdcb 	bl	80009d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000e42:	b148      	cbz	r0, 8000e58 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e44:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	d107      	bne.n	8000e60 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8000e50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000e54:	2501      	movs	r5, #1
 8000e56:	e787      	b.n	8000d68 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	b2ed      	uxtb	r5, r5
 8000e5c:	611d      	str	r5, [r3, #16]
 8000e5e:	e7d4      	b.n	8000e0a <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8000e60:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8000e64:	2503      	movs	r5, #3
 8000e66:	e77f      	b.n	8000d68 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e68:	4632      	mov	r2, r6
 8000e6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff fe21 	bl	8000ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e72:	b140      	cbz	r0, 8000e86 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d1f4      	bne.n	8000e64 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000e7a:	6822      	ldr	r2, [r4, #0]
 8000e7c:	6813      	ldr	r3, [r2, #0]
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	e7e6      	b.n	8000e54 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000e86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e88:	6820      	ldr	r0, [r4, #0]
 8000e8a:	1c4b      	adds	r3, r1, #1
 8000e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8000e8e:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8000e90:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000e92:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8000e94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e96:	3b01      	subs	r3, #1
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e9c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000e9e:	1e53      	subs	r3, r2, #1
 8000ea0:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ea2:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000ea4:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ea6:	d50a      	bpl.n	8000ebe <HAL_I2C_Master_Transmit+0x172>
 8000ea8:	b14b      	cbz	r3, 8000ebe <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000eaa:	1c8b      	adds	r3, r1, #2
 8000eac:	6263      	str	r3, [r4, #36]	; 0x24
 8000eae:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8000eb0:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000eb2:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8000eb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000eb6:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ebe:	4632      	mov	r2, r6
 8000ec0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff fe9b 	bl	8000bfe <I2C_WaitOnBTFFlagUntilTimeout>
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	d1d3      	bne.n	8000e74 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8000ecc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1ca      	bne.n	8000e68 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000ed2:	6821      	ldr	r1, [r4, #0]
 8000ed4:	680a      	ldr	r2, [r1, #0]
 8000ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eda:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000edc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000ede:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000ee2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ee6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000eea:	e73d      	b.n	8000d68 <HAL_I2C_Master_Transmit+0x1c>
 8000eec:	00100002 	.word	0x00100002
 8000ef0:	00010002 	.word	0x00010002
 8000ef4:	00010008 	.word	0x00010008

08000ef8 <HAL_I2C_Master_Receive>:
{
 8000ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000efc:	4604      	mov	r4, r0
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	4698      	mov	r8, r3
 8000f02:	460d      	mov	r5, r1
 8000f04:	4691      	mov	r9, r2
 8000f06:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8000f08:	f7ff fbf8 	bl	80006fc <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000f0c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000f10:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000f12:	2b20      	cmp	r3, #32
 8000f14:	d004      	beq.n	8000f20 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8000f16:	2502      	movs	r5, #2
}
 8000f18:	4628      	mov	r0, r5
 8000f1a:	b009      	add	sp, #36	; 0x24
 8000f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f20:	9000      	str	r0, [sp, #0]
 8000f22:	2319      	movs	r3, #25
 8000f24:	2201      	movs	r2, #1
 8000f26:	49a2      	ldr	r1, [pc, #648]	; (80011b0 <HAL_I2C_Master_Receive+0x2b8>)
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f7ff fd95 	bl	8000a58 <I2C_WaitOnFlagUntilTimeout>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	d1f1      	bne.n	8000f16 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8000f32:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d0ed      	beq.n	8000f16 <HAL_I2C_Master_Receive+0x1e>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f40:	6823      	ldr	r3, [r4, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000f46:	bf5e      	ittt	pl
 8000f48:	681a      	ldrpl	r2, [r3, #0]
 8000f4a:	f042 0201 	orrpl.w	r2, r2, #1
 8000f4e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f56:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000f58:	2222      	movs	r2, #34	; 0x22
 8000f5a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000f5e:	2210      	movs	r2, #16
 8000f60:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000f64:	2200      	movs	r2, #0
 8000f66:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f68:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8000f6c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f70:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000f72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000f74:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000f78:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000f7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000f7c:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000f7e:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000f80:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000f84:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000f86:	d004      	beq.n	8000f92 <HAL_I2C_Master_Receive+0x9a>
 8000f88:	2a01      	cmp	r2, #1
 8000f8a:	d002      	beq.n	8000f92 <HAL_I2C_Master_Receive+0x9a>
 8000f8c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000f90:	d104      	bne.n	8000f9c <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e002      	b.n	8000fa2 <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8000f9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f9e:	2a11      	cmp	r2, #17
 8000fa0:	d0f7      	beq.n	8000f92 <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000fa2:	9600      	str	r6, [sp, #0]
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000fac:	4620      	mov	r0, r4
 8000fae:	f7ff fd53 	bl	8000a58 <I2C_WaitOnFlagUntilTimeout>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d14d      	bne.n	8001052 <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fb6:	6923      	ldr	r3, [r4, #16]
 8000fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	d139      	bne.n	8001034 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000fc0:	f045 0501 	orr.w	r5, r5, #1
 8000fc4:	b2ed      	uxtb	r5, r5
 8000fc6:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000fc8:	4633      	mov	r3, r6
 8000fca:	463a      	mov	r2, r7
 8000fcc:	4979      	ldr	r1, [pc, #484]	; (80011b4 <HAL_I2C_Master_Receive+0x2bc>)
 8000fce:	4620      	mov	r0, r4
 8000fd0:	f7ff fd02 	bl	80009d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000fd4:	4605      	mov	r5, r0
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d13a      	bne.n	8001050 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8000fda:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	2a00      	cmp	r2, #0
 8000fe0:	d069      	beq.n	80010b6 <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 8000fe2:	2a01      	cmp	r2, #1
 8000fe4:	d17a      	bne.n	80010dc <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fec:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fee:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	9504      	str	r5, [sp, #16]
 8000ff4:	695a      	ldr	r2, [r3, #20]
 8000ff6:	9204      	str	r2, [sp, #16]
 8000ff8:	699a      	ldr	r2, [r3, #24]
 8000ffa:	9204      	str	r2, [sp, #16]
 8000ffc:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001004:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001006:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001008:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80011bc <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 800100c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800100e:	2b00      	cmp	r3, #0
 8001010:	d05b      	beq.n	80010ca <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 8001012:	2b03      	cmp	r3, #3
 8001014:	f200 80d4 	bhi.w	80011c0 <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8001018:	2b01      	cmp	r3, #1
 800101a:	d17b      	bne.n	8001114 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800101c:	4632      	mov	r2, r6
 800101e:	4639      	mov	r1, r7
 8001020:	4620      	mov	r0, r4
 8001022:	f7ff fdbf 	bl	8000ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001026:	2800      	cmp	r0, #0
 8001028:	f000 8093 	beq.w	8001152 <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800102c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800102e:	2b20      	cmp	r3, #32
 8001030:	d116      	bne.n	8001060 <HAL_I2C_Master_Receive+0x168>
 8001032:	e03e      	b.n	80010b2 <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001034:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001038:	f008 0806 	and.w	r8, r8, #6
 800103c:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001040:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001042:	495d      	ldr	r1, [pc, #372]	; (80011b8 <HAL_I2C_Master_Receive+0x2c0>)
 8001044:	4633      	mov	r3, r6
 8001046:	463a      	mov	r2, r7
 8001048:	4620      	mov	r0, r4
 800104a:	f7ff fcc5 	bl	80009d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800104e:	b148      	cbz	r0, 8001064 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001050:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001054:	2b04      	cmp	r3, #4
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	d128      	bne.n	80010ae <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 800105c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8001060:	2501      	movs	r5, #1
 8001062:	e759      	b.n	8000f18 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	b2ed      	uxtb	r5, r5
 8001068:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800106a:	463a      	mov	r2, r7
 800106c:	4633      	mov	r3, r6
 800106e:	4951      	ldr	r1, [pc, #324]	; (80011b4 <HAL_I2C_Master_Receive+0x2bc>)
 8001070:	4620      	mov	r0, r4
 8001072:	f7ff fcb1 	bl	80009d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001076:	4602      	mov	r2, r0
 8001078:	2800      	cmp	r0, #0
 800107a:	d1e9      	bne.n	8001050 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	9007      	str	r0, [sp, #28]
 8001080:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001082:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001084:	9107      	str	r1, [sp, #28]
 8001086:	6999      	ldr	r1, [r3, #24]
 8001088:	9107      	str	r1, [sp, #28]
 800108a:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001092:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001094:	9600      	str	r6, [sp, #0]
 8001096:	463b      	mov	r3, r7
 8001098:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800109c:	f7ff fcdc 	bl	8000a58 <I2C_WaitOnFlagUntilTimeout>
 80010a0:	2800      	cmp	r0, #0
 80010a2:	d1d6      	bne.n	8001052 <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80010a4:	6822      	ldr	r2, [r4, #0]
 80010a6:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80010aa:	6113      	str	r3, [r2, #16]
 80010ac:	e78c      	b.n	8000fc8 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 80010ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 80010b2:	2503      	movs	r5, #3
 80010b4:	e730      	b.n	8000f18 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010b6:	9503      	str	r5, [sp, #12]
 80010b8:	695a      	ldr	r2, [r3, #20]
 80010ba:	9203      	str	r2, [sp, #12]
 80010bc:	699a      	ldr	r2, [r3, #24]
 80010be:	9203      	str	r2, [sp, #12]
 80010c0:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010c8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80010ca:	2320      	movs	r3, #32
 80010cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80010d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80010da:	e71d      	b.n	8000f18 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 80010dc:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80010de:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80010e0:	d10e      	bne.n	8001100 <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80010e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	9505      	str	r5, [sp, #20]
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	9205      	str	r2, [sp, #20]
 80010f2:	699a      	ldr	r2, [r3, #24]
 80010f4:	9205      	str	r2, [sp, #20]
 80010f6:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010fe:	e781      	b.n	8001004 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001100:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001104:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001106:	9506      	str	r5, [sp, #24]
 8001108:	695a      	ldr	r2, [r3, #20]
 800110a:	9206      	str	r2, [sp, #24]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	9306      	str	r3, [sp, #24]
 8001110:	9b06      	ldr	r3, [sp, #24]
 8001112:	e779      	b.n	8001008 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8001114:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001116:	9600      	str	r6, [sp, #0]
 8001118:	463b      	mov	r3, r7
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4641      	mov	r1, r8
 8001120:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001122:	d124      	bne.n	800116e <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001124:	f7ff fc98 	bl	8000a58 <I2C_WaitOnFlagUntilTimeout>
 8001128:	2800      	cmp	r0, #0
 800112a:	d1c2      	bne.n	80010b2 <HAL_I2C_Master_Receive+0x1ba>
 800112c:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800112e:	6823      	ldr	r3, [r4, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001136:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001138:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	1c51      	adds	r1, r2, #1
 800113e:	6261      	str	r1, [r4, #36]	; 0x24
 8001140:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001142:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001144:	3b01      	subs	r3, #1
 8001146:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001148:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800114a:	3b01      	subs	r3, #1
 800114c:	b29b      	uxth	r3, r3
 800114e:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001150:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	6262      	str	r2, [r4, #36]	; 0x24
 8001158:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800115a:	6912      	ldr	r2, [r2, #16]
 800115c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800115e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001160:	3b01      	subs	r3, #1
 8001162:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001164:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001166:	3b01      	subs	r3, #1
 8001168:	b29b      	uxth	r3, r3
 800116a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800116c:	e74e      	b.n	800100c <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800116e:	f7ff fc73 	bl	8000a58 <I2C_WaitOnFlagUntilTimeout>
 8001172:	4602      	mov	r2, r0
 8001174:	2800      	cmp	r0, #0
 8001176:	d19c      	bne.n	80010b2 <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001178:	6821      	ldr	r1, [r4, #0]
 800117a:	680b      	ldr	r3, [r1, #0]
 800117c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001180:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001182:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001184:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001186:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001188:	1c59      	adds	r1, r3, #1
 800118a:	6261      	str	r1, [r4, #36]	; 0x24
 800118c:	6821      	ldr	r1, [r4, #0]
 800118e:	6909      	ldr	r1, [r1, #16]
 8001190:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8001192:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001194:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001196:	3b01      	subs	r3, #1
 8001198:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800119a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800119c:	4641      	mov	r1, r8
          hi2c->XferCount--;
 800119e:	3b01      	subs	r3, #1
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	f7ff fc57 	bl	8000a58 <I2C_WaitOnFlagUntilTimeout>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d0bf      	beq.n	800112e <HAL_I2C_Master_Receive+0x236>
 80011ae:	e780      	b.n	80010b2 <HAL_I2C_Master_Receive+0x1ba>
 80011b0:	00100002 	.word	0x00100002
 80011b4:	00010002 	.word	0x00010002
 80011b8:	00010008 	.word	0x00010008
 80011bc:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80011c0:	4632      	mov	r2, r6
 80011c2:	4639      	mov	r1, r7
 80011c4:	4620      	mov	r0, r4
 80011c6:	f7ff fced 	bl	8000ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80011ca:	2800      	cmp	r0, #0
 80011cc:	f47f af2e 	bne.w	800102c <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80011d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	6262      	str	r2, [r4, #36]	; 0x24
 80011d6:	6822      	ldr	r2, [r4, #0]
 80011d8:	6912      	ldr	r2, [r2, #16]
 80011da:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80011dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80011de:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 80011e0:	3b01      	subs	r3, #1
 80011e2:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80011e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011e6:	3b01      	subs	r3, #1
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80011ec:	6953      	ldr	r3, [r2, #20]
 80011ee:	075b      	lsls	r3, r3, #29
 80011f0:	f57f af0c 	bpl.w	800100c <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80011f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011f6:	1c59      	adds	r1, r3, #1
 80011f8:	6261      	str	r1, [r4, #36]	; 0x24
 80011fa:	e7ae      	b.n	800115a <HAL_I2C_Master_Receive+0x262>

080011fc <HAL_I2C_Master_Transmit_IT>:
{
 80011fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0U;
 80011fe:	2400      	movs	r4, #0
 8001200:	9401      	str	r4, [sp, #4]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001202:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001206:	2c20      	cmp	r4, #32
 8001208:	d002      	beq.n	8001210 <HAL_I2C_Master_Transmit_IT+0x14>
    return HAL_BUSY;
 800120a:	2002      	movs	r0, #2
}
 800120c:	b003      	add	sp, #12
 800120e:	bd30      	pop	{r4, r5, pc}
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8001210:	f246 15a8 	movw	r5, #25000	; 0x61a8
 8001214:	4c21      	ldr	r4, [pc, #132]	; (800129c <HAL_I2C_Master_Transmit_IT+0xa0>)
 8001216:	6824      	ldr	r4, [r4, #0]
 8001218:	fbb4 f5f5 	udiv	r5, r4, r5
 800121c:	2419      	movs	r4, #25
 800121e:	436c      	muls	r4, r5
 8001220:	9401      	str	r4, [sp, #4]
      if(count-- == 0U)
 8001222:	9c01      	ldr	r4, [sp, #4]
 8001224:	1e65      	subs	r5, r4, #1
 8001226:	9501      	str	r5, [sp, #4]
 8001228:	b93c      	cbnz	r4, 800123a <HAL_I2C_Master_Transmit_IT+0x3e>
        hi2c->State= HAL_I2C_STATE_READY;
 800122a:	2320      	movs	r3, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800122c:	6304      	str	r4, [r0, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800122e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001232:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001236:	2003      	movs	r0, #3
 8001238:	e7e8      	b.n	800120c <HAL_I2C_Master_Transmit_IT+0x10>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800123a:	6804      	ldr	r4, [r0, #0]
 800123c:	69a5      	ldr	r5, [r4, #24]
 800123e:	07ad      	lsls	r5, r5, #30
 8001240:	d4ef      	bmi.n	8001222 <HAL_I2C_Master_Transmit_IT+0x26>
    __HAL_LOCK(hi2c);
 8001242:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8001246:	2d01      	cmp	r5, #1
 8001248:	d0df      	beq.n	800120a <HAL_I2C_Master_Transmit_IT+0xe>
 800124a:	2501      	movs	r5, #1
 800124c:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001250:	6825      	ldr	r5, [r4, #0]
 8001252:	07ed      	lsls	r5, r5, #31
      __HAL_I2C_ENABLE(hi2c);
 8001254:	bf5e      	ittt	pl
 8001256:	6825      	ldrpl	r5, [r4, #0]
 8001258:	f045 0501 	orrpl.w	r5, r5, #1
 800125c:	6025      	strpl	r5, [r4, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800125e:	6825      	ldr	r5, [r4, #0]
 8001260:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8001264:	6025      	str	r5, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001266:	2521      	movs	r5, #33	; 0x21
 8001268:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800126c:	2510      	movs	r5, #16
 800126e:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001272:	2500      	movs	r5, #0
 8001274:	6405      	str	r5, [r0, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001276:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_I2C_Master_Transmit_IT+0xa4>)
    hi2c->pBuffPtr    = pData;
 800127a:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800127c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800127e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    hi2c->Devaddress  = DevAddress;
 8001280:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->XferSize    = hi2c->XferCount;
 8001282:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128a:	6023      	str	r3, [r4, #0]
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800128c:	6863      	ldr	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 800128e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001292:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001296:	6063      	str	r3, [r4, #4]
    return HAL_OK;
 8001298:	4628      	mov	r0, r5
 800129a:	e7b7      	b.n	800120c <HAL_I2C_Master_Transmit_IT+0x10>
 800129c:	20000000 	.word	0x20000000
 80012a0:	ffff0000 	.word	0xffff0000

080012a4 <HAL_I2C_Master_Sequential_Receive_IT>:
{
 80012a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t count = 0U;
 80012a6:	2400      	movs	r4, #0
 80012a8:	9401      	str	r4, [sp, #4]
  if(hi2c->State == HAL_I2C_STATE_READY)
 80012aa:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
{
 80012ae:	9d06      	ldr	r5, [sp, #24]
  if(hi2c->State == HAL_I2C_STATE_READY)
 80012b0:	2c20      	cmp	r4, #32
 80012b2:	d002      	beq.n	80012ba <HAL_I2C_Master_Sequential_Receive_IT+0x16>
    return HAL_BUSY;
 80012b4:	2002      	movs	r0, #2
}
 80012b6:	b002      	add	sp, #8
 80012b8:	bd70      	pop	{r4, r5, r6, pc}
    if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80012ba:	2d04      	cmp	r5, #4
 80012bc:	d038      	beq.n	8001330 <HAL_I2C_Master_Sequential_Receive_IT+0x8c>
 80012be:	2d01      	cmp	r5, #1
 80012c0:	d036      	beq.n	8001330 <HAL_I2C_Master_Sequential_Receive_IT+0x8c>
    __HAL_LOCK(hi2c);
 80012c2:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80012c6:	2c01      	cmp	r4, #1
 80012c8:	d0f4      	beq.n	80012b4 <HAL_I2C_Master_Sequential_Receive_IT+0x10>
 80012ca:	2401      	movs	r4, #1
 80012cc:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012d0:	6804      	ldr	r4, [r0, #0]
 80012d2:	6826      	ldr	r6, [r4, #0]
 80012d4:	07f6      	lsls	r6, r6, #31
      __HAL_I2C_ENABLE(hi2c);
 80012d6:	bf5e      	ittt	pl
 80012d8:	6826      	ldrpl	r6, [r4, #0]
 80012da:	f046 0601 	orrpl.w	r6, r6, #1
 80012de:	6026      	strpl	r6, [r4, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80012e0:	6826      	ldr	r6, [r4, #0]
 80012e2:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
 80012e6:	6026      	str	r6, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80012e8:	2622      	movs	r6, #34	; 0x22
 80012ea:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012ee:	2610      	movs	r6, #16
 80012f0:	f880 603e 	strb.w	r6, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f4:	2600      	movs	r6, #0
 80012f6:	6406      	str	r6, [r0, #64]	; 0x40
    hi2c->XferCount = Size;
 80012f8:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80012fa:	62c5      	str	r5, [r0, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80012fc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    hi2c->Devaddress = DevAddress;
 80012fe:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->XferSize    = hi2c->XferCount;
 8001300:	8503      	strh	r3, [r0, #40]	; 0x28
    if((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) || (hi2c->PreviousState == I2C_STATE_NONE))
 8001302:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hi2c->pBuffPtr = pData;
 8001304:	6242      	str	r2, [r0, #36]	; 0x24
    if((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) || (hi2c->PreviousState == I2C_STATE_NONE))
 8001306:	2b11      	cmp	r3, #17
 8001308:	d001      	beq.n	800130e <HAL_I2C_Master_Sequential_Receive_IT+0x6a>
 800130a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800130c:	b93b      	cbnz	r3, 800131e <HAL_I2C_Master_Sequential_Receive_IT+0x7a>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001314:	6023      	str	r3, [r4, #0]
        hi2c->Instance->CR1 |= I2C_CR1_START;
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131c:	6023      	str	r3, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800131e:	2300      	movs	r3, #0
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001320:	6862      	ldr	r2, [r4, #4]
    __HAL_UNLOCK(hi2c);
 8001322:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001326:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800132a:	6062      	str	r2, [r4, #4]
    return HAL_OK;
 800132c:	4618      	mov	r0, r3
 800132e:	e7c2      	b.n	80012b6 <HAL_I2C_Master_Sequential_Receive_IT+0x12>
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8001330:	f246 16a8 	movw	r6, #25000	; 0x61a8
 8001334:	4c0b      	ldr	r4, [pc, #44]	; (8001364 <HAL_I2C_Master_Sequential_Receive_IT+0xc0>)
 8001336:	6824      	ldr	r4, [r4, #0]
 8001338:	fbb4 f6f6 	udiv	r6, r4, r6
 800133c:	2419      	movs	r4, #25
 800133e:	4374      	muls	r4, r6
 8001340:	9401      	str	r4, [sp, #4]
        if(count-- == 0U)
 8001342:	9c01      	ldr	r4, [sp, #4]
 8001344:	1e66      	subs	r6, r4, #1
 8001346:	9601      	str	r6, [sp, #4]
 8001348:	b93c      	cbnz	r4, 800135a <HAL_I2C_Master_Sequential_Receive_IT+0xb6>
          hi2c->State= HAL_I2C_STATE_READY;
 800134a:	2320      	movs	r3, #32
          hi2c->PreviousState = I2C_STATE_NONE;
 800134c:	6304      	str	r4, [r0, #48]	; 0x30
          __HAL_UNLOCK(hi2c);
 800134e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
          hi2c->State= HAL_I2C_STATE_READY;
 8001352:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
          return HAL_TIMEOUT; 
 8001356:	2003      	movs	r0, #3
 8001358:	e7ad      	b.n	80012b6 <HAL_I2C_Master_Sequential_Receive_IT+0x12>
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800135a:	6804      	ldr	r4, [r0, #0]
 800135c:	69a4      	ldr	r4, [r4, #24]
 800135e:	07a4      	lsls	r4, r4, #30
 8001360:	d4ef      	bmi.n	8001342 <HAL_I2C_Master_Sequential_Receive_IT+0x9e>
 8001362:	e7ae      	b.n	80012c2 <HAL_I2C_Master_Sequential_Receive_IT+0x1e>
 8001364:	20000000 	.word	0x20000000

08001368 <HAL_I2C_Mem_Write>:
{
 8001368:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800136c:	4604      	mov	r4, r0
 800136e:	469a      	mov	sl, r3
 8001370:	4688      	mov	r8, r1
 8001372:	4691      	mov	r9, r2
 8001374:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001376:	f7ff f9c1 	bl	80006fc <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800137a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800137e:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001380:	2b20      	cmp	r3, #32
 8001382:	d003      	beq.n	800138c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001384:	2002      	movs	r0, #2
}
 8001386:	b002      	add	sp, #8
 8001388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800138c:	9000      	str	r0, [sp, #0]
 800138e:	2319      	movs	r3, #25
 8001390:	2201      	movs	r2, #1
 8001392:	493e      	ldr	r1, [pc, #248]	; (800148c <HAL_I2C_Mem_Write+0x124>)
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff fb5f 	bl	8000a58 <I2C_WaitOnFlagUntilTimeout>
 800139a:	2800      	cmp	r0, #0
 800139c:	d1f2      	bne.n	8001384 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800139e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d0ee      	beq.n	8001384 <HAL_I2C_Mem_Write+0x1c>
 80013a6:	2301      	movs	r3, #1
 80013a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013ac:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ae:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013b0:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013b2:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013b4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80013b6:	bf58      	it	pl
 80013b8:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013ba:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 80013bc:	bf5c      	itt	pl
 80013be:	f042 0201 	orrpl.w	r2, r2, #1
 80013c2:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ca:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013cc:	2321      	movs	r3, #33	; 0x21
 80013ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013d2:	2340      	movs	r3, #64	; 0x40
 80013d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 80013d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013da:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80013dc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013de:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013e2:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 80013e4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013e8:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80013ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013ee:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 80013f0:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013f2:	4653      	mov	r3, sl
 80013f4:	f7ff fb84 	bl	8000b00 <I2C_RequestMemoryWrite>
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d02a      	beq.n	8001452 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80013fe:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001402:	2b04      	cmp	r3, #4
 8001404:	d107      	bne.n	8001416 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8001406:	2001      	movs	r0, #1
 8001408:	e7bd      	b.n	8001386 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800140a:	f7ff fb53 	bl	8000ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 800140e:	b120      	cbz	r0, 800141a <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001410:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001412:	2b04      	cmp	r3, #4
 8001414:	d034      	beq.n	8001480 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 8001416:	2003      	movs	r0, #3
 8001418:	e7b5      	b.n	8001386 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800141a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800141c:	6827      	ldr	r7, [r4, #0]
 800141e:	1c4b      	adds	r3, r1, #1
 8001420:	6263      	str	r3, [r4, #36]	; 0x24
 8001422:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001424:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001426:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001428:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800142a:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 800142c:	3b01      	subs	r3, #1
 800142e:	b29b      	uxth	r3, r3
 8001430:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001432:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001434:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001436:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001438:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800143a:	d50a      	bpl.n	8001452 <HAL_I2C_Mem_Write+0xea>
 800143c:	b148      	cbz	r0, 8001452 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800143e:	1c8b      	adds	r3, r1, #2
 8001440:	6263      	str	r3, [r4, #36]	; 0x24
 8001442:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001444:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001446:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001448:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800144a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800144c:	3b01      	subs	r3, #1
 800144e:	b29b      	uxth	r3, r3
 8001450:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001452:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001454:	462a      	mov	r2, r5
 8001456:	4631      	mov	r1, r6
 8001458:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1d5      	bne.n	800140a <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800145e:	f7ff fbce 	bl	8000bfe <I2C_WaitOnBTFFlagUntilTimeout>
 8001462:	2800      	cmp	r0, #0
 8001464:	d1d4      	bne.n	8001410 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001466:	6822      	ldr	r2, [r4, #0]
 8001468:	6813      	ldr	r3, [r2, #0]
 800146a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001470:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001472:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001476:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800147a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800147e:	e782      	b.n	8001386 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001480:	6822      	ldr	r2, [r4, #0]
 8001482:	6813      	ldr	r3, [r2, #0]
 8001484:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e7bc      	b.n	8001406 <HAL_I2C_Mem_Write+0x9e>
 800148c:	00100002 	.word	0x00100002
 8001490:	ffff0000 	.word	0xffff0000

08001494 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001494:	6803      	ldr	r3, [r0, #0]
{
 8001496:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149a:	07db      	lsls	r3, r3, #31
{
 800149c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149e:	d410      	bmi.n	80014c2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a0:	682b      	ldr	r3, [r5, #0]
 80014a2:	079f      	lsls	r7, r3, #30
 80014a4:	d45e      	bmi.n	8001564 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a6:	682b      	ldr	r3, [r5, #0]
 80014a8:	0719      	lsls	r1, r3, #28
 80014aa:	f100 8095 	bmi.w	80015d8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ae:	682b      	ldr	r3, [r5, #0]
 80014b0:	075a      	lsls	r2, r3, #29
 80014b2:	f100 80bf 	bmi.w	8001634 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b6:	69ea      	ldr	r2, [r5, #28]
 80014b8:	2a00      	cmp	r2, #0
 80014ba:	f040 812d 	bne.w	8001718 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80014be:	2000      	movs	r0, #0
 80014c0:	e014      	b.n	80014ec <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014c2:	4c90      	ldr	r4, [pc, #576]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80014c4:	6863      	ldr	r3, [r4, #4]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d007      	beq.n	80014de <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ce:	6863      	ldr	r3, [r4, #4]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d10c      	bne.n	80014f2 <HAL_RCC_OscConfig+0x5e>
 80014d8:	6863      	ldr	r3, [r4, #4]
 80014da:	03de      	lsls	r6, r3, #15
 80014dc:	d509      	bpl.n	80014f2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	039c      	lsls	r4, r3, #14
 80014e2:	d5dd      	bpl.n	80014a0 <HAL_RCC_OscConfig+0xc>
 80014e4:	686b      	ldr	r3, [r5, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1da      	bne.n	80014a0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80014ea:	2001      	movs	r0, #1
}
 80014ec:	b002      	add	sp, #8
 80014ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f2:	686b      	ldr	r3, [r5, #4]
 80014f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f8:	d110      	bne.n	800151c <HAL_RCC_OscConfig+0x88>
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001500:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001502:	f7ff f8fb 	bl	80006fc <HAL_GetTick>
 8001506:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	0398      	lsls	r0, r3, #14
 800150c:	d4c8      	bmi.n	80014a0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150e:	f7ff f8f5 	bl	80006fc <HAL_GetTick>
 8001512:	1b80      	subs	r0, r0, r6
 8001514:	2864      	cmp	r0, #100	; 0x64
 8001516:	d9f7      	bls.n	8001508 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001518:	2003      	movs	r0, #3
 800151a:	e7e7      	b.n	80014ec <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151c:	b99b      	cbnz	r3, 8001546 <HAL_RCC_OscConfig+0xb2>
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001524:	6023      	str	r3, [r4, #0]
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800152e:	f7ff f8e5 	bl	80006fc <HAL_GetTick>
 8001532:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001534:	6823      	ldr	r3, [r4, #0]
 8001536:	0399      	lsls	r1, r3, #14
 8001538:	d5b2      	bpl.n	80014a0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800153a:	f7ff f8df 	bl	80006fc <HAL_GetTick>
 800153e:	1b80      	subs	r0, r0, r6
 8001540:	2864      	cmp	r0, #100	; 0x64
 8001542:	d9f7      	bls.n	8001534 <HAL_RCC_OscConfig+0xa0>
 8001544:	e7e8      	b.n	8001518 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001546:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	d103      	bne.n	8001556 <HAL_RCC_OscConfig+0xc2>
 800154e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001552:	6023      	str	r3, [r4, #0]
 8001554:	e7d1      	b.n	80014fa <HAL_RCC_OscConfig+0x66>
 8001556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155a:	6023      	str	r3, [r4, #0]
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001562:	e7cd      	b.n	8001500 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001564:	4c67      	ldr	r4, [pc, #412]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001566:	6863      	ldr	r3, [r4, #4]
 8001568:	f013 0f0c 	tst.w	r3, #12
 800156c:	d007      	beq.n	800157e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800156e:	6863      	ldr	r3, [r4, #4]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	2b08      	cmp	r3, #8
 8001576:	d110      	bne.n	800159a <HAL_RCC_OscConfig+0x106>
 8001578:	6863      	ldr	r3, [r4, #4]
 800157a:	03da      	lsls	r2, r3, #15
 800157c:	d40d      	bmi.n	800159a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	079b      	lsls	r3, r3, #30
 8001582:	d502      	bpl.n	800158a <HAL_RCC_OscConfig+0xf6>
 8001584:	692b      	ldr	r3, [r5, #16]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d1af      	bne.n	80014ea <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	696a      	ldr	r2, [r5, #20]
 800158e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001592:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001596:	6023      	str	r3, [r4, #0]
 8001598:	e785      	b.n	80014a6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800159a:	692a      	ldr	r2, [r5, #16]
 800159c:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <HAL_RCC_OscConfig+0x274>)
 800159e:	b16a      	cbz	r2, 80015bc <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015a4:	f7ff f8aa 	bl	80006fc <HAL_GetTick>
 80015a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	079f      	lsls	r7, r3, #30
 80015ae:	d4ec      	bmi.n	800158a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b0:	f7ff f8a4 	bl	80006fc <HAL_GetTick>
 80015b4:	1b80      	subs	r0, r0, r6
 80015b6:	2802      	cmp	r0, #2
 80015b8:	d9f7      	bls.n	80015aa <HAL_RCC_OscConfig+0x116>
 80015ba:	e7ad      	b.n	8001518 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80015bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015be:	f7ff f89d 	bl	80006fc <HAL_GetTick>
 80015c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	0798      	lsls	r0, r3, #30
 80015c8:	f57f af6d 	bpl.w	80014a6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015cc:	f7ff f896 	bl	80006fc <HAL_GetTick>
 80015d0:	1b80      	subs	r0, r0, r6
 80015d2:	2802      	cmp	r0, #2
 80015d4:	d9f6      	bls.n	80015c4 <HAL_RCC_OscConfig+0x130>
 80015d6:	e79f      	b.n	8001518 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d8:	69aa      	ldr	r2, [r5, #24]
 80015da:	4c4a      	ldr	r4, [pc, #296]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80015dc:	4b4b      	ldr	r3, [pc, #300]	; (800170c <HAL_RCC_OscConfig+0x278>)
 80015de:	b1da      	cbz	r2, 8001618 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015e4:	f7ff f88a 	bl	80006fc <HAL_GetTick>
 80015e8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015ec:	079b      	lsls	r3, r3, #30
 80015ee:	d50d      	bpl.n	800160c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015f0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80015f4:	4b46      	ldr	r3, [pc, #280]	; (8001710 <HAL_RCC_OscConfig+0x27c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80015fc:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80015fe:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001600:	9b01      	ldr	r3, [sp, #4]
 8001602:	1e5a      	subs	r2, r3, #1
 8001604:	9201      	str	r2, [sp, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f9      	bne.n	80015fe <HAL_RCC_OscConfig+0x16a>
 800160a:	e750      	b.n	80014ae <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160c:	f7ff f876 	bl	80006fc <HAL_GetTick>
 8001610:	1b80      	subs	r0, r0, r6
 8001612:	2802      	cmp	r0, #2
 8001614:	d9e9      	bls.n	80015ea <HAL_RCC_OscConfig+0x156>
 8001616:	e77f      	b.n	8001518 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001618:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800161a:	f7ff f86f 	bl	80006fc <HAL_GetTick>
 800161e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001622:	079f      	lsls	r7, r3, #30
 8001624:	f57f af43 	bpl.w	80014ae <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff f868 	bl	80006fc <HAL_GetTick>
 800162c:	1b80      	subs	r0, r0, r6
 800162e:	2802      	cmp	r0, #2
 8001630:	d9f6      	bls.n	8001620 <HAL_RCC_OscConfig+0x18c>
 8001632:	e771      	b.n	8001518 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001634:	4c33      	ldr	r4, [pc, #204]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001636:	69e3      	ldr	r3, [r4, #28]
 8001638:	00d8      	lsls	r0, r3, #3
 800163a:	d424      	bmi.n	8001686 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800163c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	69e3      	ldr	r3, [r4, #28]
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	61e3      	str	r3, [r4, #28]
 8001646:	69e3      	ldr	r3, [r4, #28]
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	4e30      	ldr	r6, [pc, #192]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001652:	6833      	ldr	r3, [r6, #0]
 8001654:	05d9      	lsls	r1, r3, #23
 8001656:	d518      	bpl.n	800168a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	68eb      	ldr	r3, [r5, #12]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d126      	bne.n	80016ac <HAL_RCC_OscConfig+0x218>
 800165e:	6a23      	ldr	r3, [r4, #32]
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001666:	f7ff f849 	bl	80006fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800166e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001670:	6a23      	ldr	r3, [r4, #32]
 8001672:	079b      	lsls	r3, r3, #30
 8001674:	d53f      	bpl.n	80016f6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001676:	2f00      	cmp	r7, #0
 8001678:	f43f af1d 	beq.w	80014b6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800167c:	69e3      	ldr	r3, [r4, #28]
 800167e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001682:	61e3      	str	r3, [r4, #28]
 8001684:	e717      	b.n	80014b6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001686:	2700      	movs	r7, #0
 8001688:	e7e2      	b.n	8001650 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168a:	6833      	ldr	r3, [r6, #0]
 800168c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001690:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001692:	f7ff f833 	bl	80006fc <HAL_GetTick>
 8001696:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001698:	6833      	ldr	r3, [r6, #0]
 800169a:	05da      	lsls	r2, r3, #23
 800169c:	d4dc      	bmi.n	8001658 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169e:	f7ff f82d 	bl	80006fc <HAL_GetTick>
 80016a2:	eba0 0008 	sub.w	r0, r0, r8
 80016a6:	2864      	cmp	r0, #100	; 0x64
 80016a8:	d9f6      	bls.n	8001698 <HAL_RCC_OscConfig+0x204>
 80016aa:	e735      	b.n	8001518 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ac:	b9ab      	cbnz	r3, 80016da <HAL_RCC_OscConfig+0x246>
 80016ae:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6223      	str	r3, [r4, #32]
 80016ba:	6a23      	ldr	r3, [r4, #32]
 80016bc:	f023 0304 	bic.w	r3, r3, #4
 80016c0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80016c2:	f7ff f81b 	bl	80006fc <HAL_GetTick>
 80016c6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	6a23      	ldr	r3, [r4, #32]
 80016ca:	0798      	lsls	r0, r3, #30
 80016cc:	d5d3      	bpl.n	8001676 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff f815 	bl	80006fc <HAL_GetTick>
 80016d2:	1b80      	subs	r0, r0, r6
 80016d4:	4540      	cmp	r0, r8
 80016d6:	d9f7      	bls.n	80016c8 <HAL_RCC_OscConfig+0x234>
 80016d8:	e71e      	b.n	8001518 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016da:	2b05      	cmp	r3, #5
 80016dc:	6a23      	ldr	r3, [r4, #32]
 80016de:	d103      	bne.n	80016e8 <HAL_RCC_OscConfig+0x254>
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6223      	str	r3, [r4, #32]
 80016e6:	e7ba      	b.n	800165e <HAL_RCC_OscConfig+0x1ca>
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6223      	str	r3, [r4, #32]
 80016ee:	6a23      	ldr	r3, [r4, #32]
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	e7b6      	b.n	8001664 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff f801 	bl	80006fc <HAL_GetTick>
 80016fa:	eba0 0008 	sub.w	r0, r0, r8
 80016fe:	42b0      	cmp	r0, r6
 8001700:	d9b6      	bls.n	8001670 <HAL_RCC_OscConfig+0x1dc>
 8001702:	e709      	b.n	8001518 <HAL_RCC_OscConfig+0x84>
 8001704:	40021000 	.word	0x40021000
 8001708:	42420000 	.word	0x42420000
 800170c:	42420480 	.word	0x42420480
 8001710:	20000000 	.word	0x20000000
 8001714:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001718:	4c22      	ldr	r4, [pc, #136]	; (80017a4 <HAL_RCC_OscConfig+0x310>)
 800171a:	6863      	ldr	r3, [r4, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	f43f aee2 	beq.w	80014ea <HAL_RCC_OscConfig+0x56>
 8001726:	2300      	movs	r3, #0
 8001728:	4e1f      	ldr	r6, [pc, #124]	; (80017a8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800172c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172e:	d12b      	bne.n	8001788 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001730:	f7fe ffe4 	bl	80006fc <HAL_GetTick>
 8001734:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	0199      	lsls	r1, r3, #6
 800173a:	d41f      	bmi.n	800177c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800173c:	6a2b      	ldr	r3, [r5, #32]
 800173e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001742:	d105      	bne.n	8001750 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001744:	6862      	ldr	r2, [r4, #4]
 8001746:	68a9      	ldr	r1, [r5, #8]
 8001748:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800174c:	430a      	orrs	r2, r1
 800174e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001750:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001752:	6862      	ldr	r2, [r4, #4]
 8001754:	430b      	orrs	r3, r1
 8001756:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800175a:	4313      	orrs	r3, r2
 800175c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800175e:	2301      	movs	r3, #1
 8001760:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001762:	f7fe ffcb 	bl	80006fc <HAL_GetTick>
 8001766:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	019a      	lsls	r2, r3, #6
 800176c:	f53f aea7 	bmi.w	80014be <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001770:	f7fe ffc4 	bl	80006fc <HAL_GetTick>
 8001774:	1b40      	subs	r0, r0, r5
 8001776:	2802      	cmp	r0, #2
 8001778:	d9f6      	bls.n	8001768 <HAL_RCC_OscConfig+0x2d4>
 800177a:	e6cd      	b.n	8001518 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177c:	f7fe ffbe 	bl	80006fc <HAL_GetTick>
 8001780:	1bc0      	subs	r0, r0, r7
 8001782:	2802      	cmp	r0, #2
 8001784:	d9d7      	bls.n	8001736 <HAL_RCC_OscConfig+0x2a2>
 8001786:	e6c7      	b.n	8001518 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001788:	f7fe ffb8 	bl	80006fc <HAL_GetTick>
 800178c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178e:	6823      	ldr	r3, [r4, #0]
 8001790:	019b      	lsls	r3, r3, #6
 8001792:	f57f ae94 	bpl.w	80014be <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001796:	f7fe ffb1 	bl	80006fc <HAL_GetTick>
 800179a:	1b40      	subs	r0, r0, r5
 800179c:	2802      	cmp	r0, #2
 800179e:	d9f6      	bls.n	800178e <HAL_RCC_OscConfig+0x2fa>
 80017a0:	e6ba      	b.n	8001518 <HAL_RCC_OscConfig+0x84>
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	42420060 	.word	0x42420060

080017ac <HAL_RCC_GetSysClockFreq>:
{
 80017ac:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80017b0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017b2:	ac02      	add	r4, sp, #8
 80017b4:	f103 0510 	add.w	r5, r3, #16
 80017b8:	4622      	mov	r2, r4
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	6859      	ldr	r1, [r3, #4]
 80017be:	3308      	adds	r3, #8
 80017c0:	c203      	stmia	r2!, {r0, r1}
 80017c2:	42ab      	cmp	r3, r5
 80017c4:	4614      	mov	r4, r2
 80017c6:	d1f7      	bne.n	80017b8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017c8:	2301      	movs	r3, #1
 80017ca:	f88d 3004 	strb.w	r3, [sp, #4]
 80017ce:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80017d0:	4911      	ldr	r1, [pc, #68]	; (8001818 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017d2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80017d6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80017d8:	f003 020c 	and.w	r2, r3, #12
 80017dc:	2a08      	cmp	r2, #8
 80017de:	d117      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017e0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80017e4:	a806      	add	r0, sp, #24
 80017e6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017e8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ea:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ee:	d50c      	bpl.n	800180a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017f0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017f2:	480a      	ldr	r0, [pc, #40]	; (800181c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017f4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017f8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017fa:	aa06      	add	r2, sp, #24
 80017fc:	4413      	add	r3, r2
 80017fe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001802:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001806:	b007      	add	sp, #28
 8001808:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <HAL_RCC_GetSysClockFreq+0x74>)
 800180c:	4350      	muls	r0, r2
 800180e:	e7fa      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001812:	e7f8      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x5a>
 8001814:	08001c1c 	.word	0x08001c1c
 8001818:	40021000 	.word	0x40021000
 800181c:	007a1200 	.word	0x007a1200
 8001820:	003d0900 	.word	0x003d0900

08001824 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001824:	4a54      	ldr	r2, [pc, #336]	; (8001978 <HAL_RCC_ClockConfig+0x154>)
{
 8001826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800182a:	6813      	ldr	r3, [r2, #0]
{
 800182c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	428b      	cmp	r3, r1
{
 8001834:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001836:	d32a      	bcc.n	800188e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001838:	6829      	ldr	r1, [r5, #0]
 800183a:	078c      	lsls	r4, r1, #30
 800183c:	d434      	bmi.n	80018a8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	07ca      	lsls	r2, r1, #31
 8001840:	d447      	bmi.n	80018d2 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001842:	4a4d      	ldr	r2, [pc, #308]	; (8001978 <HAL_RCC_ClockConfig+0x154>)
 8001844:	6813      	ldr	r3, [r2, #0]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	429e      	cmp	r6, r3
 800184c:	f0c0 8082 	bcc.w	8001954 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	682a      	ldr	r2, [r5, #0]
 8001852:	4c4a      	ldr	r4, [pc, #296]	; (800197c <HAL_RCC_ClockConfig+0x158>)
 8001854:	f012 0f04 	tst.w	r2, #4
 8001858:	f040 8087 	bne.w	800196a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185c:	0713      	lsls	r3, r2, #28
 800185e:	d506      	bpl.n	800186e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001860:	6863      	ldr	r3, [r4, #4]
 8001862:	692a      	ldr	r2, [r5, #16]
 8001864:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001868:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800186c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800186e:	f7ff ff9d 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8001872:	6863      	ldr	r3, [r4, #4]
 8001874:	4a42      	ldr	r2, [pc, #264]	; (8001980 <HAL_RCC_ClockConfig+0x15c>)
 8001876:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800187a:	5cd3      	ldrb	r3, [r2, r3]
 800187c:	40d8      	lsrs	r0, r3
 800187e:	4b41      	ldr	r3, [pc, #260]	; (8001984 <HAL_RCC_ClockConfig+0x160>)
 8001880:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001882:	2000      	movs	r0, #0
 8001884:	f7fe fef8 	bl	8000678 <HAL_InitTick>
  return HAL_OK;
 8001888:	2000      	movs	r0, #0
}
 800188a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	6813      	ldr	r3, [r2, #0]
 8001890:	f023 0307 	bic.w	r3, r3, #7
 8001894:	430b      	orrs	r3, r1
 8001896:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001898:	6813      	ldr	r3, [r2, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	4299      	cmp	r1, r3
 80018a0:	d0ca      	beq.n	8001838 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80018a2:	2001      	movs	r0, #1
 80018a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018a8:	4b34      	ldr	r3, [pc, #208]	; (800197c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018aa:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ae:	bf1e      	ittt	ne
 80018b0:	685a      	ldrne	r2, [r3, #4]
 80018b2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80018b6:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ba:	bf42      	ittt	mi
 80018bc:	685a      	ldrmi	r2, [r3, #4]
 80018be:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80018c2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	68a8      	ldr	r0, [r5, #8]
 80018c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80018cc:	4302      	orrs	r2, r0
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	e7b5      	b.n	800183e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d2:	686a      	ldr	r2, [r5, #4]
 80018d4:	4c29      	ldr	r4, [pc, #164]	; (800197c <HAL_RCC_ClockConfig+0x158>)
 80018d6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d8:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018da:	d11c      	bne.n	8001916 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e0:	d0df      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e8:	f023 0303 	bic.w	r3, r3, #3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80018f0:	f7fe ff04 	bl	80006fc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f4:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80018f6:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d114      	bne.n	8001926 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018fc:	6863      	ldr	r3, [r4, #4]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b04      	cmp	r3, #4
 8001904:	d09d      	beq.n	8001842 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001906:	f7fe fef9 	bl	80006fc <HAL_GetTick>
 800190a:	1bc0      	subs	r0, r0, r7
 800190c:	4540      	cmp	r0, r8
 800190e:	d9f5      	bls.n	80018fc <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001910:	2003      	movs	r0, #3
 8001912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001916:	2a02      	cmp	r2, #2
 8001918:	d102      	bne.n	8001920 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800191e:	e7df      	b.n	80018e0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001920:	f013 0f02 	tst.w	r3, #2
 8001924:	e7dc      	b.n	80018e0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001926:	2b02      	cmp	r3, #2
 8001928:	d10f      	bne.n	800194a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800192a:	6863      	ldr	r3, [r4, #4]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d086      	beq.n	8001842 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001934:	f7fe fee2 	bl	80006fc <HAL_GetTick>
 8001938:	1bc0      	subs	r0, r0, r7
 800193a:	4540      	cmp	r0, r8
 800193c:	d9f5      	bls.n	800192a <HAL_RCC_ClockConfig+0x106>
 800193e:	e7e7      	b.n	8001910 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001940:	f7fe fedc 	bl	80006fc <HAL_GetTick>
 8001944:	1bc0      	subs	r0, r0, r7
 8001946:	4540      	cmp	r0, r8
 8001948:	d8e2      	bhi.n	8001910 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800194a:	6863      	ldr	r3, [r4, #4]
 800194c:	f013 0f0c 	tst.w	r3, #12
 8001950:	d1f6      	bne.n	8001940 <HAL_RCC_ClockConfig+0x11c>
 8001952:	e776      	b.n	8001842 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001954:	6813      	ldr	r3, [r2, #0]
 8001956:	f023 0307 	bic.w	r3, r3, #7
 800195a:	4333      	orrs	r3, r6
 800195c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800195e:	6813      	ldr	r3, [r2, #0]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	429e      	cmp	r6, r3
 8001966:	d19c      	bne.n	80018a2 <HAL_RCC_ClockConfig+0x7e>
 8001968:	e772      	b.n	8001850 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800196a:	6863      	ldr	r3, [r4, #4]
 800196c:	68e9      	ldr	r1, [r5, #12]
 800196e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001972:	430b      	orrs	r3, r1
 8001974:	6063      	str	r3, [r4, #4]
 8001976:	e771      	b.n	800185c <HAL_RCC_ClockConfig+0x38>
 8001978:	40022000 	.word	0x40022000
 800197c:	40021000 	.word	0x40021000
 8001980:	08001c2c 	.word	0x08001c2c
 8001984:	20000000 	.word	0x20000000

08001988 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <HAL_RCC_GetPCLK1Freq+0x14>)
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001996:	6810      	ldr	r0, [r2, #0]
}    
 8001998:	40d8      	lsrs	r0, r3
 800199a:	4770      	bx	lr
 800199c:	40021000 	.word	0x40021000
 80019a0:	08001c3c 	.word	0x08001c3c
 80019a4:	20000000 	.word	0x20000000

080019a8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <HAL_RCC_GetPCLK2Freq+0x14>)
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80019b6:	6810      	ldr	r0, [r2, #0]
} 
 80019b8:	40d8      	lsrs	r0, r3
 80019ba:	4770      	bx	lr
 80019bc:	40021000 	.word	0x40021000
 80019c0:	08001c3c 	.word	0x08001c3c
 80019c4:	20000000 	.word	0x20000000

080019c8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019cc:	6805      	ldr	r5, [r0, #0]
 80019ce:	68c2      	ldr	r2, [r0, #12]
 80019d0:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019d2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019d8:	4313      	orrs	r3, r2
 80019da:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019dc:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80019de:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019e0:	430b      	orrs	r3, r1
 80019e2:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80019e4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80019e8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019ec:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019f2:	696b      	ldr	r3, [r5, #20]
 80019f4:	6982      	ldr	r2, [r0, #24]
 80019f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019fa:	4313      	orrs	r3, r2
 80019fc:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80019fe:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <UART_SetConfig+0x138>)
{
 8001a00:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001a02:	429d      	cmp	r5, r3
 8001a04:	f04f 0419 	mov.w	r4, #25
 8001a08:	d146      	bne.n	8001a98 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001a0a:	f7ff ffcd 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8001a0e:	fb04 f300 	mul.w	r3, r4, r0
 8001a12:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001a16:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001a1a:	00b6      	lsls	r6, r6, #2
 8001a1c:	fbb3 f3f6 	udiv	r3, r3, r6
 8001a20:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a24:	011e      	lsls	r6, r3, #4
 8001a26:	f7ff ffbf 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8001a2a:	4360      	muls	r0, r4
 8001a2c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	fbb0 f7f3 	udiv	r7, r0, r3
 8001a36:	f7ff ffb7 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8001a3a:	4360      	muls	r0, r4
 8001a3c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a46:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a4a:	fb08 7313 	mls	r3, r8, r3, r7
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	3332      	adds	r3, #50	; 0x32
 8001a52:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a56:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001a5a:	f7ff ffa5 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8001a5e:	4360      	muls	r0, r4
 8001a60:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001a64:	0092      	lsls	r2, r2, #2
 8001a66:	fbb0 faf2 	udiv	sl, r0, r2
 8001a6a:	f7ff ff9d 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a6e:	4360      	muls	r0, r4
 8001a70:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a7a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a7e:	fb08 a313 	mls	r3, r8, r3, sl
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	3332      	adds	r3, #50	; 0x32
 8001a86:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	433b      	orrs	r3, r7
 8001a90:	4433      	add	r3, r6
 8001a92:	60ab      	str	r3, [r5, #8]
 8001a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a98:	f7ff ff76 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001a9c:	fb04 f300 	mul.w	r3, r4, r0
 8001aa0:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001aa4:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001aa8:	00b6      	lsls	r6, r6, #2
 8001aaa:	fbb3 f3f6 	udiv	r3, r3, r6
 8001aae:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ab2:	011e      	lsls	r6, r3, #4
 8001ab4:	f7ff ff68 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001ab8:	4360      	muls	r0, r4
 8001aba:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	fbb0 f7f3 	udiv	r7, r0, r3
 8001ac4:	f7ff ff60 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001ac8:	4360      	muls	r0, r4
 8001aca:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad4:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ad8:	fb08 7313 	mls	r3, r8, r3, r7
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	3332      	adds	r3, #50	; 0x32
 8001ae0:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ae4:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001ae8:	f7ff ff4e 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001aec:	4360      	muls	r0, r4
 8001aee:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	fbb0 faf2 	udiv	sl, r0, r2
 8001af8:	f7ff ff46 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001afc:	e7b7      	b.n	8001a6e <UART_SetConfig+0xa6>
 8001afe:	bf00      	nop
 8001b00:	40013800 	.word	0x40013800

08001b04 <HAL_UART_Init>:
{
 8001b04:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001b06:	4604      	mov	r4, r0
 8001b08:	b340      	cbz	r0, 8001b5c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001b0a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b12:	b91b      	cbnz	r3, 8001b1c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001b14:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001b18:	f7fe fd72 	bl	8000600 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b1c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001b1e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001b20:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001b24:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b26:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001b28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b2c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b2e:	f7ff ff4b 	bl	80019c8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b32:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b34:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b44:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b4c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001b4e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b50:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001b52:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001b56:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001b5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b5c:	2001      	movs	r0, #1
}
 8001b5e:	bd10      	pop	{r4, pc}

08001b60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b62:	e003      	b.n	8001b6c <LoopCopyDataInit>

08001b64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b6a:	3104      	adds	r1, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b6c:	480a      	ldr	r0, [pc, #40]	; (8001b98 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b74:	d3f6      	bcc.n	8001b64 <CopyDataInit>
  ldr r2, =_sbss
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b78:	e002      	b.n	8001b80 <LoopFillZerobss>

08001b7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b7c:	f842 3b04 	str.w	r3, [r2], #4

08001b80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b84:	d3f9      	bcc.n	8001b7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b86:	f7fe fcf7 	bl	8000578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f000 f80f 	bl	8001bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b8e:	f7fe fca7 	bl	80004e0 <main>
  bx lr
 8001b92:	4770      	bx	lr
  ldr r3, =_sidata
 8001b94:	08001c4c 	.word	0x08001c4c
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001ba0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001ba4:	2000014c 	.word	0x2000014c

08001ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_2_IRQHandler>
	...

08001bac <__libc_init_array>:
 8001bac:	b570      	push	{r4, r5, r6, lr}
 8001bae:	2500      	movs	r5, #0
 8001bb0:	4e0c      	ldr	r6, [pc, #48]	; (8001be4 <__libc_init_array+0x38>)
 8001bb2:	4c0d      	ldr	r4, [pc, #52]	; (8001be8 <__libc_init_array+0x3c>)
 8001bb4:	1ba4      	subs	r4, r4, r6
 8001bb6:	10a4      	asrs	r4, r4, #2
 8001bb8:	42a5      	cmp	r5, r4
 8001bba:	d109      	bne.n	8001bd0 <__libc_init_array+0x24>
 8001bbc:	f000 f822 	bl	8001c04 <_init>
 8001bc0:	2500      	movs	r5, #0
 8001bc2:	4e0a      	ldr	r6, [pc, #40]	; (8001bec <__libc_init_array+0x40>)
 8001bc4:	4c0a      	ldr	r4, [pc, #40]	; (8001bf0 <__libc_init_array+0x44>)
 8001bc6:	1ba4      	subs	r4, r4, r6
 8001bc8:	10a4      	asrs	r4, r4, #2
 8001bca:	42a5      	cmp	r5, r4
 8001bcc:	d105      	bne.n	8001bda <__libc_init_array+0x2e>
 8001bce:	bd70      	pop	{r4, r5, r6, pc}
 8001bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bd4:	4798      	blx	r3
 8001bd6:	3501      	adds	r5, #1
 8001bd8:	e7ee      	b.n	8001bb8 <__libc_init_array+0xc>
 8001bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bde:	4798      	blx	r3
 8001be0:	3501      	adds	r5, #1
 8001be2:	e7f2      	b.n	8001bca <__libc_init_array+0x1e>
 8001be4:	08001c44 	.word	0x08001c44
 8001be8:	08001c44 	.word	0x08001c44
 8001bec:	08001c44 	.word	0x08001c44
 8001bf0:	08001c48 	.word	0x08001c48

08001bf4 <memset>:
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4402      	add	r2, r0
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d100      	bne.n	8001bfe <memset+0xa>
 8001bfc:	4770      	bx	lr
 8001bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8001c02:	e7f9      	b.n	8001bf8 <memset+0x4>

08001c04 <_init>:
 8001c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c06:	bf00      	nop
 8001c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c0a:	bc08      	pop	{r3}
 8001c0c:	469e      	mov	lr, r3
 8001c0e:	4770      	bx	lr

08001c10 <_fini>:
 8001c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c12:	bf00      	nop
 8001c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c16:	bc08      	pop	{r3}
 8001c18:	469e      	mov	lr, r3
 8001c1a:	4770      	bx	lr
