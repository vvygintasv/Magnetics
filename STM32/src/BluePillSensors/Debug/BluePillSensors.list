
BluePillSensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e50  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003f60  08003f60  00013f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  08003fe0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003cd0  20000090  0800406c  00020090  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20003d60  0800406c  00023d60  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001399b  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000029a0  00000000  00000000  00033a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000740  00000000  00000000  000363f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b80  00000000  00000000  00036b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005b70  00000000  00000000  000376b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002b39  00000000  00000000  0003d220  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003fd59  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001994  00000000  00000000  0003fdd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00005648  00000000  00000000  0004176c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f48 	.word	0x08003f48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08003f48 	.word	0x08003f48

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpun>:
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__aeabi_dcmpun+0x10>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d10a      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x20>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d102      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	f04f 0001 	mov.w	r0, #1
 8000a1e:	4770      	bx	lr

08000a20 <__aeabi_d2iz>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d215      	bcs.n	8000a56 <__aeabi_d2iz+0x36>
 8000a2a:	d511      	bpl.n	8000a50 <__aeabi_d2iz+0x30>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d912      	bls.n	8000a5c <__aeabi_d2iz+0x3c>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	bf18      	it	ne
 8000a4c:	4240      	negne	r0, r0
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_d2iz+0x48>
 8000a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	bf08      	it	eq
 8000a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_d2f>:
 8000a70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a78:	bf24      	itt	cs
 8000a7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a82:	d90d      	bls.n	8000aa0 <__aeabi_d2f+0x30>
 8000a84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a98:	bf08      	it	eq
 8000a9a:	f020 0001 	biceq.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa4:	d121      	bne.n	8000aea <__aeabi_d2f+0x7a>
 8000aa6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aaa:	bfbc      	itt	lt
 8000aac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	4770      	bxlt	lr
 8000ab2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aba:	f1c2 0218 	rsb	r2, r2, #24
 8000abe:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aca:	bf18      	it	ne
 8000acc:	f040 0001 	orrne.w	r0, r0, #1
 8000ad0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000adc:	ea40 000c 	orr.w	r0, r0, ip
 8000ae0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae8:	e7cc      	b.n	8000a84 <__aeabi_d2f+0x14>
 8000aea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aee:	d107      	bne.n	8000b00 <__aeabi_d2f+0x90>
 8000af0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af4:	bf1e      	ittt	ne
 8000af6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afe:	4770      	bxne	lr
 8000b00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_frsub>:
 8000b10:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b14:	e002      	b.n	8000b1c <__addsf3>
 8000b16:	bf00      	nop

08000b18 <__aeabi_fsub>:
 8000b18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b1c <__addsf3>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	bf1f      	itttt	ne
 8000b20:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b24:	ea92 0f03 	teqne	r2, r3
 8000b28:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b2c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b30:	d06a      	beq.n	8000c08 <__addsf3+0xec>
 8000b32:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b36:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3a:	bfc1      	itttt	gt
 8000b3c:	18d2      	addgt	r2, r2, r3
 8000b3e:	4041      	eorgt	r1, r0
 8000b40:	4048      	eorgt	r0, r1
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	bfb8      	it	lt
 8000b46:	425b      	neglt	r3, r3
 8000b48:	2b19      	cmp	r3, #25
 8000b4a:	bf88      	it	hi
 8000b4c:	4770      	bxhi	lr
 8000b4e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b5a:	bf18      	it	ne
 8000b5c:	4240      	negne	r0, r0
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4249      	negne	r1, r1
 8000b6e:	ea92 0f03 	teq	r2, r3
 8000b72:	d03f      	beq.n	8000bf4 <__addsf3+0xd8>
 8000b74:	f1a2 0201 	sub.w	r2, r2, #1
 8000b78:	fa41 fc03 	asr.w	ip, r1, r3
 8000b7c:	eb10 000c 	adds.w	r0, r0, ip
 8000b80:	f1c3 0320 	rsb	r3, r3, #32
 8000b84:	fa01 f103 	lsl.w	r1, r1, r3
 8000b88:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	d502      	bpl.n	8000b94 <__addsf3+0x78>
 8000b8e:	4249      	negs	r1, r1
 8000b90:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b94:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b98:	d313      	bcc.n	8000bc2 <__addsf3+0xa6>
 8000b9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b9e:	d306      	bcc.n	8000bae <__addsf3+0x92>
 8000ba0:	0840      	lsrs	r0, r0, #1
 8000ba2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ba6:	f102 0201 	add.w	r2, r2, #1
 8000baa:	2afe      	cmp	r2, #254	; 0xfe
 8000bac:	d251      	bcs.n	8000c52 <__addsf3+0x136>
 8000bae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb6:	bf08      	it	eq
 8000bb8:	f020 0001 	biceq.w	r0, r0, #1
 8000bbc:	ea40 0003 	orr.w	r0, r0, r3
 8000bc0:	4770      	bx	lr
 8000bc2:	0049      	lsls	r1, r1, #1
 8000bc4:	eb40 0000 	adc.w	r0, r0, r0
 8000bc8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	d1ed      	bne.n	8000bae <__addsf3+0x92>
 8000bd2:	fab0 fc80 	clz	ip, r0
 8000bd6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bda:	ebb2 020c 	subs.w	r2, r2, ip
 8000bde:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be2:	bfaa      	itet	ge
 8000be4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be8:	4252      	neglt	r2, r2
 8000bea:	4318      	orrge	r0, r3
 8000bec:	bfbc      	itt	lt
 8000bee:	40d0      	lsrlt	r0, r2
 8000bf0:	4318      	orrlt	r0, r3
 8000bf2:	4770      	bx	lr
 8000bf4:	f092 0f00 	teq	r2, #0
 8000bf8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bfc:	bf06      	itte	eq
 8000bfe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c02:	3201      	addeq	r2, #1
 8000c04:	3b01      	subne	r3, #1
 8000c06:	e7b5      	b.n	8000b74 <__addsf3+0x58>
 8000c08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c10:	bf18      	it	ne
 8000c12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c16:	d021      	beq.n	8000c5c <__addsf3+0x140>
 8000c18:	ea92 0f03 	teq	r2, r3
 8000c1c:	d004      	beq.n	8000c28 <__addsf3+0x10c>
 8000c1e:	f092 0f00 	teq	r2, #0
 8000c22:	bf08      	it	eq
 8000c24:	4608      	moveq	r0, r1
 8000c26:	4770      	bx	lr
 8000c28:	ea90 0f01 	teq	r0, r1
 8000c2c:	bf1c      	itt	ne
 8000c2e:	2000      	movne	r0, #0
 8000c30:	4770      	bxne	lr
 8000c32:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c36:	d104      	bne.n	8000c42 <__addsf3+0x126>
 8000c38:	0040      	lsls	r0, r0, #1
 8000c3a:	bf28      	it	cs
 8000c3c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c40:	4770      	bx	lr
 8000c42:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c46:	bf3c      	itt	cc
 8000c48:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c4c:	4770      	bxcc	lr
 8000c4e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c52:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5a:	4770      	bx	lr
 8000c5c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c60:	bf16      	itet	ne
 8000c62:	4608      	movne	r0, r1
 8000c64:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c68:	4601      	movne	r1, r0
 8000c6a:	0242      	lsls	r2, r0, #9
 8000c6c:	bf06      	itte	eq
 8000c6e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c72:	ea90 0f01 	teqeq	r0, r1
 8000c76:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_ui2f>:
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	e004      	b.n	8000c8c <__aeabi_i2f+0x8>
 8000c82:	bf00      	nop

08000c84 <__aeabi_i2f>:
 8000c84:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c88:	bf48      	it	mi
 8000c8a:	4240      	negmi	r0, r0
 8000c8c:	ea5f 0c00 	movs.w	ip, r0
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c98:	4601      	mov	r1, r0
 8000c9a:	f04f 0000 	mov.w	r0, #0
 8000c9e:	e01c      	b.n	8000cda <__aeabi_l2f+0x2a>

08000ca0 <__aeabi_ul2f>:
 8000ca0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e00a      	b.n	8000cc4 <__aeabi_l2f+0x14>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_l2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__aeabi_l2f+0x14>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	ea5f 0c01 	movs.w	ip, r1
 8000cc8:	bf02      	ittt	eq
 8000cca:	4684      	moveq	ip, r0
 8000ccc:	4601      	moveq	r1, r0
 8000cce:	2000      	moveq	r0, #0
 8000cd0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cd4:	bf08      	it	eq
 8000cd6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cda:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cde:	fabc f28c 	clz	r2, ip
 8000ce2:	3a08      	subs	r2, #8
 8000ce4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce8:	db10      	blt.n	8000d0c <__aeabi_l2f+0x5c>
 8000cea:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cee:	4463      	add	r3, ip
 8000cf0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf4:	f1c2 0220 	rsb	r2, r2, #32
 8000cf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cfc:	fa20 f202 	lsr.w	r2, r0, r2
 8000d00:	eb43 0002 	adc.w	r0, r3, r2
 8000d04:	bf08      	it	eq
 8000d06:	f020 0001 	biceq.w	r0, r0, #1
 8000d0a:	4770      	bx	lr
 8000d0c:	f102 0220 	add.w	r2, r2, #32
 8000d10:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d14:	f1c2 0220 	rsb	r2, r2, #32
 8000d18:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d1c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d20:	eb43 0002 	adc.w	r0, r3, r2
 8000d24:	bf08      	it	eq
 8000d26:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2a:	4770      	bx	lr

08000d2c <__aeabi_fmul>:
 8000d2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d34:	bf1e      	ittt	ne
 8000d36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3a:	ea92 0f0c 	teqne	r2, ip
 8000d3e:	ea93 0f0c 	teqne	r3, ip
 8000d42:	d06f      	beq.n	8000e24 <__aeabi_fmul+0xf8>
 8000d44:	441a      	add	r2, r3
 8000d46:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4a:	0240      	lsls	r0, r0, #9
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d52:	d01e      	beq.n	8000d92 <__aeabi_fmul+0x66>
 8000d54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d58:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d5c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d60:	fba0 3101 	umull	r3, r1, r0, r1
 8000d64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d68:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d6c:	bf3e      	ittt	cc
 8000d6e:	0049      	lslcc	r1, r1, #1
 8000d70:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d74:	005b      	lslcc	r3, r3, #1
 8000d76:	ea40 0001 	orr.w	r0, r0, r1
 8000d7a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d7e:	2afd      	cmp	r2, #253	; 0xfd
 8000d80:	d81d      	bhi.n	8000dbe <__aeabi_fmul+0x92>
 8000d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8a:	bf08      	it	eq
 8000d8c:	f020 0001 	biceq.w	r0, r0, #1
 8000d90:	4770      	bx	lr
 8000d92:	f090 0f00 	teq	r0, #0
 8000d96:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d9a:	bf08      	it	eq
 8000d9c:	0249      	lsleq	r1, r1, #9
 8000d9e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000da6:	3a7f      	subs	r2, #127	; 0x7f
 8000da8:	bfc2      	ittt	gt
 8000daa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db2:	4770      	bxgt	lr
 8000db4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	3a01      	subs	r2, #1
 8000dbe:	dc5d      	bgt.n	8000e7c <__aeabi_fmul+0x150>
 8000dc0:	f112 0f19 	cmn.w	r2, #25
 8000dc4:	bfdc      	itt	le
 8000dc6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dca:	4770      	bxle	lr
 8000dcc:	f1c2 0200 	rsb	r2, r2, #0
 8000dd0:	0041      	lsls	r1, r0, #1
 8000dd2:	fa21 f102 	lsr.w	r1, r1, r2
 8000dd6:	f1c2 0220 	rsb	r2, r2, #32
 8000dda:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dde:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de2:	f140 0000 	adc.w	r0, r0, #0
 8000de6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dea:	bf08      	it	eq
 8000dec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df0:	4770      	bx	lr
 8000df2:	f092 0f00 	teq	r2, #0
 8000df6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0040      	lsleq	r0, r0, #1
 8000dfe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e02:	3a01      	subeq	r2, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fmul+0xce>
 8000e06:	ea40 000c 	orr.w	r0, r0, ip
 8000e0a:	f093 0f00 	teq	r3, #0
 8000e0e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0049      	lsleq	r1, r1, #1
 8000e16:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e1a:	3b01      	subeq	r3, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xe6>
 8000e1e:	ea41 010c 	orr.w	r1, r1, ip
 8000e22:	e78f      	b.n	8000d44 <__aeabi_fmul+0x18>
 8000e24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	bf18      	it	ne
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d00a      	beq.n	8000e4a <__aeabi_fmul+0x11e>
 8000e34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e38:	bf18      	it	ne
 8000e3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	d1d8      	bne.n	8000df2 <__aeabi_fmul+0xc6>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	4770      	bx	lr
 8000e4a:	f090 0f00 	teq	r0, #0
 8000e4e:	bf17      	itett	ne
 8000e50:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e54:	4608      	moveq	r0, r1
 8000e56:	f091 0f00 	teqne	r1, #0
 8000e5a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e5e:	d014      	beq.n	8000e8a <__aeabi_fmul+0x15e>
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d101      	bne.n	8000e6a <__aeabi_fmul+0x13e>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	d10f      	bne.n	8000e8a <__aeabi_fmul+0x15e>
 8000e6a:	ea93 0f0c 	teq	r3, ip
 8000e6e:	d103      	bne.n	8000e78 <__aeabi_fmul+0x14c>
 8000e70:	024b      	lsls	r3, r1, #9
 8000e72:	bf18      	it	ne
 8000e74:	4608      	movne	r0, r1
 8000e76:	d108      	bne.n	8000e8a <__aeabi_fmul+0x15e>
 8000e78:	ea80 0001 	eor.w	r0, r0, r1
 8000e7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e88:	4770      	bx	lr
 8000e8a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_fdiv>:
 8000e94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e9c:	bf1e      	ittt	ne
 8000e9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea2:	ea92 0f0c 	teqne	r2, ip
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d069      	beq.n	8000f80 <__aeabi_fdiv+0xec>
 8000eac:	eba2 0203 	sub.w	r2, r2, r3
 8000eb0:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb4:	0249      	lsls	r1, r1, #9
 8000eb6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eba:	d037      	beq.n	8000f2c <__aeabi_fdiv+0x98>
 8000ebc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	bf38      	it	cc
 8000ed0:	005b      	lslcc	r3, r3, #1
 8000ed2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ed6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eda:	428b      	cmp	r3, r1
 8000edc:	bf24      	itt	cs
 8000ede:	1a5b      	subcs	r3, r3, r1
 8000ee0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee8:	bf24      	itt	cs
 8000eea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ef6:	bf24      	itt	cs
 8000ef8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000efc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f00:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	bf18      	it	ne
 8000f12:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f16:	d1e0      	bne.n	8000eda <__aeabi_fdiv+0x46>
 8000f18:	2afd      	cmp	r2, #253	; 0xfd
 8000f1a:	f63f af50 	bhi.w	8000dbe <__aeabi_fmul+0x92>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f24:	bf08      	it	eq
 8000f26:	f020 0001 	biceq.w	r0, r0, #1
 8000f2a:	4770      	bx	lr
 8000f2c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f30:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f34:	327f      	adds	r2, #127	; 0x7f
 8000f36:	bfc2      	ittt	gt
 8000f38:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f3c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f40:	4770      	bxgt	lr
 8000f42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	3a01      	subs	r2, #1
 8000f4c:	e737      	b.n	8000dbe <__aeabi_fmul+0x92>
 8000f4e:	f092 0f00 	teq	r2, #0
 8000f52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f56:	bf02      	ittt	eq
 8000f58:	0040      	lsleq	r0, r0, #1
 8000f5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f5e:	3a01      	subeq	r2, #1
 8000f60:	d0f9      	beq.n	8000f56 <__aeabi_fdiv+0xc2>
 8000f62:	ea40 000c 	orr.w	r0, r0, ip
 8000f66:	f093 0f00 	teq	r3, #0
 8000f6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0049      	lsleq	r1, r1, #1
 8000f72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f76:	3b01      	subeq	r3, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xda>
 8000f7a:	ea41 010c 	orr.w	r1, r1, ip
 8000f7e:	e795      	b.n	8000eac <__aeabi_fdiv+0x18>
 8000f80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f84:	ea92 0f0c 	teq	r2, ip
 8000f88:	d108      	bne.n	8000f9c <__aeabi_fdiv+0x108>
 8000f8a:	0242      	lsls	r2, r0, #9
 8000f8c:	f47f af7d 	bne.w	8000e8a <__aeabi_fmul+0x15e>
 8000f90:	ea93 0f0c 	teq	r3, ip
 8000f94:	f47f af70 	bne.w	8000e78 <__aeabi_fmul+0x14c>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e776      	b.n	8000e8a <__aeabi_fmul+0x15e>
 8000f9c:	ea93 0f0c 	teq	r3, ip
 8000fa0:	d104      	bne.n	8000fac <__aeabi_fdiv+0x118>
 8000fa2:	024b      	lsls	r3, r1, #9
 8000fa4:	f43f af4c 	beq.w	8000e40 <__aeabi_fmul+0x114>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e76e      	b.n	8000e8a <__aeabi_fmul+0x15e>
 8000fac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb0:	bf18      	it	ne
 8000fb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	d1ca      	bne.n	8000f4e <__aeabi_fdiv+0xba>
 8000fb8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fbc:	f47f af5c 	bne.w	8000e78 <__aeabi_fmul+0x14c>
 8000fc0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fc4:	f47f af3c 	bne.w	8000e40 <__aeabi_fmul+0x114>
 8000fc8:	e75f      	b.n	8000e8a <__aeabi_fmul+0x15e>
 8000fca:	bf00      	nop

08000fcc <__aeabi_f2iz>:
 8000fcc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fd4:	d30f      	bcc.n	8000ff6 <__aeabi_f2iz+0x2a>
 8000fd6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fda:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fde:	d90d      	bls.n	8000ffc <__aeabi_f2iz+0x30>
 8000fe0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fe4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fe8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fec:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff0:	bf18      	it	ne
 8000ff2:	4240      	negne	r0, r0
 8000ff4:	4770      	bx	lr
 8000ff6:	f04f 0000 	mov.w	r0, #0
 8000ffa:	4770      	bx	lr
 8000ffc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001000:	d101      	bne.n	8001006 <__aeabi_f2iz+0x3a>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	d105      	bne.n	8001012 <__aeabi_f2iz+0x46>
 8001006:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800100a:	bf08      	it	eq
 800100c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001010:	4770      	bx	lr
 8001012:	f04f 0000 	mov.w	r0, #0
 8001016:	4770      	bx	lr

08001018 <config>:
uint8_t bufferread1[2];
uint8_t bufferread2[2];
uint8_t config_regadd;
uint8_t config_data;

void config(void) {
 8001018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* SetUp measurement mode -------------------------------------------*/
	bufferread1[0] = 0;
 800101c:	2700      	movs	r7, #0
 800101e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8001118 <config+0x100>
	bufferread1[1] = 0;
	bufferread2[0] = 0;
 8001022:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 800111c <config+0x104>
	bufferread2[1] = 0;
	HAL_Delay(15);
 8001026:	200f      	movs	r0, #15
	bufferconf[0] = 0x11; // Select mode register
	bufferconf[1] = 0x80; //Continuous measurement mode
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 8001028:	2564      	movs	r5, #100	; 0x64
	bufferread1[0] = 0;
 800102a:	f889 7000 	strb.w	r7, [r9]
	bufferread1[1] = 0;
 800102e:	f889 7001 	strb.w	r7, [r9, #1]
	bufferread2[0] = 0;
 8001032:	f88b 7000 	strb.w	r7, [fp]
	bufferread2[1] = 0;
 8001036:	f88b 7001 	strb.w	r7, [fp, #1]
	HAL_Delay(15);
 800103a:	f000 fe37 	bl	8001cac <HAL_Delay>
	bufferconf[0] = 0x11; // Select mode register
 800103e:	f04f 0311 	mov.w	r3, #17
	bufferconf[1] = 0x80; //Continuous measurement mode
 8001042:	f04f 0a80 	mov.w	sl, #128	; 0x80
	bufferconf[0] = 0x11; // Select mode register
 8001046:	4c33      	ldr	r4, [pc, #204]	; (8001114 <config+0xfc>)
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 8001048:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8001120 <config+0x108>
 800104c:	4622      	mov	r2, r4
	bufferconf[0] = 0x11; // Select mode register
 800104e:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 8001050:	211c      	movs	r1, #28
 8001052:	2302      	movs	r3, #2
 8001054:	9500      	str	r5, [sp, #0]
 8001056:	4640      	mov	r0, r8
	bufferconf[1] = 0x80; //Continuous measurement mode
 8001058:	f884 a001 	strb.w	sl, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 800105c:	f001 f8f6 	bl	800224c <HAL_I2C_Master_Transmit>
    HAL_Delay(15);
 8001060:	200f      	movs	r0, #15
 8001062:	f000 fe23 	bl	8001cac <HAL_Delay>

    bufferconf[0] = 0x10; // Select mode register
 8001066:	f04f 0310 	mov.w	r3, #16
	bufferconf[1] = 0x1; //Continuous measurement mode
 800106a:	2601      	movs	r6, #1
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 800106c:	4622      	mov	r2, r4
    bufferconf[0] = 0x10; // Select mode register
 800106e:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 8001070:	211c      	movs	r1, #28
 8001072:	2302      	movs	r3, #2
 8001074:	9500      	str	r5, [sp, #0]
 8001076:	4640      	mov	r0, r8
	bufferconf[1] = 0x1; //Continuous measurement mode
 8001078:	7066      	strb	r6, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 800107a:	f001 f8e7 	bl	800224c <HAL_I2C_Master_Transmit>
    HAL_Delay(15);
 800107e:	200f      	movs	r0, #15
 8001080:	f000 fe14 	bl	8001cac <HAL_Delay>

    bufferconf[0] = 0x11; // Select mode register
 8001084:	f04f 0311 	mov.w	r3, #17
	bufferconf[1] = 0x80; //Continuous measurement mode
 8001088:	f884 a001 	strb.w	sl, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 800108c:	f8df a094 	ldr.w	sl, [pc, #148]	; 8001124 <config+0x10c>
 8001090:	4622      	mov	r2, r4
    bufferconf[0] = 0x11; // Select mode register
 8001092:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 8001094:	211c      	movs	r1, #28
 8001096:	2302      	movs	r3, #2
 8001098:	9500      	str	r5, [sp, #0]
 800109a:	4650      	mov	r0, sl
 800109c:	f001 f8d6 	bl	800224c <HAL_I2C_Master_Transmit>
    HAL_Delay(15);
 80010a0:	200f      	movs	r0, #15
 80010a2:	f000 fe03 	bl	8001cac <HAL_Delay>

    bufferconf[0] = 0x10; // Select mode register
 80010a6:	f04f 0310 	mov.w	r3, #16
	bufferconf[1] = 0x1; //Continuous measurement mode
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 80010aa:	4622      	mov	r2, r4
    bufferconf[0] = 0x10; // Select mode register
 80010ac:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 80010ae:	211c      	movs	r1, #28
 80010b0:	2302      	movs	r3, #2
 80010b2:	9500      	str	r5, [sp, #0]
 80010b4:	4650      	mov	r0, sl
	bufferconf[1] = 0x1; //Continuous measurement mode
 80010b6:	7066      	strb	r6, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 80010b8:	f001 f8c8 	bl	800224c <HAL_I2C_Master_Transmit>
    HAL_Delay(15);
 80010bc:	200f      	movs	r0, #15
 80010be:	f000 fdf5 	bl	8001cac <HAL_Delay>

    bufferconf[0] = 0x07; // Select mode register
 80010c2:	2307      	movs	r3, #7
    bufferconf[1] = 0x00; //Continuous measurement mode
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 1, 100); //writes the address of the WHO_AM_I register as a test
 80010c4:	4622      	mov	r2, r4
    bufferconf[0] = 0x07; // Select mode register
 80010c6:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 1, 100); //writes the address of the WHO_AM_I register as a test
 80010c8:	9500      	str	r5, [sp, #0]
 80010ca:	4633      	mov	r3, r6
 80010cc:	211c      	movs	r1, #28
 80010ce:	4650      	mov	r0, sl
    bufferconf[1] = 0x00; //Continuous measurement mode
 80010d0:	7067      	strb	r7, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 1, 100); //writes the address of the WHO_AM_I register as a test
 80010d2:	f001 f8bb 	bl	800224c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 1, 100);
 80010d6:	4633      	mov	r3, r6
 80010d8:	4622      	mov	r2, r4
 80010da:	211c      	movs	r1, #28
 80010dc:	9500      	str	r5, [sp, #0]
 80010de:	4640      	mov	r0, r8
 80010e0:	f001 f8b4 	bl	800224c <HAL_I2C_Master_Transmit>

    HAL_Delay(10);
 80010e4:	200a      	movs	r0, #10
 80010e6:	f000 fde1 	bl	8001cac <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, MAG_ADDR, (uint8_t*)&bufferread1, 1, 100); //if I2C communication is working properly, the read byte must always be 0xC4
 80010ea:	4633      	mov	r3, r6
 80010ec:	464a      	mov	r2, r9
 80010ee:	9500      	str	r5, [sp, #0]
 80010f0:	211c      	movs	r1, #28
 80010f2:	4640      	mov	r0, r8
 80010f4:	f001 f980 	bl	80023f8 <HAL_I2C_Master_Receive>
    HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, (uint8_t*)&bufferread2, 1, 100);
 80010f8:	9500      	str	r5, [sp, #0]
 80010fa:	4633      	mov	r3, r6
 80010fc:	465a      	mov	r2, fp
 80010fe:	211c      	movs	r1, #28
 8001100:	4650      	mov	r0, sl
 8001102:	f001 f979 	bl	80023f8 <HAL_I2C_Master_Receive>
    HAL_Delay(15);
 8001106:	200f      	movs	r0, #15

}
 8001108:	b003      	add	sp, #12
 800110a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_Delay(15);
 800110e:	f000 bdcd 	b.w	8001cac <HAL_Delay>
 8001112:	bf00      	nop
 8001114:	200000b0 	.word	0x200000b0
 8001118:	200000b6 	.word	0x200000b6
 800111c:	200000b3 	.word	0x200000b3
 8001120:	2000011c 	.word	0x2000011c
 8001124:	20000170 	.word	0x20000170

08001128 <make_unit_vectors>:
	mag_read_valueL(field_L);
	mag_read_valueR(field_R);
}

float make_unit_vectors(int field[], float unit_vect[])
{
 8001128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800112c:	1f04      	subs	r4, r0, #4
 800112e:	460e      	mov	r6, r1
 8001130:	4625      	mov	r5, r4
	float vect_length = 0;
 8001132:	f04f 0a00 	mov.w	sl, #0
 8001136:	f100 0708 	add.w	r7, r0, #8

	for(int i = 0; i < 3; i++) vect_length += pow(field[i], 2);
 800113a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800113e:	f7ff f959 	bl	80003f4 <__aeabi_i2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	f7ff f9bb 	bl	80004c0 <__aeabi_dmul>
 800114a:	4680      	mov	r8, r0
 800114c:	4650      	mov	r0, sl
 800114e:	4689      	mov	r9, r1
 8001150:	f7ff f962 	bl	8000418 <__aeabi_f2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4640      	mov	r0, r8
 800115a:	4649      	mov	r1, r9
 800115c:	f7fe fffe 	bl	800015c <__adddf3>
 8001160:	f7ff fc86 	bl	8000a70 <__aeabi_d2f>
 8001164:	42bd      	cmp	r5, r7
 8001166:	4682      	mov	sl, r0
 8001168:	d1e7      	bne.n	800113a <make_unit_vectors+0x12>
	vect_length = sqrt(vect_length);
 800116a:	f7ff f955 	bl	8000418 <__aeabi_f2d>
 800116e:	f001 ffe1 	bl	8003134 <sqrt>
 8001172:	f7ff fc7d 	bl	8000a70 <__aeabi_d2f>
 8001176:	4607      	mov	r7, r0
 8001178:	3e04      	subs	r6, #4
	for(int i = 0; i < 3; i++) unit_vect[i] = field[i] / vect_length;
 800117a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800117e:	f7ff fd81 	bl	8000c84 <__aeabi_i2f>
 8001182:	4639      	mov	r1, r7
 8001184:	f7ff fe86 	bl	8000e94 <__aeabi_fdiv>
 8001188:	42a5      	cmp	r5, r4
 800118a:	f846 0f04 	str.w	r0, [r6, #4]!
 800118e:	d1f4      	bne.n	800117a <make_unit_vectors+0x52>

	return vect_length;
}
 8001190:	4638      	mov	r0, r7
 8001192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001198 <mag_read_valueL>:

void mag_read_valueL(int field[])
{
 8001198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bufferW[0] = 0x01; //address of registry containing the first measured value
 800119a:	2301      	movs	r3, #1
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferW, 1, 100);  //writes the register address into the slave device
 800119c:	2764      	movs	r7, #100	; 0x64
{
 800119e:	4605      	mov	r5, r0
	bufferW[0] = 0x01; //address of registry containing the first measured value
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <mag_read_valueL+0x58>)
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferW, 1, 100);  //writes the register address into the slave device
 80011a2:	4e14      	ldr	r6, [pc, #80]	; (80011f4 <mag_read_valueL+0x5c>)
    HAL_Delay(2);
    HAL_I2C_Master_Receive(&hi2c1, MAG_ADDR, (uint8_t*)&bufferR, 6, 100); //reads 6 bytes of data from the slave device, starting at the registry which was previously written
 80011a4:	4c14      	ldr	r4, [pc, #80]	; (80011f8 <mag_read_valueL+0x60>)
	bufferW[0] = 0x01; //address of registry containing the first measured value
 80011a6:	7013      	strb	r3, [r2, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferW, 1, 100);  //writes the register address into the slave device
 80011a8:	211c      	movs	r1, #28
 80011aa:	9700      	str	r7, [sp, #0]
 80011ac:	4630      	mov	r0, r6
 80011ae:	f001 f84d 	bl	800224c <HAL_I2C_Master_Transmit>
    HAL_Delay(2);
 80011b2:	2002      	movs	r0, #2
 80011b4:	f000 fd7a 	bl	8001cac <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, MAG_ADDR, (uint8_t*)&bufferR, 6, 100); //reads 6 bytes of data from the slave device, starting at the registry which was previously written
 80011b8:	4622      	mov	r2, r4
 80011ba:	2306      	movs	r3, #6
 80011bc:	211c      	movs	r1, #28
 80011be:	9700      	str	r7, [sp, #0]
 80011c0:	4630      	mov	r0, r6
 80011c2:	f001 f919 	bl	80023f8 <HAL_I2C_Master_Receive>
    HAL_Delay(2);
 80011c6:	2002      	movs	r0, #2
 80011c8:	f000 fd70 	bl	8001cac <HAL_Delay>

    field[0] = (bufferR[1]|(bufferR[0] << 8)); //buffer[0] is MSB of x, buffer[1] is LSB of x
 80011cc:	7822      	ldrb	r2, [r4, #0]
 80011ce:	7863      	ldrb	r3, [r4, #1]
 80011d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011d4:	602b      	str	r3, [r5, #0]
    field[1] = (bufferR[3]|(bufferR[2] << 8)); //buffer[2] is MSB of y, buffer[3] is LSB of y
 80011d6:	78a2      	ldrb	r2, [r4, #2]
 80011d8:	78e3      	ldrb	r3, [r4, #3]
 80011da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011de:	606b      	str	r3, [r5, #4]
    field[2] = (bufferR[5]|(bufferR[4] << 8)); //buffer[4] is MSB of z, buffer[5] is LSB of z
 80011e0:	7922      	ldrb	r2, [r4, #4]
 80011e2:	7963      	ldrb	r3, [r4, #5]
 80011e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011e8:	60ab      	str	r3, [r5, #8]
}
 80011ea:	b003      	add	sp, #12
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200000fc 	.word	0x200000fc
 80011f4:	2000011c 	.word	0x2000011c
 80011f8:	200000f6 	.word	0x200000f6

080011fc <mag_read_valueR>:
void mag_read_valueR(int field[])
{
 80011fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bufferW[0] = 0x01;
 80011fe:	2301      	movs	r3, #1
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferW, 1, 100);
 8001200:	2764      	movs	r7, #100	; 0x64
{
 8001202:	4605      	mov	r5, r0
	bufferW[0] = 0x01;
 8001204:	4a13      	ldr	r2, [pc, #76]	; (8001254 <mag_read_valueR+0x58>)
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferW, 1, 100);
 8001206:	4e14      	ldr	r6, [pc, #80]	; (8001258 <mag_read_valueR+0x5c>)
    HAL_Delay(2);
    HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, (uint8_t*)&bufferR, 6, 100);
 8001208:	4c14      	ldr	r4, [pc, #80]	; (800125c <mag_read_valueR+0x60>)
	bufferW[0] = 0x01;
 800120a:	7013      	strb	r3, [r2, #0]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferW, 1, 100);
 800120c:	211c      	movs	r1, #28
 800120e:	9700      	str	r7, [sp, #0]
 8001210:	4630      	mov	r0, r6
 8001212:	f001 f81b 	bl	800224c <HAL_I2C_Master_Transmit>
    HAL_Delay(2);
 8001216:	2002      	movs	r0, #2
 8001218:	f000 fd48 	bl	8001cac <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, (uint8_t*)&bufferR, 6, 100);
 800121c:	4622      	mov	r2, r4
 800121e:	2306      	movs	r3, #6
 8001220:	211c      	movs	r1, #28
 8001222:	9700      	str	r7, [sp, #0]
 8001224:	4630      	mov	r0, r6
 8001226:	f001 f8e7 	bl	80023f8 <HAL_I2C_Master_Receive>
    HAL_Delay(2);
 800122a:	2002      	movs	r0, #2
 800122c:	f000 fd3e 	bl	8001cac <HAL_Delay>

    field[0] = (bufferR[1]|(bufferR[0] << 8));
 8001230:	7822      	ldrb	r2, [r4, #0]
 8001232:	7863      	ldrb	r3, [r4, #1]
 8001234:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001238:	602b      	str	r3, [r5, #0]
    field[1] = (bufferR[3]|(bufferR[2] << 8));
 800123a:	78a2      	ldrb	r2, [r4, #2]
 800123c:	78e3      	ldrb	r3, [r4, #3]
 800123e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001242:	606b      	str	r3, [r5, #4]
    field[2] = (bufferR[5]|(bufferR[4] << 8));
 8001244:	7922      	ldrb	r2, [r4, #4]
 8001246:	7963      	ldrb	r3, [r4, #5]
 8001248:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800124c:	60ab      	str	r3, [r5, #8]
}
 800124e:	b003      	add	sp, #12
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	bf00      	nop
 8001254:	200000fc 	.word	0x200000fc
 8001258:	20000170 	.word	0x20000170
 800125c:	200000f6 	.word	0x200000f6

08001260 <read_values_to_arrays>:
{
 8001260:	b510      	push	{r4, lr}
 8001262:	460c      	mov	r4, r1
	mag_read_valueL(field_L);
 8001264:	f7ff ff98 	bl	8001198 <mag_read_valueL>
	mag_read_valueR(field_R);
 8001268:	4620      	mov	r0, r4
}
 800126a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mag_read_valueR(field_R);
 800126e:	f7ff bfc5 	b.w	80011fc <mag_read_valueR>

08001272 <reset_background>:

void reset_background(int field_L[], int field_R[], int bg_L[], int bg_R[], int end_of_startup)
{
 8001272:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001276:	4605      	mov	r5, r0
 8001278:	460f      	mov	r7, r1
 800127a:	4690      	mov	r8, r2
  for(int j = 0; j <= end_of_startup; j++)
 800127c:	2400      	movs	r4, #0
{
 800127e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8001280:	f1a2 0904 	sub.w	r9, r2, #4
 8001284:	f1a3 0a04 	sub.w	sl, r3, #4
 8001288:	f100 0b0c 	add.w	fp, r0, #12
  for(int j = 0; j <= end_of_startup; j++)
 800128c:	42b4      	cmp	r4, r6
 800128e:	dd01      	ble.n	8001294 <reset_background+0x22>
        bg_L[i] += field_L[i];
        bg_R[i] += field_R[i];
      }
    }
  }
}
 8001290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(j == end_of_startup)
 8001294:	d111      	bne.n	80012ba <reset_background+0x48>
 8001296:	464b      	mov	r3, r9
 8001298:	4651      	mov	r1, sl
 800129a:	f108 0008 	add.w	r0, r8, #8
        bg_L[i] = bg_L[i] / end_of_startup;
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	fb92 f2f4 	sdiv	r2, r2, r4
 80012a4:	f843 2f04 	str.w	r2, [r3, #4]!
        bg_R[i] = bg_R[i] / end_of_startup;
 80012a8:	684a      	ldr	r2, [r1, #4]
      for(int i = 0; i < 3; i++)
 80012aa:	4298      	cmp	r0, r3
        bg_R[i] = bg_R[i] / end_of_startup;
 80012ac:	fb92 f2f4 	sdiv	r2, r2, r4
 80012b0:	f841 2f04 	str.w	r2, [r1, #4]!
      for(int i = 0; i < 3; i++)
 80012b4:	d1f3      	bne.n	800129e <reset_background+0x2c>
  for(int j = 0; j <= end_of_startup; j++)
 80012b6:	3401      	adds	r4, #1
 80012b8:	e7e8      	b.n	800128c <reset_background+0x1a>
      read_values_to_arrays(field_L, field_R);
 80012ba:	4639      	mov	r1, r7
 80012bc:	4628      	mov	r0, r5
 80012be:	f7ff ffcf 	bl	8001260 <read_values_to_arrays>
 80012c2:	4629      	mov	r1, r5
 80012c4:	46cc      	mov	ip, r9
 80012c6:	46d6      	mov	lr, sl
 80012c8:	463a      	mov	r2, r7
        if(field_L[i] > 65536 / 2) field_L[i] = field_L[i] - 65536;
 80012ca:	680b      	ldr	r3, [r1, #0]
 80012cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012d0:	bfc4      	itt	gt
 80012d2:	f5a3 3380 	subgt.w	r3, r3, #65536	; 0x10000
 80012d6:	600b      	strgt	r3, [r1, #0]
        if(field_R[i] > 65536 / 2) field_R[i] = field_R[i] - 65536;
 80012d8:	6813      	ldr	r3, [r2, #0]
 80012da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012de:	bfc4      	itt	gt
 80012e0:	f5a3 3380 	subgt.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	strgt	r3, [r2, #0]
        bg_L[i] += field_L[i];
 80012e6:	f851 0b04 	ldr.w	r0, [r1], #4
 80012ea:	f8dc 3004 	ldr.w	r3, [ip, #4]
      for(int i = 0; i < 3; i++)
 80012ee:	4559      	cmp	r1, fp
        bg_L[i] += field_L[i];
 80012f0:	4403      	add	r3, r0
 80012f2:	f84c 3f04 	str.w	r3, [ip, #4]!
        bg_R[i] += field_R[i];
 80012f6:	f8de 0004 	ldr.w	r0, [lr, #4]
 80012fa:	f852 3b04 	ldr.w	r3, [r2], #4
 80012fe:	4418      	add	r0, r3
 8001300:	f84e 0f04 	str.w	r0, [lr, #4]!
      for(int i = 0; i < 3; i++)
 8001304:	d1e1      	bne.n	80012ca <reset_background+0x58>
 8001306:	e7d6      	b.n	80012b6 <reset_background+0x44>

08001308 <average>:

float average(int array[], int k)
{
 8001308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800130c:	4607      	mov	r7, r0
 800130e:	460e      	mov	r6, r1
	float sum = 0;
	for(int i = 0; i < k; i++)
 8001310:	2400      	movs	r4, #0
	float sum = 0;
 8001312:	2500      	movs	r5, #0
	{
		if(array[i] > 0 && array[i] < 65535) sum += array[i];
 8001314:	f64f 78fd 	movw	r8, #65533	; 0xfffd
	for(int i = 0; i < k; i++)
 8001318:	42b4      	cmp	r4, r6
 800131a:	db08      	blt.n	800132e <average+0x26>
	}
	sum = sum / k;
 800131c:	4630      	mov	r0, r6
 800131e:	f7ff fcb1 	bl	8000c84 <__aeabi_i2f>
 8001322:	4601      	mov	r1, r0
 8001324:	4628      	mov	r0, r5
 8001326:	f7ff fdb5 	bl	8000e94 <__aeabi_fdiv>
	return sum;
}
 800132a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(array[i] > 0 && array[i] < 65535) sum += array[i];
 800132e:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8001332:	1e43      	subs	r3, r0, #1
 8001334:	4543      	cmp	r3, r8
 8001336:	d806      	bhi.n	8001346 <average+0x3e>
 8001338:	f7ff fca4 	bl	8000c84 <__aeabi_i2f>
 800133c:	4601      	mov	r1, r0
 800133e:	4628      	mov	r0, r5
 8001340:	f7ff fbec 	bl	8000b1c <__addsf3>
 8001344:	4605      	mov	r5, r0
	for(int i = 0; i < k; i++)
 8001346:	3401      	adds	r4, #1
 8001348:	e7e6      	b.n	8001318 <average+0x10>
	...

0800134c <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	2210      	movs	r2, #16
{
 800134e:	b510      	push	{r4, lr}
 8001350:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	eb0d 0002 	add.w	r0, sp, r2
 8001356:	2100      	movs	r1, #0
 8001358:	f001 fd80 	bl	8002e5c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_GPIO_Init+0x88>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800135e:	4c1e      	ldr	r4, [pc, #120]	; (80013d8 <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001360:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001362:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001364:	f042 0210 	orr.w	r2, r2, #16
 8001368:	619a      	str	r2, [r3, #24]
 800136a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800136c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001370:	f002 0210 	and.w	r2, r2, #16
 8001374:	9200      	str	r2, [sp, #0]
 8001376:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	f042 0220 	orr.w	r2, r2, #32
 800137e:	619a      	str	r2, [r3, #24]
 8001380:	699a      	ldr	r2, [r3, #24]
 8001382:	f002 0220 	and.w	r2, r2, #32
 8001386:	9201      	str	r2, [sp, #4]
 8001388:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	f042 0208 	orr.w	r2, r2, #8
 8001390:	619a      	str	r2, [r3, #24]
 8001392:	699a      	ldr	r2, [r3, #24]
 8001394:	f002 0208 	and.w	r2, r2, #8
 8001398:	9202      	str	r2, [sp, #8]
 800139a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	699a      	ldr	r2, [r3, #24]
 800139e:	f042 0204 	orr.w	r2, r2, #4
 80013a2:	619a      	str	r2, [r3, #24]
 80013a4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	9303      	str	r3, [sp, #12]
 80013ae:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013b0:	f000 fdca 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013c4:	a904      	add	r1, sp, #16
 80013c6:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f000 fcdd 	bl	8001d88 <HAL_GPIO_Init>

}
 80013ce:	b008      	add	sp, #32
 80013d0:	bd10      	pop	{r4, pc}
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40011000 	.word	0x40011000

080013dc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013dc:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80013de:	480c      	ldr	r0, [pc, #48]	; (8001410 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_I2C1_Init+0x38>)
 80013e2:	f8df e034 	ldr.w	lr, [pc, #52]	; 8001418 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 80013ea:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013ee:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f0:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013f4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013f8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fa:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013fe:	f000 fea5 	bl	800214c <HAL_I2C_Init>
 8001402:	b118      	cbz	r0, 800140c <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8001404:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001408:	f000 bb5a 	b.w	8001ac0 <Error_Handler>
 800140c:	bd08      	pop	{r3, pc}
 800140e:	bf00      	nop
 8001410:	2000011c 	.word	0x2000011c
 8001414:	40005400 	.word	0x40005400
 8001418:	00061a80 	.word	0x00061a80

0800141c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800141c:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800141e:	480c      	ldr	r0, [pc, #48]	; (8001450 <MX_I2C2_Init+0x34>)
  hi2c2.Init.ClockSpeed = 400000;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_I2C2_Init+0x38>)
 8001422:	f8df e034 	ldr.w	lr, [pc, #52]	; 8001458 <MX_I2C2_Init+0x3c>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 400000;
 800142a:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800142e:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001432:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001434:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001436:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001438:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800143a:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800143e:	f000 fe85 	bl	800214c <HAL_I2C_Init>
 8001442:	b118      	cbz	r0, 800144c <MX_I2C2_Init+0x30>
  {
    Error_Handler();
  }

}
 8001444:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001448:	f000 bb3a 	b.w	8001ac0 <Error_Handler>
 800144c:	bd08      	pop	{r3, pc}
 800144e:	bf00      	nop
 8001450:	20000170 	.word	0x20000170
 8001454:	40005800 	.word	0x40005800
 8001458:	00061a80 	.word	0x00061a80

0800145c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	2210      	movs	r2, #16
{
 800145e:	b510      	push	{r4, lr}
 8001460:	4604      	mov	r4, r0
 8001462:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	eb0d 0002 	add.w	r0, sp, r2
 8001468:	2100      	movs	r1, #0
 800146a:	f001 fcf7 	bl	8002e5c <memset>
  if(i2cHandle->Instance==I2C1)
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <HAL_I2C_MspInit+0x9c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d11e      	bne.n	80014b4 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	4c21      	ldr	r4, [pc, #132]	; (80014fc <HAL_I2C_MspInit+0xa0>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	4820      	ldr	r0, [pc, #128]	; (8001500 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	61a3      	str	r3, [r4, #24]
 8001484:	69a3      	ldr	r3, [r4, #24]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800148e:	23c0      	movs	r3, #192	; 0xc0
 8001490:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001492:	2312      	movs	r3, #18
 8001494:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	f000 fc75 	bl	8001d88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800149e:	69e3      	ldr	r3, [r4, #28]
 80014a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a4:	61e3      	str	r3, [r4, #28]
 80014a6:	69e3      	ldr	r3, [r4, #28]
 80014a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014b0:	b008      	add	sp, #32
 80014b2:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 80014b4:	4a13      	ldr	r2, [pc, #76]	; (8001504 <HAL_I2C_MspInit+0xa8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d1fa      	bne.n	80014b0 <HAL_I2C_MspInit+0x54>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	4c10      	ldr	r4, [pc, #64]	; (80014fc <HAL_I2C_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	480f      	ldr	r0, [pc, #60]	; (8001500 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	61a3      	str	r3, [r4, #24]
 80014c8:	69a3      	ldr	r3, [r4, #24]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	9302      	str	r3, [sp, #8]
 80014d0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d8:	2312      	movs	r3, #18
 80014da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	f000 fc52 	bl	8001d88 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e4:	69e3      	ldr	r3, [r4, #28]
 80014e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014ea:	61e3      	str	r3, [r4, #28]
 80014ec:	69e3      	ldr	r3, [r4, #28]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	9303      	str	r3, [sp, #12]
 80014f4:	9b03      	ldr	r3, [sp, #12]
}
 80014f6:	e7db      	b.n	80014b0 <HAL_I2C_MspInit+0x54>
 80014f8:	40005400 	.word	0x40005400
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010c00 	.word	0x40010c00
 8001504:	40005800 	.word	0x40005800

08001508 <CalculateMagnetEquation>:
 */

#include "magnetmath.h"

void CalculateMagnetEquation(double Br, double x, double y, double z, double magnet_radius, double magnet_height, double answer[])
{
 8001508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800150c:	b085      	sub	sp, #20
 800150e:	4614      	mov	r4, r2
 8001510:	461d      	mov	r5, r3
	double u0 = 4 * M_PI * 0.0000001;
	double V = pow(magnet_radius, 2) * M_PI * magnet_height;
 8001512:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
{
 8001516:	4680      	mov	r8, r0
 8001518:	4689      	mov	r9, r1
	double V = pow(magnet_radius, 2) * M_PI * magnet_height;
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7fe ffcf 	bl	80004c0 <__aeabi_dmul>
 8001522:	a361      	add	r3, pc, #388	; (adr r3, 80016a8 <CalculateMagnetEquation+0x1a0>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7fe ffca 	bl	80004c0 <__aeabi_dmul>
 800152c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8001530:	f7fe ffc6 	bl	80004c0 <__aeabi_dmul>
	double moment = (1 / u0) * Br * V;
 8001534:	a35e      	add	r3, pc, #376	; (adr r3, 80016b0 <CalculateMagnetEquation+0x1a8>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
	double V = pow(magnet_radius, 2) * M_PI * magnet_height;
 800153a:	4606      	mov	r6, r0
 800153c:	460f      	mov	r7, r1
	double moment = (1 / u0) * Br * V;
 800153e:	4640      	mov	r0, r8
 8001540:	4649      	mov	r1, r9
 8001542:	f7fe ffbd 	bl	80004c0 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4630      	mov	r0, r6
 800154c:	4639      	mov	r1, r7
 800154e:	f7fe ffb7 	bl	80004c0 <__aeabi_dmul>
	double e1 = u0 / (4 * M_PI);

	double e2_x = 3 * (moment * z) * x;
 8001552:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
	double moment = (1 / u0) * Br * V;
 8001556:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double e2_x = 3 * (moment * z) * x;
 800155a:	f7fe ffb1 	bl	80004c0 <__aeabi_dmul>
 800155e:	2200      	movs	r2, #0
 8001560:	4b59      	ldr	r3, [pc, #356]	; (80016c8 <CalculateMagnetEquation+0x1c0>)
 8001562:	f7fe ffad 	bl	80004c0 <__aeabi_dmul>
	double e2_y = 3 * (moment * z) * y;
	double e2_z = 3 * (moment * z) * z;

	double e3 = pow(sqrt(pow(x, 2) + pow(y, 2) + pow(z, 2)), 5);
 8001566:	4622      	mov	r2, r4
	double e2_x = 3 * (moment * z) * x;
 8001568:	4682      	mov	sl, r0
 800156a:	468b      	mov	fp, r1
	double e3 = pow(sqrt(pow(x, 2) + pow(y, 2) + pow(z, 2)), 5);
 800156c:	462b      	mov	r3, r5
 800156e:	4620      	mov	r0, r4
 8001570:	4629      	mov	r1, r5
 8001572:	f7fe ffa5 	bl	80004c0 <__aeabi_dmul>
 8001576:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800157a:	4606      	mov	r6, r0
 800157c:	460f      	mov	r7, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f7fe ff9d 	bl	80004c0 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4630      	mov	r0, r6
 800158c:	4639      	mov	r1, r7
 800158e:	f7fe fde5 	bl	800015c <__adddf3>
 8001592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001596:	4606      	mov	r6, r0
 8001598:	460f      	mov	r7, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f7fe ff8f 	bl	80004c0 <__aeabi_dmul>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4630      	mov	r0, r6
 80015a8:	4639      	mov	r1, r7
 80015aa:	f7fe fdd7 	bl	800015c <__adddf3>
 80015ae:	4606      	mov	r6, r0
 80015b0:	460f      	mov	r7, r1
 80015b2:	f001 fdbf 	bl	8003134 <sqrt>
 80015b6:	2200      	movs	r2, #0
 80015b8:	4b44      	ldr	r3, [pc, #272]	; (80016cc <CalculateMagnetEquation+0x1c4>)
 80015ba:	f001 fc57 	bl	8002e6c <pow>
 80015be:	4680      	mov	r8, r0
 80015c0:	4689      	mov	r9, r1

	double e4_x = 0;
	double e4_y = 0;
	double e4_z = moment;

	double e5 = pow(sqrt(pow(x, 2) + pow(y, 2) + pow(z, 2)), 3);
 80015c2:	4630      	mov	r0, r6
 80015c4:	4639      	mov	r1, r7
 80015c6:	f001 fdb5 	bl	8003134 <sqrt>
 80015ca:	2200      	movs	r2, #0
 80015cc:	4b3e      	ldr	r3, [pc, #248]	; (80016c8 <CalculateMagnetEquation+0x1c0>)
 80015ce:	f001 fc4d 	bl	8002e6c <pow>
 80015d2:	e9cd 0100 	strd	r0, r1, [sp]

	answer[0] = e1 * ((e2_x / e3) - (e4_x / e5)) * 10000000;
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	2000      	movs	r0, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	f7ff f899 	bl	8000714 <__aeabi_ddiv>
 80015e2:	4606      	mov	r6, r0
 80015e4:	460f      	mov	r7, r1
	double e2_x = 3 * (moment * z) * x;
 80015e6:	4622      	mov	r2, r4
 80015e8:	462b      	mov	r3, r5
 80015ea:	4650      	mov	r0, sl
 80015ec:	4659      	mov	r1, fp
 80015ee:	f7fe ff67 	bl	80004c0 <__aeabi_dmul>
	answer[0] = e1 * ((e2_x / e3) - (e4_x / e5)) * 10000000;
 80015f2:	4642      	mov	r2, r8
 80015f4:	464b      	mov	r3, r9
 80015f6:	f7ff f88d 	bl	8000714 <__aeabi_ddiv>
 80015fa:	4632      	mov	r2, r6
 80015fc:	463b      	mov	r3, r7
 80015fe:	f7fe fdab 	bl	8000158 <__aeabi_dsub>
 8001602:	a32d      	add	r3, pc, #180	; (adr r3, 80016b8 <CalculateMagnetEquation+0x1b0>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe ff5a 	bl	80004c0 <__aeabi_dmul>
 800160c:	a32c      	add	r3, pc, #176	; (adr r3, 80016c0 <CalculateMagnetEquation+0x1b8>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7fe ff55 	bl	80004c0 <__aeabi_dmul>
 8001616:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001618:	e9c3 0100 	strd	r0, r1, [r3]
	double e2_y = 3 * (moment * z) * y;
 800161c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001620:	4650      	mov	r0, sl
 8001622:	4659      	mov	r1, fp
 8001624:	f7fe ff4c 	bl	80004c0 <__aeabi_dmul>
	answer[1] = e1 * ((e2_y / e3) - (e4_y / e5)) * 10000000;
 8001628:	4642      	mov	r2, r8
 800162a:	464b      	mov	r3, r9
 800162c:	f7ff f872 	bl	8000714 <__aeabi_ddiv>
 8001630:	4632      	mov	r2, r6
 8001632:	463b      	mov	r3, r7
 8001634:	f7fe fd90 	bl	8000158 <__aeabi_dsub>
 8001638:	a31f      	add	r3, pc, #124	; (adr r3, 80016b8 <CalculateMagnetEquation+0x1b0>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe ff3f 	bl	80004c0 <__aeabi_dmul>
 8001642:	a31f      	add	r3, pc, #124	; (adr r3, 80016c0 <CalculateMagnetEquation+0x1b8>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe ff3a 	bl	80004c0 <__aeabi_dmul>
 800164c:	9b16      	ldr	r3, [sp, #88]	; 0x58
	double e2_z = 3 * (moment * z) * z;
 800164e:	4652      	mov	r2, sl
	answer[1] = e1 * ((e2_y / e3) - (e4_y / e5)) * 10000000;
 8001650:	e9c3 0102 	strd	r0, r1, [r3, #8]
	double e2_z = 3 * (moment * z) * z;
 8001654:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001658:	465b      	mov	r3, fp
 800165a:	f7fe ff31 	bl	80004c0 <__aeabi_dmul>
	answer[2] = e1 * ((e2_z / e3) - (e4_z / e5)) * 10000000;
 800165e:	4642      	mov	r2, r8
 8001660:	464b      	mov	r3, r9
 8001662:	f7ff f857 	bl	8000714 <__aeabi_ddiv>
 8001666:	e9dd 2300 	ldrd	r2, r3, [sp]
 800166a:	4604      	mov	r4, r0
 800166c:	460d      	mov	r5, r1
 800166e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001672:	f7ff f84f 	bl	8000714 <__aeabi_ddiv>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fd6b 	bl	8000158 <__aeabi_dsub>
 8001682:	a30d      	add	r3, pc, #52	; (adr r3, 80016b8 <CalculateMagnetEquation+0x1b0>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7fe ff1a 	bl	80004c0 <__aeabi_dmul>
 800168c:	a30c      	add	r3, pc, #48	; (adr r3, 80016c0 <CalculateMagnetEquation+0x1b8>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7fe ff15 	bl	80004c0 <__aeabi_dmul>
 8001696:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001698:	e9c3 0104 	strd	r0, r1, [r3, #16]
	//int i;
}
 800169c:	b005      	add	sp, #20
 800169e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016a2:	bf00      	nop
 80016a4:	f3af 8000 	nop.w
 80016a8:	54442d18 	.word	0x54442d18
 80016ac:	400921fb 	.word	0x400921fb
 80016b0:	6e50b45c 	.word	0x6e50b45c
 80016b4:	412848fd 	.word	0x412848fd
 80016b8:	9abcaf49 	.word	0x9abcaf49
 80016bc:	3e7ad7f2 	.word	0x3e7ad7f2
 80016c0:	00000000 	.word	0x00000000
 80016c4:	416312d0 	.word	0x416312d0
 80016c8:	40080000 	.word	0x40080000
 80016cc:	40140000 	.word	0x40140000

080016d0 <CompareSensorValue>:

void CompareSensorValue(double Br, double magnet_radius, double magnet_height, int field[], int min_ind[], double table[25][25][3])
{
 80016d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	double min_diff = 99999999;
 80016d4:	f20f 0bd8 	addw	fp, pc, #216	; 0xd8
 80016d8:	e9db ab00 	ldrd	sl, fp, [fp]
	for(int x = -12; x < 13; x++)
 80016dc:	f06f 060b 	mvn.w	r6, #11
{
 80016e0:	b085      	sub	sp, #20
 80016e2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80016e4:	463c      	mov	r4, r7
 80016e6:	f06f 050b 	mvn.w	r5, #11
	{
		for(int y = -12; y < 13; y++)
		{
			double difference = sqrt(pow(table[x+12][y+12][0] - field[0], 2) + pow(table[x+12][y+12][1] - field[1], 2) + pow(table[x+12][y+12][2] - field[2], 2));
 80016ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	f7fe fe81 	bl	80003f4 <__aeabi_i2d>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80016fa:	f7fe fd2d 	bl	8000158 <__aeabi_dsub>
 80016fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001700:	4680      	mov	r8, r0
 8001702:	6858      	ldr	r0, [r3, #4]
 8001704:	4689      	mov	r9, r1
 8001706:	f7fe fe75 	bl	80003f4 <__aeabi_i2d>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8001712:	f7fe fd21 	bl	8000158 <__aeabi_dsub>
 8001716:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001718:	e9cd 0100 	strd	r0, r1, [sp]
 800171c:	6898      	ldr	r0, [r3, #8]
 800171e:	f7fe fe69 	bl	80003f4 <__aeabi_i2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800172a:	f7fe fd15 	bl	8000158 <__aeabi_dsub>
 800172e:	4642      	mov	r2, r8
 8001730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001734:	464b      	mov	r3, r9
 8001736:	4640      	mov	r0, r8
 8001738:	4649      	mov	r1, r9
 800173a:	f7fe fec1 	bl	80004c0 <__aeabi_dmul>
 800173e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001742:	4680      	mov	r8, r0
 8001744:	4689      	mov	r9, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7fe feb9 	bl	80004c0 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4640      	mov	r0, r8
 8001754:	4649      	mov	r1, r9
 8001756:	f7fe fd01 	bl	800015c <__adddf3>
 800175a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800175e:	4680      	mov	r8, r0
 8001760:	4689      	mov	r9, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7fe feab 	bl	80004c0 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4640      	mov	r0, r8
 8001770:	4649      	mov	r1, r9
 8001772:	f7fe fcf3 	bl	800015c <__adddf3>
 8001776:	f001 fcdd 	bl	8003134 <sqrt>
			if(difference < min_diff)
 800177a:	4652      	mov	r2, sl
 800177c:	465b      	mov	r3, fp
			double difference = sqrt(pow(table[x+12][y+12][0] - field[0], 2) + pow(table[x+12][y+12][1] - field[1], 2) + pow(table[x+12][y+12][2] - field[2], 2));
 800177e:	4680      	mov	r8, r0
 8001780:	4689      	mov	r9, r1
			if(difference < min_diff)
 8001782:	f7ff f90f 	bl	80009a4 <__aeabi_dcmplt>
 8001786:	b120      	cbz	r0, 8001792 <CompareSensorValue+0xc2>
			{
				min_diff = difference;
 8001788:	46c2      	mov	sl, r8
 800178a:	46cb      	mov	fp, r9
				min_ind[0] = x;
 800178c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800178e:	601e      	str	r6, [r3, #0]
				min_ind[1] = y;
 8001790:	605d      	str	r5, [r3, #4]
		for(int y = -12; y < 13; y++)
 8001792:	3501      	adds	r5, #1
 8001794:	2d0d      	cmp	r5, #13
 8001796:	f104 0418 	add.w	r4, r4, #24
 800179a:	d1a6      	bne.n	80016ea <CompareSensorValue+0x1a>
	for(int x = -12; x < 13; x++)
 800179c:	3601      	adds	r6, #1
 800179e:	2e0d      	cmp	r6, #13
 80017a0:	f507 7716 	add.w	r7, r7, #600	; 0x258
 80017a4:	d19e      	bne.n	80016e4 <CompareSensorValue+0x14>
			}
		}
	}
}
 80017a6:	b005      	add	sp, #20
 80017a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017ac:	f3af 8000 	nop.w
 80017b0:	fc000000 	.word	0xfc000000
 80017b4:	4197d783 	.word	0x4197d783

080017b8 <CreateTable>:

void CreateTable(double table[25][25][3], double z, double Br, double magnet_radius, double magnet_height)
{
 80017b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(double x = -12; x < 13; x++)
	{
		for(double y = -12; y < 13; y++)
		{
			CalculateMagnetEquation(Br, x/100, y/100, z, magnet_radius, magnet_height, eq_res);
			table[(int)x+12][(int)y+12][0] = eq_res[0];
 80017bc:	f04f 0819 	mov.w	r8, #25
	for(double x = -12; x < 13; x++)
 80017c0:	f04f 0a00 	mov.w	sl, #0
{
 80017c4:	b097      	sub	sp, #92	; 0x5c
 80017c6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	for(double x = -12; x < 13; x++)
 80017ca:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8001894 <CreateTable+0xdc>
{
 80017ce:	900d      	str	r0, [sp, #52]	; 0x34
			CalculateMagnetEquation(Br, x/100, y/100, z, magnet_radius, magnet_height, eq_res);
 80017d0:	4b2f      	ldr	r3, [pc, #188]	; (8001890 <CreateTable+0xd8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	4650      	mov	r0, sl
 80017d6:	4659      	mov	r1, fp
 80017d8:	f7fe ff9c 	bl	8000714 <__aeabi_ddiv>
 80017dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			table[(int)x+12][(int)y+12][0] = eq_res[0];
 80017e0:	4650      	mov	r0, sl
 80017e2:	4659      	mov	r1, fp
 80017e4:	f7ff f91c 	bl	8000a20 <__aeabi_d2iz>
 80017e8:	f44f 7416 	mov.w	r4, #600	; 0x258
 80017ec:	2519      	movs	r5, #25
 80017ee:	2600      	movs	r6, #0
 80017f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80017f2:	4f28      	ldr	r7, [pc, #160]	; (8001894 <CreateTable+0xdc>)
 80017f4:	fb04 3400 	mla	r4, r4, r0, r3
			CalculateMagnetEquation(Br, x/100, y/100, z, magnet_radius, magnet_height, eq_res);
 80017f8:	f10d 0940 	add.w	r9, sp, #64	; 0x40
			table[(int)x+12][(int)y+12][0] = eq_res[0];
 80017fc:	f504 54e1 	add.w	r4, r4, #7200	; 0x1c20
			CalculateMagnetEquation(Br, x/100, y/100, z, magnet_radius, magnet_height, eq_res);
 8001800:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8001804:	4630      	mov	r0, r6
 8001806:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800180a:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800180e:	4639      	mov	r1, r7
 8001810:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001814:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001818:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800181c:	2200      	movs	r2, #0
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <CreateTable+0xd8>)
 8001820:	f8cd 9020 	str.w	r9, [sp, #32]
 8001824:	f7fe ff76 	bl	8000714 <__aeabi_ddiv>
 8001828:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800182c:	e9cd 0100 	strd	r0, r1, [sp]
 8001830:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8001834:	f7ff fe68 	bl	8001508 <CalculateMagnetEquation>
			table[(int)x+12][(int)y+12][0] = eq_res[0];
 8001838:	4639      	mov	r1, r7
 800183a:	4630      	mov	r0, r6
 800183c:	f7ff f8f0 	bl	8000a20 <__aeabi_d2iz>
 8001840:	2318      	movs	r3, #24
 8001842:	300c      	adds	r0, #12
 8001844:	fb03 4000 	mla	r0, r3, r0, r4
 8001848:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
		for(double y = -12; y < 13; y++)
 800184c:	4639      	mov	r1, r7
			table[(int)x+12][(int)y+12][0] = eq_res[0];
 800184e:	e9c0 2300 	strd	r2, r3, [r0]
			table[(int)x+12][(int)y+12][1] = eq_res[1];
 8001852:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8001856:	e9c0 2302 	strd	r2, r3, [r0, #8]
			table[(int)x+12][(int)y+12][2] = eq_res[2];
 800185a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800185e:	e9c0 2304 	strd	r2, r3, [r0, #16]
		for(double y = -12; y < 13; y++)
 8001862:	4630      	mov	r0, r6
 8001864:	2200      	movs	r2, #0
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <CreateTable+0xe0>)
 8001868:	f7fe fc78 	bl	800015c <__adddf3>
 800186c:	3d01      	subs	r5, #1
 800186e:	4606      	mov	r6, r0
 8001870:	460f      	mov	r7, r1
 8001872:	d1c5      	bne.n	8001800 <CreateTable+0x48>
	for(double x = -12; x < 13; x++)
 8001874:	4650      	mov	r0, sl
 8001876:	4659      	mov	r1, fp
 8001878:	2200      	movs	r2, #0
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <CreateTable+0xe0>)
 800187c:	f7fe fc6e 	bl	800015c <__adddf3>
 8001880:	f1b8 0801 	subs.w	r8, r8, #1
 8001884:	4682      	mov	sl, r0
 8001886:	468b      	mov	fp, r1
 8001888:	d1a2      	bne.n	80017d0 <CreateTable+0x18>
		}
	}
}
 800188a:	b017      	add	sp, #92	; 0x5c
 800188c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001890:	40590000 	.word	0x40590000
 8001894:	c0280000 	.word	0xc0280000
 8001898:	3ff00000 	.word	0x3ff00000

0800189c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800189c:	b510      	push	{r4, lr}
 800189e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a0:	2228      	movs	r2, #40	; 0x28
 80018a2:	2100      	movs	r1, #0
 80018a4:	a806      	add	r0, sp, #24
 80018a6:	f001 fad9 	bl	8002e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018aa:	2100      	movs	r1, #0
 80018ac:	2214      	movs	r2, #20
 80018ae:	a801      	add	r0, sp, #4
 80018b0:	f001 fad4 	bl	8002e5c <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b8:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ba:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018bc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018be:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c6:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018ca:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018cc:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ce:	f000 ff15 	bl	80026fc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018da:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018dc:	4621      	mov	r1, r4
 80018de:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e4:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018e8:	f001 f8d0 	bl	8002a8c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80018ec:	b010      	add	sp, #64	; 0x40
 80018ee:	bd10      	pop	{r4, pc}

080018f0 <main>:
{
 80018f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018f4:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80018f6:	f000 f9b5 	bl	8001c64 <HAL_Init>
  SystemClock_Config();
 80018fa:	f7ff ffcf 	bl	800189c <SystemClock_Config>
  MX_GPIO_Init();
 80018fe:	f7ff fd25 	bl	800134c <MX_GPIO_Init>
  MX_I2C2_Init();
 8001902:	f7ff fd8b 	bl	800141c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001906:	f000 f92f 	bl	8001b68 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800190a:	f7ff fd67 	bl	80013dc <MX_I2C1_Init>
  config();
 800190e:	f7ff fb83 	bl	8001018 <config>
  reset_background(field_L, field_R, bg_L, bg_R, 100);
 8001912:	2364      	movs	r3, #100	; 0x64
  CreateTable(table, 0.05, Br, magnet_radius, magnet_height);
 8001914:	4d56      	ldr	r5, [pc, #344]	; (8001a70 <main+0x180>)
 8001916:	4c57      	ldr	r4, [pc, #348]	; (8001a74 <main+0x184>)
  reset_background(field_L, field_R, bg_L, bg_R, 100);
 8001918:	4957      	ldr	r1, [pc, #348]	; (8001a78 <main+0x188>)
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	4a57      	ldr	r2, [pc, #348]	; (8001a7c <main+0x18c>)
 800191e:	4b58      	ldr	r3, [pc, #352]	; (8001a80 <main+0x190>)
 8001920:	4858      	ldr	r0, [pc, #352]	; (8001a84 <main+0x194>)
 8001922:	f7ff fca6 	bl	8001272 <reset_background>
  CreateTable(table, 0.05, Br, magnet_radius, magnet_height);
 8001926:	e9d5 2300 	ldrd	r2, r3, [r5]
 800192a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800192e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001932:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001936:	4e54      	ldr	r6, [pc, #336]	; (8001a88 <main+0x198>)
 8001938:	4854      	ldr	r0, [pc, #336]	; (8001a8c <main+0x19c>)
 800193a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800193e:	e9cd 2300 	strd	r2, r3, [sp]
 8001942:	a349      	add	r3, pc, #292	; (adr r3, 8001a68 <main+0x178>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7ff ff36 	bl	80017b8 <CreateTable>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0x0);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001952:	484f      	ldr	r0, [pc, #316]	; (8001a90 <main+0x1a0>)
 8001954:	f000 faf8 	bl	8001f48 <HAL_GPIO_WritePin>
 8001958:	46b2      	mov	sl, r6
	read_values_to_arrays(field_L, field_R);
 800195a:	4f47      	ldr	r7, [pc, #284]	; (8001a78 <main+0x188>)
 800195c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8001a84 <main+0x194>
	strsum_L[k] = str_L; //adds strength of magnetic field to array for average calculation
 8001960:	4e4c      	ldr	r6, [pc, #304]	; (8001a94 <main+0x1a4>)
	read_values_to_arrays(field_L, field_R);
 8001962:	4639      	mov	r1, r7
 8001964:	4640      	mov	r0, r8
 8001966:	f7ff fc7b 	bl	8001260 <read_values_to_arrays>
	for(int i = 0; i < 3; i++)
 800196a:	f04f 0e00 	mov.w	lr, #0
 800196e:	4a45      	ldr	r2, [pc, #276]	; (8001a84 <main+0x194>)
 8001970:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <main+0x188>)
	  field_L[i] -= bg_L[i]; //accounts for the background magnetic fields
 8001972:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8001a7c <main+0x18c>
	  field_R[i] -= bg_R[i];
 8001976:	f8df c108 	ldr.w	ip, [pc, #264]	; 8001a80 <main+0x190>
	  if(field_L[i] > 65536 / 2) field_L[i] = field_L[i] - 65536; //by default, negative magnetic fields are represented as decreasing from maximum 16 bit number 65535
 800197a:	6811      	ldr	r1, [r2, #0]
	  field_L[i] -= bg_L[i]; //accounts for the background magnetic fields
 800197c:	f859 002e 	ldr.w	r0, [r9, lr, lsl #2]
	  if(field_L[i] > 65536 / 2) field_L[i] = field_L[i] - 65536; //by default, negative magnetic fields are represented as decreasing from maximum 16 bit number 65535
 8001980:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001984:	bfc4      	itt	gt
 8001986:	f5a1 3180 	subgt.w	r1, r1, #65536	; 0x10000
 800198a:	6011      	strgt	r1, [r2, #0]
	  if(field_R[i] > 65536 / 2) field_R[i] = field_R[i] - 65536; //changes the representation of negative magnetic fields to negative values starting at zero
 800198c:	6819      	ldr	r1, [r3, #0]
 800198e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001992:	bfc4      	itt	gt
 8001994:	f5a1 3180 	subgt.w	r1, r1, #65536	; 0x10000
 8001998:	6019      	strgt	r1, [r3, #0]
	  field_L[i] -= bg_L[i]; //accounts for the background magnetic fields
 800199a:	6811      	ldr	r1, [r2, #0]
 800199c:	1a09      	subs	r1, r1, r0
 800199e:	f842 1b04 	str.w	r1, [r2], #4
	  field_R[i] -= bg_R[i];
 80019a2:	f85c 002e 	ldr.w	r0, [ip, lr, lsl #2]
 80019a6:	6819      	ldr	r1, [r3, #0]
	for(int i = 0; i < 3; i++)
 80019a8:	f10e 0e01 	add.w	lr, lr, #1
	  field_R[i] -= bg_R[i];
 80019ac:	1a09      	subs	r1, r1, r0
	for(int i = 0; i < 3; i++)
 80019ae:	f1be 0f03 	cmp.w	lr, #3
	  field_R[i] -= bg_R[i];
 80019b2:	f843 1b04 	str.w	r1, [r3], #4
	for(int i = 0; i < 3; i++)
 80019b6:	d1e0      	bne.n	800197a <main+0x8a>
	str_L = make_unit_vectors(field_L, vect_L); //creates array of directional unit vectors and outputs strength of magnetic field
 80019b8:	4937      	ldr	r1, [pc, #220]	; (8001a98 <main+0x1a8>)
 80019ba:	4640      	mov	r0, r8
 80019bc:	f7ff fbb4 	bl	8001128 <make_unit_vectors>
 80019c0:	4a36      	ldr	r2, [pc, #216]	; (8001a9c <main+0x1ac>)
	str_R = make_unit_vectors(field_R, vect_R);
 80019c2:	4937      	ldr	r1, [pc, #220]	; (8001aa0 <main+0x1b0>)
	str_L = make_unit_vectors(field_L, vect_L); //creates array of directional unit vectors and outputs strength of magnetic field
 80019c4:	6010      	str	r0, [r2, #0]
	str_R = make_unit_vectors(field_R, vect_R);
 80019c6:	4638      	mov	r0, r7
	str_L = make_unit_vectors(field_L, vect_L); //creates array of directional unit vectors and outputs strength of magnetic field
 80019c8:	9207      	str	r2, [sp, #28]
	str_R = make_unit_vectors(field_R, vect_R);
 80019ca:	f7ff fbad 	bl	8001128 <make_unit_vectors>
 80019ce:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <main+0x1b4>)
	strsum_L[k] = str_L; //adds strength of magnetic field to array for average calculation
 80019d0:	9a07      	ldr	r2, [sp, #28]
	str_R = make_unit_vectors(field_R, vect_R);
 80019d2:	6018      	str	r0, [r3, #0]
	strsum_L[k] = str_L; //adds strength of magnetic field to array for average calculation
 80019d4:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <main+0x1b8>)
	str_R = make_unit_vectors(field_R, vect_R);
 80019d6:	4683      	mov	fp, r0
	strsum_L[k] = str_L; //adds strength of magnetic field to array for average calculation
 80019d8:	6810      	ldr	r0, [r2, #0]
 80019da:	f8d3 9000 	ldr.w	r9, [r3]
 80019de:	9306      	str	r3, [sp, #24]
 80019e0:	f7ff faf4 	bl	8000fcc <__aeabi_f2iz>
 80019e4:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
	strsum_R[k] = str_R;
 80019e8:	4658      	mov	r0, fp
 80019ea:	f7ff faef 	bl	8000fcc <__aeabi_f2iz>
 80019ee:	4a2f      	ldr	r2, [pc, #188]	; (8001aac <main+0x1bc>)
	if(k >= 20) k = 0;
 80019f0:	9b06      	ldr	r3, [sp, #24]
	strsum_R[k] = str_R;
 80019f2:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
	k++;
 80019f6:	f109 0201 	add.w	r2, r9, #1
	if(k >= 20) k = 0;
 80019fa:	2a13      	cmp	r2, #19
 80019fc:	bfc8      	it	gt
 80019fe:	2200      	movgt	r2, #0
	avgstr_L = average(strsum_L, 20); //calculates the average of the most recent 20 field strength measurements
 8001a00:	2114      	movs	r1, #20
 8001a02:	4630      	mov	r0, r6
	if(k >= 20) k = 0;
 8001a04:	601a      	str	r2, [r3, #0]
	avgstr_L = average(strsum_L, 20); //calculates the average of the most recent 20 field strength measurements
 8001a06:	f7ff fc7f 	bl	8001308 <average>
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <main+0x1c0>)
	avgstr_R = average(strsum_R, 20);
 8001a0c:	2114      	movs	r1, #20
	avgstr_L = average(strsum_L, 20); //calculates the average of the most recent 20 field strength measurements
 8001a0e:	6018      	str	r0, [r3, #0]
	avgstr_R = average(strsum_R, 20);
 8001a10:	4826      	ldr	r0, [pc, #152]	; (8001aac <main+0x1bc>)
 8001a12:	f7ff fc79 	bl	8001308 <average>
 8001a16:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <main+0x1c4>)
	CompareSensorValue(Br, magnet_radius, magnet_height, field_L, index_L, table);
 8001a18:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001a8c <main+0x19c>
	avgstr_R = average(strsum_R, 20);
 8001a1c:	6018      	str	r0, [r3, #0]
	CompareSensorValue(Br, magnet_radius, magnet_height, field_L, index_L, table);
 8001a1e:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <main+0x1c8>)
 8001a20:	f8cd 9010 	str.w	r9, [sp, #16]
 8001a24:	9303      	str	r3, [sp, #12]
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <main+0x194>)
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001a2e:	e9cd 2300 	strd	r2, r3, [sp]
 8001a32:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001a36:	e9da 0100 	ldrd	r0, r1, [sl]
 8001a3a:	f7ff fe49 	bl	80016d0 <CompareSensorValue>
	CompareSensorValue(Br, magnet_radius, magnet_height, field_R, index_R, table);
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <main+0x1cc>)
 8001a40:	f8cd 9010 	str.w	r9, [sp, #16]
 8001a44:	9303      	str	r3, [sp, #12]
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <main+0x188>)
 8001a48:	9302      	str	r3, [sp, #8]
 8001a4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001a4e:	e9cd 2300 	strd	r2, r3, [sp]
 8001a52:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001a56:	e9da 0100 	ldrd	r0, r1, [sl]
 8001a5a:	f7ff fe39 	bl	80016d0 <CompareSensorValue>
	HAL_Delay(1);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f000 f924 	bl	8001cac <HAL_Delay>
	read_values_to_arrays(field_L, field_R);
 8001a64:	e77d      	b.n	8001962 <main+0x72>
 8001a66:	bf00      	nop
 8001a68:	9999999a 	.word	0x9999999a
 8001a6c:	3fa99999 	.word	0x3fa99999
 8001a70:	20000008 	.word	0x20000008
 8001a74:	20000010 	.word	0x20000010
 8001a78:	20000104 	.word	0x20000104
 8001a7c:	20000110 	.word	0x20000110
 8001a80:	200000dc 	.word	0x200000dc
 8001a84:	200000b8 	.word	0x200000b8
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	200001d0 	.word	0x200001d0
 8001a90:	40011000 	.word	0x40011000
 8001a94:	20003ccc 	.word	0x20003ccc
 8001a98:	200000d0 	.word	0x200000d0
 8001a9c:	200000ec 	.word	0x200000ec
 8001aa0:	200000c4 	.word	0x200000c4
 8001aa4:	200000e8 	.word	0x200000e8
 8001aa8:	200000ac 	.word	0x200000ac
 8001aac:	20003c70 	.word	0x20003c70
 8001ab0:	20003cc0 	.word	0x20003cc0
 8001ab4:	200001c8 	.word	0x200001c8
 8001ab8:	20003c68 	.word	0x20003c68
 8001abc:	20003cc4 	.word	0x20003cc4

08001ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac0:	4770      	bx	lr
	...

08001ac4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_MspInit+0x3c>)
{
 8001ac6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	619a      	str	r2, [r3, #24]
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	f002 0201 	and.w	r2, r2, #1
 8001ad6:	9200      	str	r2, [sp, #0]
 8001ad8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	69da      	ldr	r2, [r3, #28]
 8001adc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ae0:	61da      	str	r2, [r3, #28]
 8001ae2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aee:	6853      	ldr	r3, [r2, #4]
 8001af0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001af8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afa:	b002      	add	sp, #8
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010000 	.word	0x40010000

08001b08 <NMI_Handler>:
 8001b08:	4770      	bx	lr

08001b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	e7fe      	b.n	8001b0c <MemManage_Handler>

08001b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0e:	e7fe      	b.n	8001b0e <BusFault_Handler>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler>

08001b12 <SVC_Handler>:
 8001b12:	4770      	bx	lr

08001b14 <DebugMon_Handler>:
 8001b14:	4770      	bx	lr

08001b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b16:	4770      	bx	lr

08001b18 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b18:	f000 b8b6 	b.w	8001c88 <HAL_IncTick>

08001b1c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <SystemInit+0x40>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	f042 0201 	orr.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b26:	6859      	ldr	r1, [r3, #4]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <SystemInit+0x44>)
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b38:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b40:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001b48:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b4a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b4e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <SystemInit+0x48>)
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	f8ff0000 	.word	0xf8ff0000
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b68:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  huart1.Init.BaudRate = 115200;
 8001b6e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001b72:	480a      	ldr	r0, [pc, #40]	; (8001b9c <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <MX_USART1_UART_Init+0x38>)
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001b76:	6102      	str	r2, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8001b78:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b7c:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b80:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b84:	60c3      	str	r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b88:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b8a:	f001 f8ef 	bl	8002d6c <HAL_UART_Init>
 8001b8e:	b118      	cbz	r0, 8001b98 <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8001b90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001b94:	f7ff bf94 	b.w	8001ac0 <Error_Handler>
 8001b98:	bd08      	pop	{r3, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20003d1c 	.word	0x20003d1c
 8001ba0:	40013800 	.word	0x40013800

08001ba4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba4:	b510      	push	{r4, lr}
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	2210      	movs	r2, #16
 8001bac:	2100      	movs	r1, #0
 8001bae:	a802      	add	r0, sp, #8
 8001bb0:	f001 f954 	bl	8002e5c <memset>
  if(uartHandle->Instance==USART1)
 8001bb4:	6822      	ldr	r2, [r4, #0]
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_UART_MspInit+0x70>)
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d128      	bne.n	8001c0e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bbc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001bc0:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bc8:	619a      	str	r2, [r3, #24]
 8001bca:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	4812      	ldr	r0, [pc, #72]	; (8001c18 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001bd2:	9200      	str	r2, [sp, #0]
 8001bd4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	f042 0204 	orr.w	r2, r2, #4
 8001bdc:	619a      	str	r2, [r3, #24]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f000 f8c7 	bl	8001d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c00:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	a902      	add	r1, sp, #8
 8001c04:	4804      	ldr	r0, [pc, #16]	; (8001c18 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f000 f8bd 	bl	8001d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c0e:	b006      	add	sp, #24
 8001c10:	bd10      	pop	{r4, pc}
 8001c12:	bf00      	nop
 8001c14:	40013800 	.word	0x40013800
 8001c18:	40010800 	.word	0x40010800

08001c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_InitTick+0x3c>)
{
 8001c20:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c22:	7818      	ldrb	r0, [r3, #0]
 8001c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c28:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <HAL_InitTick+0x40>)
 8001c2e:	6810      	ldr	r0, [r2, #0]
 8001c30:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c34:	f000 f892 	bl	8001d5c <HAL_SYSTICK_Config>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	b958      	cbnz	r0, 8001c54 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3c:	2d0f      	cmp	r5, #15
 8001c3e:	d809      	bhi.n	8001c54 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	4602      	mov	r2, r0
 8001c42:	4629      	mov	r1, r5
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f000 f854 	bl	8001cf4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <HAL_InitTick+0x44>)
 8001c4e:	4620      	mov	r0, r4
 8001c50:	601d      	str	r5, [r3, #0]
 8001c52:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001c54:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001c56:	bd38      	pop	{r3, r4, r5, pc}
 8001c58:	2000001c 	.word	0x2000001c
 8001c5c:	20000018 	.word	0x20000018
 8001c60:	20000020 	.word	0x20000020

08001c64 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_Init+0x20>)
{
 8001c66:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c68:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c6c:	f043 0310 	orr.w	r3, r3, #16
 8001c70:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c72:	f000 f82d 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff ffd0 	bl	8001c1c <HAL_InitTick>
  HAL_MspInit();
 8001c7c:	f7ff ff22 	bl	8001ac4 <HAL_MspInit>
}
 8001c80:	2000      	movs	r0, #0
 8001c82:	bd08      	pop	{r3, pc}
 8001c84:	40022000 	.word	0x40022000

08001c88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c88:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <HAL_IncTick+0x10>)
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <HAL_IncTick+0x14>)
 8001c8c:	6811      	ldr	r1, [r2, #0]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	440b      	add	r3, r1
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20003d5c 	.word	0x20003d5c
 8001c9c:	2000001c 	.word	0x2000001c

08001ca0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ca0:	4b01      	ldr	r3, [pc, #4]	; (8001ca8 <HAL_GetTick+0x8>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20003d5c 	.word	0x20003d5c

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b538      	push	{r3, r4, r5, lr}
 8001cae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cb0:	f7ff fff6 	bl	8001ca0 <HAL_GetTick>
 8001cb4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb8:	bf1e      	ittt	ne
 8001cba:	4b04      	ldrne	r3, [pc, #16]	; (8001ccc <HAL_Delay+0x20>)
 8001cbc:	781b      	ldrbne	r3, [r3, #0]
 8001cbe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc0:	f7ff ffee 	bl	8001ca0 <HAL_GetTick>
 8001cc4:	1b40      	subs	r0, r0, r5
 8001cc6:	4284      	cmp	r4, r0
 8001cc8:	d8fa      	bhi.n	8001cc0 <HAL_Delay+0x14>
  {
  }
}
 8001cca:	bd38      	pop	{r3, r4, r5, pc}
 8001ccc:	2000001c 	.word	0x2000001c

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001cd2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001cd6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cde:	041b      	lsls	r3, r3, #16
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001cea:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001cec:	60d3      	str	r3, [r2, #12]
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf6:	b530      	push	{r4, r5, lr}
 8001cf8:	68dc      	ldr	r4, [r3, #12]
 8001cfa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	bf28      	it	cs
 8001d08:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d10:	bf98      	it	ls
 8001d12:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	fa05 f303 	lsl.w	r3, r5, r3
 8001d18:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1c:	bf88      	it	hi
 8001d1e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4019      	ands	r1, r3
 8001d22:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	fa05 f404 	lsl.w	r4, r5, r4
 8001d28:	3c01      	subs	r4, #1
 8001d2a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001d2c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2e:	ea42 0201 	orr.w	r2, r2, r1
 8001d32:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d36:	bfaf      	iteee	ge
 8001d38:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	4b06      	ldrlt	r3, [pc, #24]	; (8001d58 <HAL_NVIC_SetPriority+0x64>)
 8001d3e:	f000 000f 	andlt.w	r0, r0, #15
 8001d42:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	bfa5      	ittet	ge
 8001d46:	b2d2      	uxtbge	r2, r2
 8001d48:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001d52:	bd30      	pop	{r4, r5, pc}
 8001d54:	e000ed00 	.word	0xe000ed00
 8001d58:	e000ed14 	.word	0xe000ed14

08001d5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	3801      	subs	r0, #1
 8001d5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001d62:	d20a      	bcs.n	8001d7a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001d8c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001d8e:	4616      	mov	r6, r2
 8001d90:	4b65      	ldr	r3, [pc, #404]	; (8001f28 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d92:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001f38 <HAL_GPIO_Init+0x1b0>
 8001d96:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001f3c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001d9a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001da0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001da8:	45a0      	cmp	r8, r4
 8001daa:	d17f      	bne.n	8001eac <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001dac:	684d      	ldr	r5, [r1, #4]
 8001dae:	2d12      	cmp	r5, #18
 8001db0:	f000 80af 	beq.w	8001f12 <HAL_GPIO_Init+0x18a>
 8001db4:	f200 8088 	bhi.w	8001ec8 <HAL_GPIO_Init+0x140>
 8001db8:	2d02      	cmp	r5, #2
 8001dba:	f000 80a7 	beq.w	8001f0c <HAL_GPIO_Init+0x184>
 8001dbe:	d87c      	bhi.n	8001eba <HAL_GPIO_Init+0x132>
 8001dc0:	2d00      	cmp	r5, #0
 8001dc2:	f000 808e 	beq.w	8001ee2 <HAL_GPIO_Init+0x15a>
 8001dc6:	2d01      	cmp	r5, #1
 8001dc8:	f000 809e 	beq.w	8001f08 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dcc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dd0:	2cff      	cmp	r4, #255	; 0xff
 8001dd2:	bf93      	iteet	ls
 8001dd4:	4682      	movls	sl, r0
 8001dd6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001dda:	3d08      	subhi	r5, #8
 8001ddc:	f8d0 b000 	ldrls.w	fp, [r0]
 8001de0:	bf92      	itee	ls
 8001de2:	00b5      	lslls	r5, r6, #2
 8001de4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001de8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dea:	fa09 f805 	lsl.w	r8, r9, r5
 8001dee:	ea2b 0808 	bic.w	r8, fp, r8
 8001df2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001df6:	bf88      	it	hi
 8001df8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dfc:	ea48 0505 	orr.w	r5, r8, r5
 8001e00:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e04:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001e08:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001e0c:	d04e      	beq.n	8001eac <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e0e:	4d47      	ldr	r5, [pc, #284]	; (8001f2c <HAL_GPIO_Init+0x1a4>)
 8001e10:	4f46      	ldr	r7, [pc, #280]	; (8001f2c <HAL_GPIO_Init+0x1a4>)
 8001e12:	69ad      	ldr	r5, [r5, #24]
 8001e14:	f026 0803 	bic.w	r8, r6, #3
 8001e18:	f045 0501 	orr.w	r5, r5, #1
 8001e1c:	61bd      	str	r5, [r7, #24]
 8001e1e:	69bd      	ldr	r5, [r7, #24]
 8001e20:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001e24:	f005 0501 	and.w	r5, r5, #1
 8001e28:	9501      	str	r5, [sp, #4]
 8001e2a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001e2e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e32:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001e34:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001e38:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001e3c:	fa09 f90b 	lsl.w	r9, r9, fp
 8001e40:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e44:	4d3a      	ldr	r5, [pc, #232]	; (8001f30 <HAL_GPIO_Init+0x1a8>)
 8001e46:	42a8      	cmp	r0, r5
 8001e48:	d068      	beq.n	8001f1c <HAL_GPIO_Init+0x194>
 8001e4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e4e:	42a8      	cmp	r0, r5
 8001e50:	d066      	beq.n	8001f20 <HAL_GPIO_Init+0x198>
 8001e52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e56:	42a8      	cmp	r0, r5
 8001e58:	d064      	beq.n	8001f24 <HAL_GPIO_Init+0x19c>
 8001e5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e5e:	42a8      	cmp	r0, r5
 8001e60:	bf0c      	ite	eq
 8001e62:	2503      	moveq	r5, #3
 8001e64:	2504      	movne	r5, #4
 8001e66:	fa05 f50b 	lsl.w	r5, r5, fp
 8001e6a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001e6e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e72:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e74:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001e78:	bf14      	ite	ne
 8001e7a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e7c:	43a5      	biceq	r5, r4
 8001e7e:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e80:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e82:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001e86:	bf14      	ite	ne
 8001e88:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e8a:	43a5      	biceq	r5, r4
 8001e8c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e8e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e90:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e94:	bf14      	ite	ne
 8001e96:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e98:	43a5      	biceq	r5, r4
 8001e9a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e9c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e9e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ea2:	bf14      	ite	ne
 8001ea4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ea6:	ea25 0404 	biceq.w	r4, r5, r4
 8001eaa:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001eac:	3601      	adds	r6, #1
 8001eae:	2e10      	cmp	r6, #16
 8001eb0:	f47f af73 	bne.w	8001d9a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001eb4:	b003      	add	sp, #12
 8001eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001eba:	2d03      	cmp	r5, #3
 8001ebc:	d022      	beq.n	8001f04 <HAL_GPIO_Init+0x17c>
 8001ebe:	2d11      	cmp	r5, #17
 8001ec0:	d184      	bne.n	8001dcc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ec2:	68ca      	ldr	r2, [r1, #12]
 8001ec4:	3204      	adds	r2, #4
          break;
 8001ec6:	e781      	b.n	8001dcc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001ec8:	4f1a      	ldr	r7, [pc, #104]	; (8001f34 <HAL_GPIO_Init+0x1ac>)
 8001eca:	42bd      	cmp	r5, r7
 8001ecc:	d009      	beq.n	8001ee2 <HAL_GPIO_Init+0x15a>
 8001ece:	d812      	bhi.n	8001ef6 <HAL_GPIO_Init+0x16e>
 8001ed0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001f40 <HAL_GPIO_Init+0x1b8>
 8001ed4:	454d      	cmp	r5, r9
 8001ed6:	d004      	beq.n	8001ee2 <HAL_GPIO_Init+0x15a>
 8001ed8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001edc:	454d      	cmp	r5, r9
 8001ede:	f47f af75 	bne.w	8001dcc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ee2:	688a      	ldr	r2, [r1, #8]
 8001ee4:	b1c2      	cbz	r2, 8001f18 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ee6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001ee8:	bf0c      	ite	eq
 8001eea:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001eee:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	e76a      	b.n	8001dcc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001ef6:	4575      	cmp	r5, lr
 8001ef8:	d0f3      	beq.n	8001ee2 <HAL_GPIO_Init+0x15a>
 8001efa:	4565      	cmp	r5, ip
 8001efc:	d0f1      	beq.n	8001ee2 <HAL_GPIO_Init+0x15a>
 8001efe:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001f44 <HAL_GPIO_Init+0x1bc>
 8001f02:	e7eb      	b.n	8001edc <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f04:	2200      	movs	r2, #0
 8001f06:	e761      	b.n	8001dcc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f08:	68ca      	ldr	r2, [r1, #12]
          break;
 8001f0a:	e75f      	b.n	8001dcc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f0c:	68ca      	ldr	r2, [r1, #12]
 8001f0e:	3208      	adds	r2, #8
          break;
 8001f10:	e75c      	b.n	8001dcc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f12:	68ca      	ldr	r2, [r1, #12]
 8001f14:	320c      	adds	r2, #12
          break;
 8001f16:	e759      	b.n	8001dcc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f18:	2204      	movs	r2, #4
 8001f1a:	e757      	b.n	8001dcc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f1c:	2500      	movs	r5, #0
 8001f1e:	e7a2      	b.n	8001e66 <HAL_GPIO_Init+0xde>
 8001f20:	2501      	movs	r5, #1
 8001f22:	e7a0      	b.n	8001e66 <HAL_GPIO_Init+0xde>
 8001f24:	2502      	movs	r5, #2
 8001f26:	e79e      	b.n	8001e66 <HAL_GPIO_Init+0xde>
 8001f28:	40010400 	.word	0x40010400
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40010800 	.word	0x40010800
 8001f34:	10210000 	.word	0x10210000
 8001f38:	10310000 	.word	0x10310000
 8001f3c:	10320000 	.word	0x10320000
 8001f40:	10110000 	.word	0x10110000
 8001f44:	10220000 	.word	0x10220000

08001f48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f48:	b10a      	cbz	r2, 8001f4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f4a:	6101      	str	r1, [r0, #16]
 8001f4c:	4770      	bx	lr
 8001f4e:	0409      	lsls	r1, r1, #16
 8001f50:	e7fb      	b.n	8001f4a <HAL_GPIO_WritePin+0x2>

08001f52 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f52:	6802      	ldr	r2, [r0, #0]
 8001f54:	6953      	ldr	r3, [r2, #20]
 8001f56:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001f5a:	d00d      	beq.n	8001f78 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f5c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001f60:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f62:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001f64:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f66:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001f70:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001f74:	2001      	movs	r0, #1
 8001f76:	4770      	bx	lr
  }
  return HAL_OK;
 8001f78:	4618      	mov	r0, r3
}
 8001f7a:	4770      	bx	lr

08001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f80:	4604      	mov	r4, r0
 8001f82:	4617      	mov	r7, r2
 8001f84:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f86:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001f8a:	b28e      	uxth	r6, r1
 8001f8c:	6825      	ldr	r5, [r4, #0]
 8001f8e:	f1b8 0f01 	cmp.w	r8, #1
 8001f92:	bf0c      	ite	eq
 8001f94:	696b      	ldreq	r3, [r5, #20]
 8001f96:	69ab      	ldrne	r3, [r5, #24]
 8001f98:	ea36 0303 	bics.w	r3, r6, r3
 8001f9c:	bf14      	ite	ne
 8001f9e:	2001      	movne	r0, #1
 8001fa0:	2000      	moveq	r0, #0
 8001fa2:	b908      	cbnz	r0, 8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fa8:	696b      	ldr	r3, [r5, #20]
 8001faa:	055a      	lsls	r2, r3, #21
 8001fac:	d512      	bpl.n	8001fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fae:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001fb0:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001fbc:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fc2:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001fc4:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fc6:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001fc8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001fcc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001fd4:	1c7b      	adds	r3, r7, #1
 8001fd6:	d0d9      	beq.n	8001f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001fd8:	b94f      	cbnz	r7, 8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fda:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001fdc:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fde:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001fe0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001fe4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001fe8:	2003      	movs	r0, #3
 8001fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001fee:	f7ff fe57 	bl	8001ca0 <HAL_GetTick>
 8001ff2:	eba0 0009 	sub.w	r0, r0, r9
 8001ff6:	4287      	cmp	r7, r0
 8001ff8:	d2c8      	bcs.n	8001f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001ffa:	e7ee      	b.n	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001ffc <I2C_WaitOnFlagUntilTimeout>:
{
 8001ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002000:	4604      	mov	r4, r0
 8002002:	4690      	mov	r8, r2
 8002004:	461f      	mov	r7, r3
 8002006:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002008:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800200c:	b28d      	uxth	r5, r1
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	f1b9 0f01 	cmp.w	r9, #1
 8002014:	bf0c      	ite	eq
 8002016:	695b      	ldreq	r3, [r3, #20]
 8002018:	699b      	ldrne	r3, [r3, #24]
 800201a:	ea35 0303 	bics.w	r3, r5, r3
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	4543      	cmp	r3, r8
 8002026:	d002      	beq.n	800202e <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8002028:	2000      	movs	r0, #0
}
 800202a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800202e:	1c7b      	adds	r3, r7, #1
 8002030:	d0ed      	beq.n	800200e <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002032:	b95f      	cbnz	r7, 800204c <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002034:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8002036:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002038:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800203a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800203e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002042:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002044:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800204c:	f7ff fe28 	bl	8001ca0 <HAL_GetTick>
 8002050:	1b80      	subs	r0, r0, r6
 8002052:	4287      	cmp	r7, r0
 8002054:	d2db      	bcs.n	800200e <I2C_WaitOnFlagUntilTimeout+0x12>
 8002056:	e7ed      	b.n	8002034 <I2C_WaitOnFlagUntilTimeout+0x38>

08002058 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	4604      	mov	r4, r0
 800205c:	460d      	mov	r5, r1
 800205e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	061b      	lsls	r3, r3, #24
 8002066:	d501      	bpl.n	800206c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8002068:	2000      	movs	r0, #0
 800206a:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800206c:	4620      	mov	r0, r4
 800206e:	f7ff ff70 	bl	8001f52 <I2C_IsAcknowledgeFailed>
 8002072:	b9a8      	cbnz	r0, 80020a0 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8002074:	1c6a      	adds	r2, r5, #1
 8002076:	d0f3      	beq.n	8002060 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002078:	b965      	cbnz	r5, 8002094 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800207a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800207c:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800207e:	f043 0320 	orr.w	r3, r3, #32
 8002082:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002084:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8002086:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8002088:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800208a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800208e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8002092:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002094:	f7ff fe04 	bl	8001ca0 <HAL_GetTick>
 8002098:	1b80      	subs	r0, r0, r6
 800209a:	4285      	cmp	r5, r0
 800209c:	d2e0      	bcs.n	8002060 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 800209e:	e7ec      	b.n	800207a <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80020a0:	2001      	movs	r0, #1
}
 80020a2:	bd70      	pop	{r4, r5, r6, pc}

080020a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	4604      	mov	r4, r0
 80020a8:	460d      	mov	r5, r1
 80020aa:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020ac:	6820      	ldr	r0, [r4, #0]
 80020ae:	6943      	ldr	r3, [r0, #20]
 80020b0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80020b4:	d001      	beq.n	80020ba <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80020b6:	2000      	movs	r0, #0
}
 80020b8:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020ba:	6942      	ldr	r2, [r0, #20]
 80020bc:	06d2      	lsls	r2, r2, #27
 80020be:	d50b      	bpl.n	80020d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020c0:	f06f 0210 	mvn.w	r2, #16
 80020c4:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 80020c6:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c8:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80020ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80020ce:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80020d0:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 80020d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80020d6:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80020d8:	b95d      	cbnz	r5, 80020f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020da:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80020dc:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020de:	f043 0320 	orr.w	r3, r3, #32
 80020e2:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80020e4:	2320      	movs	r3, #32
 80020e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 80020ea:	2300      	movs	r3, #0
 80020ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80020f2:	f7ff fdd5 	bl	8001ca0 <HAL_GetTick>
 80020f6:	1b80      	subs	r0, r0, r6
 80020f8:	4285      	cmp	r5, r0
 80020fa:	d2d7      	bcs.n	80020ac <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80020fc:	e7ed      	b.n	80020da <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080020fe <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80020fe:	b570      	push	{r4, r5, r6, lr}
 8002100:	4604      	mov	r4, r0
 8002102:	460d      	mov	r5, r1
 8002104:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	075b      	lsls	r3, r3, #29
 800210c:	d501      	bpl.n	8002112 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800210e:	2000      	movs	r0, #0
 8002110:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002112:	4620      	mov	r0, r4
 8002114:	f7ff ff1d 	bl	8001f52 <I2C_IsAcknowledgeFailed>
 8002118:	b9a8      	cbnz	r0, 8002146 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800211a:	1c6a      	adds	r2, r5, #1
 800211c:	d0f3      	beq.n	8002106 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800211e:	b965      	cbnz	r5, 800213a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002120:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8002122:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002124:	f043 0320 	orr.w	r3, r3, #32
 8002128:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800212a:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 800212c:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800212e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8002130:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002134:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8002138:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800213a:	f7ff fdb1 	bl	8001ca0 <HAL_GetTick>
 800213e:	1b80      	subs	r0, r0, r6
 8002140:	4285      	cmp	r5, r0
 8002142:	d2e0      	bcs.n	8002106 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8002144:	e7ec      	b.n	8002120 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8002146:	2001      	movs	r0, #1
}
 8002148:	bd70      	pop	{r4, r5, r6, pc}
	...

0800214c <HAL_I2C_Init>:
{
 800214c:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 800214e:	4604      	mov	r4, r0
 8002150:	b908      	cbnz	r0, 8002156 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002152:	2001      	movs	r0, #1
 8002154:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002156:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800215a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800215e:	b91b      	cbnz	r3, 8002168 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002160:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002164:	f7ff f97a 	bl	800145c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002168:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800216a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800216c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002170:	6813      	ldr	r3, [r2, #0]
 8002172:	f023 0301 	bic.w	r3, r3, #1
 8002176:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002178:	f000 fd3a 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800217c:	6863      	ldr	r3, [r4, #4]
 800217e:	4a2f      	ldr	r2, [pc, #188]	; (800223c <HAL_I2C_Init+0xf0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d830      	bhi.n	80021e6 <HAL_I2C_Init+0x9a>
 8002184:	4a2e      	ldr	r2, [pc, #184]	; (8002240 <HAL_I2C_Init+0xf4>)
 8002186:	4290      	cmp	r0, r2
 8002188:	d9e3      	bls.n	8002152 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800218a:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 800218c:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800218e:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8002192:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002194:	3201      	adds	r2, #1
 8002196:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002198:	4a28      	ldr	r2, [pc, #160]	; (800223c <HAL_I2C_Init+0xf0>)
 800219a:	3801      	subs	r0, #1
 800219c:	4293      	cmp	r3, r2
 800219e:	d832      	bhi.n	8002206 <HAL_I2C_Init+0xba>
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80021a6:	1c43      	adds	r3, r0, #1
 80021a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	bf38      	it	cc
 80021b0:	2304      	movcc	r3, #4
 80021b2:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021b4:	6a22      	ldr	r2, [r4, #32]
 80021b6:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b8:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80021be:	68e2      	ldr	r2, [r4, #12]
 80021c0:	6923      	ldr	r3, [r4, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80021c6:	69a2      	ldr	r2, [r4, #24]
 80021c8:	6963      	ldr	r3, [r4, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80021ce:	680b      	ldr	r3, [r1, #0]
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80021d6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d8:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021de:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80021e4:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021e6:	4a18      	ldr	r2, [pc, #96]	; (8002248 <HAL_I2C_Init+0xfc>)
 80021e8:	4290      	cmp	r0, r2
 80021ea:	d9b2      	bls.n	8002152 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80021ec:	4d15      	ldr	r5, [pc, #84]	; (8002244 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80021ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80021f2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80021f6:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80021f8:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80021fa:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80021fc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002200:	fbb2 f2f5 	udiv	r2, r2, r5
 8002204:	e7c6      	b.n	8002194 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002206:	68a2      	ldr	r2, [r4, #8]
 8002208:	b952      	cbnz	r2, 8002220 <HAL_I2C_Init+0xd4>
 800220a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800220e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002212:	1c43      	adds	r3, r0, #1
 8002214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002218:	b16b      	cbz	r3, 8002236 <HAL_I2C_Init+0xea>
 800221a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800221e:	e7c8      	b.n	80021b2 <HAL_I2C_Init+0x66>
 8002220:	2219      	movs	r2, #25
 8002222:	4353      	muls	r3, r2
 8002224:	fbb0 f0f3 	udiv	r0, r0, r3
 8002228:	1c43      	adds	r3, r0, #1
 800222a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222e:	b113      	cbz	r3, 8002236 <HAL_I2C_Init+0xea>
 8002230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002234:	e7bd      	b.n	80021b2 <HAL_I2C_Init+0x66>
 8002236:	2301      	movs	r3, #1
 8002238:	e7bb      	b.n	80021b2 <HAL_I2C_Init+0x66>
 800223a:	bf00      	nop
 800223c:	000186a0 	.word	0x000186a0
 8002240:	001e847f 	.word	0x001e847f
 8002244:	000f4240 	.word	0x000f4240
 8002248:	003d08ff 	.word	0x003d08ff

0800224c <HAL_I2C_Master_Transmit>:
{
 800224c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002250:	4604      	mov	r4, r0
 8002252:	461f      	mov	r7, r3
 8002254:	460d      	mov	r5, r1
 8002256:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8002258:	f7ff fd22 	bl	8001ca0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800225c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8002260:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002262:	2b20      	cmp	r3, #32
 8002264:	d004      	beq.n	8002270 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8002266:	2502      	movs	r5, #2
}
 8002268:	4628      	mov	r0, r5
 800226a:	b004      	add	sp, #16
 800226c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002270:	9000      	str	r0, [sp, #0]
 8002272:	2319      	movs	r3, #25
 8002274:	2201      	movs	r2, #1
 8002276:	495d      	ldr	r1, [pc, #372]	; (80023ec <HAL_I2C_Master_Transmit+0x1a0>)
 8002278:	4620      	mov	r0, r4
 800227a:	f7ff febf 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 800227e:	2800      	cmp	r0, #0
 8002280:	d1f1      	bne.n	8002266 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8002282:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002286:	2b01      	cmp	r3, #1
 8002288:	d0ed      	beq.n	8002266 <HAL_I2C_Master_Transmit+0x1a>
 800228a:	2301      	movs	r3, #1
 800228c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002296:	bf5e      	ittt	pl
 8002298:	681a      	ldrpl	r2, [r3, #0]
 800229a:	f042 0201 	orrpl.w	r2, r2, #1
 800229e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a6:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022a8:	2221      	movs	r2, #33	; 0x21
 80022aa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022ae:	2210      	movs	r2, #16
 80022b0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b4:	2200      	movs	r2, #0
 80022b6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022b8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80022bc:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022be:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80022c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80022c2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80022c6:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022ca:	2a04      	cmp	r2, #4
 80022cc:	d004      	beq.n	80022d8 <HAL_I2C_Master_Transmit+0x8c>
 80022ce:	2a01      	cmp	r2, #1
 80022d0:	d002      	beq.n	80022d8 <HAL_I2C_Master_Transmit+0x8c>
 80022d2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80022d6:	d104      	bne.n	80022e2 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e002      	b.n	80022e8 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80022e4:	2a12      	cmp	r2, #18
 80022e6:	d0f7      	beq.n	80022d8 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022e8:	9600      	str	r6, [sp, #0]
 80022ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022ec:	2200      	movs	r2, #0
 80022ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022f2:	4620      	mov	r0, r4
 80022f4:	f7ff fe82 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 80022f8:	bb28      	cbnz	r0, 8002346 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022fa:	6923      	ldr	r3, [r4, #16]
 80022fc:	6822      	ldr	r2, [r4, #0]
 80022fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002302:	d112      	bne.n	800232a <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002304:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002308:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800230a:	4633      	mov	r3, r6
 800230c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800230e:	4938      	ldr	r1, [pc, #224]	; (80023f0 <HAL_I2C_Master_Transmit+0x1a4>)
 8002310:	4620      	mov	r0, r4
 8002312:	f7ff fe33 	bl	8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002316:	4605      	mov	r5, r0
 8002318:	b9a0      	cbnz	r0, 8002344 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	9003      	str	r0, [sp, #12]
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	9203      	str	r2, [sp, #12]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	9303      	str	r3, [sp, #12]
 8002326:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8002328:	e050      	b.n	80023cc <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800232a:	11eb      	asrs	r3, r5, #7
 800232c:	f003 0306 	and.w	r3, r3, #6
 8002330:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002334:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002336:	492f      	ldr	r1, [pc, #188]	; (80023f4 <HAL_I2C_Master_Transmit+0x1a8>)
 8002338:	4633      	mov	r3, r6
 800233a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800233c:	4620      	mov	r0, r4
 800233e:	f7ff fe1d 	bl	8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002342:	b148      	cbz	r0, 8002358 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002344:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002348:	2b04      	cmp	r3, #4
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	d107      	bne.n	8002360 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8002350:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002354:	2501      	movs	r5, #1
 8002356:	e787      	b.n	8002268 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	b2ed      	uxtb	r5, r5
 800235c:	611d      	str	r5, [r3, #16]
 800235e:	e7d4      	b.n	800230a <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8002360:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8002364:	2503      	movs	r5, #3
 8002366:	e77f      	b.n	8002268 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002368:	4632      	mov	r2, r6
 800236a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800236c:	4620      	mov	r0, r4
 800236e:	f7ff fe73 	bl	8002058 <I2C_WaitOnTXEFlagUntilTimeout>
 8002372:	b140      	cbz	r0, 8002386 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002374:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002376:	2b04      	cmp	r3, #4
 8002378:	d1f4      	bne.n	8002364 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800237a:	6822      	ldr	r2, [r4, #0]
 800237c:	6813      	ldr	r3, [r2, #0]
 800237e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e7e6      	b.n	8002354 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002386:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002388:	6820      	ldr	r0, [r4, #0]
 800238a:	1c4b      	adds	r3, r1, #1
 800238c:	6263      	str	r3, [r4, #36]	; 0x24
 800238e:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8002390:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002392:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8002394:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002396:	3b01      	subs	r3, #1
 8002398:	b29b      	uxth	r3, r3
 800239a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800239c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800239e:	1e53      	subs	r3, r2, #1
 80023a0:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023a2:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80023a4:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023a6:	d50a      	bpl.n	80023be <HAL_I2C_Master_Transmit+0x172>
 80023a8:	b14b      	cbz	r3, 80023be <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80023aa:	1c8b      	adds	r3, r1, #2
 80023ac:	6263      	str	r3, [r4, #36]	; 0x24
 80023ae:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80023b0:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80023b2:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80023b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80023b6:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023be:	4632      	mov	r2, r6
 80023c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7ff fe9b 	bl	80020fe <I2C_WaitOnBTFFlagUntilTimeout>
 80023c8:	2800      	cmp	r0, #0
 80023ca:	d1d3      	bne.n	8002374 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80023cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ca      	bne.n	8002368 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80023d2:	6821      	ldr	r1, [r4, #0]
 80023d4:	680a      	ldr	r2, [r1, #0]
 80023d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023da:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80023dc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80023de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80023ea:	e73d      	b.n	8002268 <HAL_I2C_Master_Transmit+0x1c>
 80023ec:	00100002 	.word	0x00100002
 80023f0:	00010002 	.word	0x00010002
 80023f4:	00010008 	.word	0x00010008

080023f8 <HAL_I2C_Master_Receive>:
{
 80023f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023fc:	4604      	mov	r4, r0
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	4698      	mov	r8, r3
 8002402:	460d      	mov	r5, r1
 8002404:	4691      	mov	r9, r2
 8002406:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002408:	f7ff fc4a 	bl	8001ca0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800240c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8002410:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002412:	2b20      	cmp	r3, #32
 8002414:	d004      	beq.n	8002420 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8002416:	2502      	movs	r5, #2
}
 8002418:	4628      	mov	r0, r5
 800241a:	b009      	add	sp, #36	; 0x24
 800241c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002420:	9000      	str	r0, [sp, #0]
 8002422:	2319      	movs	r3, #25
 8002424:	2201      	movs	r2, #1
 8002426:	49a2      	ldr	r1, [pc, #648]	; (80026b0 <HAL_I2C_Master_Receive+0x2b8>)
 8002428:	4620      	mov	r0, r4
 800242a:	f7ff fde7 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 800242e:	2800      	cmp	r0, #0
 8002430:	d1f1      	bne.n	8002416 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8002432:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002436:	2b01      	cmp	r3, #1
 8002438:	d0ed      	beq.n	8002416 <HAL_I2C_Master_Receive+0x1e>
 800243a:	2301      	movs	r3, #1
 800243c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002446:	bf5e      	ittt	pl
 8002448:	681a      	ldrpl	r2, [r3, #0]
 800244a:	f042 0201 	orrpl.w	r2, r2, #1
 800244e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002456:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002458:	2222      	movs	r2, #34	; 0x22
 800245a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800245e:	2210      	movs	r2, #16
 8002460:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002464:	2200      	movs	r2, #0
 8002466:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002468:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 800246c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002470:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002472:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002474:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002478:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800247a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800247c:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800247e:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002480:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002484:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002486:	d004      	beq.n	8002492 <HAL_I2C_Master_Receive+0x9a>
 8002488:	2a01      	cmp	r2, #1
 800248a:	d002      	beq.n	8002492 <HAL_I2C_Master_Receive+0x9a>
 800248c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002490:	d104      	bne.n	800249c <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e002      	b.n	80024a2 <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800249c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800249e:	2a11      	cmp	r2, #17
 80024a0:	d0f7      	beq.n	8002492 <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024a2:	9600      	str	r6, [sp, #0]
 80024a4:	463b      	mov	r3, r7
 80024a6:	2200      	movs	r2, #0
 80024a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024ac:	4620      	mov	r0, r4
 80024ae:	f7ff fda5 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 80024b2:	2800      	cmp	r0, #0
 80024b4:	d14d      	bne.n	8002552 <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024b6:	6923      	ldr	r3, [r4, #16]
 80024b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	d139      	bne.n	8002534 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024c0:	f045 0501 	orr.w	r5, r5, #1
 80024c4:	b2ed      	uxtb	r5, r5
 80024c6:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024c8:	4633      	mov	r3, r6
 80024ca:	463a      	mov	r2, r7
 80024cc:	4979      	ldr	r1, [pc, #484]	; (80026b4 <HAL_I2C_Master_Receive+0x2bc>)
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7ff fd54 	bl	8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d4:	4605      	mov	r5, r0
 80024d6:	2800      	cmp	r0, #0
 80024d8:	d13a      	bne.n	8002550 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 80024da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	2a00      	cmp	r2, #0
 80024e0:	d069      	beq.n	80025b6 <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 80024e2:	2a01      	cmp	r2, #1
 80024e4:	d17a      	bne.n	80025dc <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ec:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024ee:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	9504      	str	r5, [sp, #16]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	9204      	str	r2, [sp, #16]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	9204      	str	r2, [sp, #16]
 80024fc:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002504:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002506:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002508:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80026bc <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 800250c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800250e:	2b00      	cmp	r3, #0
 8002510:	d05b      	beq.n	80025ca <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 8002512:	2b03      	cmp	r3, #3
 8002514:	f200 80d4 	bhi.w	80026c0 <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8002518:	2b01      	cmp	r3, #1
 800251a:	d17b      	bne.n	8002614 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800251c:	4632      	mov	r2, r6
 800251e:	4639      	mov	r1, r7
 8002520:	4620      	mov	r0, r4
 8002522:	f7ff fdbf 	bl	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002526:	2800      	cmp	r0, #0
 8002528:	f000 8093 	beq.w	8002652 <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800252c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800252e:	2b20      	cmp	r3, #32
 8002530:	d116      	bne.n	8002560 <HAL_I2C_Master_Receive+0x168>
 8002532:	e03e      	b.n	80025b2 <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002534:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8002538:	f008 0806 	and.w	r8, r8, #6
 800253c:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8002540:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002542:	495d      	ldr	r1, [pc, #372]	; (80026b8 <HAL_I2C_Master_Receive+0x2c0>)
 8002544:	4633      	mov	r3, r6
 8002546:	463a      	mov	r2, r7
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff fd17 	bl	8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800254e:	b148      	cbz	r0, 8002564 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002550:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002552:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002554:	2b04      	cmp	r3, #4
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	d128      	bne.n	80025ae <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 800255c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8002560:	2501      	movs	r5, #1
 8002562:	e759      	b.n	8002418 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	b2ed      	uxtb	r5, r5
 8002568:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800256a:	463a      	mov	r2, r7
 800256c:	4633      	mov	r3, r6
 800256e:	4951      	ldr	r1, [pc, #324]	; (80026b4 <HAL_I2C_Master_Receive+0x2bc>)
 8002570:	4620      	mov	r0, r4
 8002572:	f7ff fd03 	bl	8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002576:	4602      	mov	r2, r0
 8002578:	2800      	cmp	r0, #0
 800257a:	d1e9      	bne.n	8002550 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	9007      	str	r0, [sp, #28]
 8002580:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002582:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002584:	9107      	str	r1, [sp, #28]
 8002586:	6999      	ldr	r1, [r3, #24]
 8002588:	9107      	str	r1, [sp, #28]
 800258a:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800258c:	6819      	ldr	r1, [r3, #0]
 800258e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002592:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002594:	9600      	str	r6, [sp, #0]
 8002596:	463b      	mov	r3, r7
 8002598:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800259c:	f7ff fd2e 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 80025a0:	2800      	cmp	r0, #0
 80025a2:	d1d6      	bne.n	8002552 <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80025a4:	6822      	ldr	r2, [r4, #0]
 80025a6:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80025aa:	6113      	str	r3, [r2, #16]
 80025ac:	e78c      	b.n	80024c8 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 80025ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 80025b2:	2503      	movs	r5, #3
 80025b4:	e730      	b.n	8002418 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b6:	9503      	str	r5, [sp, #12]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	9203      	str	r2, [sp, #12]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	9203      	str	r2, [sp, #12]
 80025c0:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	2320      	movs	r3, #32
 80025cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80025d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80025da:	e71d      	b.n	8002418 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 80025dc:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80025de:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80025e0:	d10e      	bne.n	8002600 <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80025e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025e8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	9505      	str	r5, [sp, #20]
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	9205      	str	r2, [sp, #20]
 80025f2:	699a      	ldr	r2, [r3, #24]
 80025f4:	9205      	str	r2, [sp, #20]
 80025f6:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fe:	e781      	b.n	8002504 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002600:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002604:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002606:	9506      	str	r5, [sp, #24]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	9206      	str	r2, [sp, #24]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	9306      	str	r3, [sp, #24]
 8002610:	9b06      	ldr	r3, [sp, #24]
 8002612:	e779      	b.n	8002508 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8002614:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002616:	9600      	str	r6, [sp, #0]
 8002618:	463b      	mov	r3, r7
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	4641      	mov	r1, r8
 8002620:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8002622:	d124      	bne.n	800266e <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002624:	f7ff fcea 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 8002628:	2800      	cmp	r0, #0
 800262a:	d1c2      	bne.n	80025b2 <HAL_I2C_Master_Receive+0x1ba>
 800262c:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002636:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002638:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	1c51      	adds	r1, r2, #1
 800263e:	6261      	str	r1, [r4, #36]	; 0x24
 8002640:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8002642:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002644:	3b01      	subs	r3, #1
 8002646:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002648:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800264a:	3b01      	subs	r3, #1
 800264c:	b29b      	uxth	r3, r3
 800264e:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002650:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	6262      	str	r2, [r4, #36]	; 0x24
 8002658:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800265a:	6912      	ldr	r2, [r2, #16]
 800265c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800265e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002664:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002666:	3b01      	subs	r3, #1
 8002668:	b29b      	uxth	r3, r3
 800266a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800266c:	e74e      	b.n	800250c <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800266e:	f7ff fcc5 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 8002672:	4602      	mov	r2, r0
 8002674:	2800      	cmp	r0, #0
 8002676:	d19c      	bne.n	80025b2 <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002678:	6821      	ldr	r1, [r4, #0]
 800267a:	680b      	ldr	r3, [r1, #0]
 800267c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002680:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002682:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002684:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002686:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002688:	1c59      	adds	r1, r3, #1
 800268a:	6261      	str	r1, [r4, #36]	; 0x24
 800268c:	6821      	ldr	r1, [r4, #0]
 800268e:	6909      	ldr	r1, [r1, #16]
 8002690:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8002692:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002694:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8002696:	3b01      	subs	r3, #1
 8002698:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800269a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800269c:	4641      	mov	r1, r8
          hi2c->XferCount--;
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026a4:	463b      	mov	r3, r7
 80026a6:	f7ff fca9 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d0bf      	beq.n	800262e <HAL_I2C_Master_Receive+0x236>
 80026ae:	e780      	b.n	80025b2 <HAL_I2C_Master_Receive+0x1ba>
 80026b0:	00100002 	.word	0x00100002
 80026b4:	00010002 	.word	0x00010002
 80026b8:	00010008 	.word	0x00010008
 80026bc:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80026c0:	4632      	mov	r2, r6
 80026c2:	4639      	mov	r1, r7
 80026c4:	4620      	mov	r0, r4
 80026c6:	f7ff fced 	bl	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026ca:	2800      	cmp	r0, #0
 80026cc:	f47f af2e 	bne.w	800252c <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80026d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	6262      	str	r2, [r4, #36]	; 0x24
 80026d6:	6822      	ldr	r2, [r4, #0]
 80026d8:	6912      	ldr	r2, [r2, #16]
 80026da:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80026dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026de:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 80026e0:	3b01      	subs	r3, #1
 80026e2:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80026e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026ec:	6953      	ldr	r3, [r2, #20]
 80026ee:	075b      	lsls	r3, r3, #29
 80026f0:	f57f af0c 	bpl.w	800250c <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80026f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026f6:	1c59      	adds	r1, r3, #1
 80026f8:	6261      	str	r1, [r4, #36]	; 0x24
 80026fa:	e7ae      	b.n	800265a <HAL_I2C_Master_Receive+0x262>

080026fc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fc:	6803      	ldr	r3, [r0, #0]
{
 80026fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	07db      	lsls	r3, r3, #31
{
 8002704:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002706:	d410      	bmi.n	800272a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	079f      	lsls	r7, r3, #30
 800270c:	d45e      	bmi.n	80027cc <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270e:	682b      	ldr	r3, [r5, #0]
 8002710:	0719      	lsls	r1, r3, #28
 8002712:	f100 8095 	bmi.w	8002840 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002716:	682b      	ldr	r3, [r5, #0]
 8002718:	075a      	lsls	r2, r3, #29
 800271a:	f100 80bf 	bmi.w	800289c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271e:	69ea      	ldr	r2, [r5, #28]
 8002720:	2a00      	cmp	r2, #0
 8002722:	f040 812d 	bne.w	8002980 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002726:	2000      	movs	r0, #0
 8002728:	e014      	b.n	8002754 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800272a:	4c90      	ldr	r4, [pc, #576]	; (800296c <HAL_RCC_OscConfig+0x270>)
 800272c:	6863      	ldr	r3, [r4, #4]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b04      	cmp	r3, #4
 8002734:	d007      	beq.n	8002746 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002736:	6863      	ldr	r3, [r4, #4]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d10c      	bne.n	800275a <HAL_RCC_OscConfig+0x5e>
 8002740:	6863      	ldr	r3, [r4, #4]
 8002742:	03de      	lsls	r6, r3, #15
 8002744:	d509      	bpl.n	800275a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	039c      	lsls	r4, r3, #14
 800274a:	d5dd      	bpl.n	8002708 <HAL_RCC_OscConfig+0xc>
 800274c:	686b      	ldr	r3, [r5, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1da      	bne.n	8002708 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002752:	2001      	movs	r0, #1
}
 8002754:	b002      	add	sp, #8
 8002756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275a:	686b      	ldr	r3, [r5, #4]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d110      	bne.n	8002784 <HAL_RCC_OscConfig+0x88>
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002768:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800276a:	f7ff fa99 	bl	8001ca0 <HAL_GetTick>
 800276e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	0398      	lsls	r0, r3, #14
 8002774:	d4c8      	bmi.n	8002708 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002776:	f7ff fa93 	bl	8001ca0 <HAL_GetTick>
 800277a:	1b80      	subs	r0, r0, r6
 800277c:	2864      	cmp	r0, #100	; 0x64
 800277e:	d9f7      	bls.n	8002770 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002780:	2003      	movs	r0, #3
 8002782:	e7e7      	b.n	8002754 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002784:	b99b      	cbnz	r3, 80027ae <HAL_RCC_OscConfig+0xb2>
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278c:	6023      	str	r3, [r4, #0]
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002794:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002796:	f7ff fa83 	bl	8001ca0 <HAL_GetTick>
 800279a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	0399      	lsls	r1, r3, #14
 80027a0:	d5b2      	bpl.n	8002708 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a2:	f7ff fa7d 	bl	8001ca0 <HAL_GetTick>
 80027a6:	1b80      	subs	r0, r0, r6
 80027a8:	2864      	cmp	r0, #100	; 0x64
 80027aa:	d9f7      	bls.n	800279c <HAL_RCC_OscConfig+0xa0>
 80027ac:	e7e8      	b.n	8002780 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	d103      	bne.n	80027be <HAL_RCC_OscConfig+0xc2>
 80027b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ba:	6023      	str	r3, [r4, #0]
 80027bc:	e7d1      	b.n	8002762 <HAL_RCC_OscConfig+0x66>
 80027be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c2:	6023      	str	r3, [r4, #0]
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ca:	e7cd      	b.n	8002768 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027cc:	4c67      	ldr	r4, [pc, #412]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80027ce:	6863      	ldr	r3, [r4, #4]
 80027d0:	f013 0f0c 	tst.w	r3, #12
 80027d4:	d007      	beq.n	80027e6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027d6:	6863      	ldr	r3, [r4, #4]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d110      	bne.n	8002802 <HAL_RCC_OscConfig+0x106>
 80027e0:	6863      	ldr	r3, [r4, #4]
 80027e2:	03da      	lsls	r2, r3, #15
 80027e4:	d40d      	bmi.n	8002802 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	079b      	lsls	r3, r3, #30
 80027ea:	d502      	bpl.n	80027f2 <HAL_RCC_OscConfig+0xf6>
 80027ec:	692b      	ldr	r3, [r5, #16]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d1af      	bne.n	8002752 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	696a      	ldr	r2, [r5, #20]
 80027f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80027fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80027fe:	6023      	str	r3, [r4, #0]
 8002800:	e785      	b.n	800270e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002802:	692a      	ldr	r2, [r5, #16]
 8002804:	4b5a      	ldr	r3, [pc, #360]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002806:	b16a      	cbz	r2, 8002824 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800280c:	f7ff fa48 	bl	8001ca0 <HAL_GetTick>
 8002810:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	079f      	lsls	r7, r3, #30
 8002816:	d4ec      	bmi.n	80027f2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002818:	f7ff fa42 	bl	8001ca0 <HAL_GetTick>
 800281c:	1b80      	subs	r0, r0, r6
 800281e:	2802      	cmp	r0, #2
 8002820:	d9f7      	bls.n	8002812 <HAL_RCC_OscConfig+0x116>
 8002822:	e7ad      	b.n	8002780 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002824:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002826:	f7ff fa3b 	bl	8001ca0 <HAL_GetTick>
 800282a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	0798      	lsls	r0, r3, #30
 8002830:	f57f af6d 	bpl.w	800270e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002834:	f7ff fa34 	bl	8001ca0 <HAL_GetTick>
 8002838:	1b80      	subs	r0, r0, r6
 800283a:	2802      	cmp	r0, #2
 800283c:	d9f6      	bls.n	800282c <HAL_RCC_OscConfig+0x130>
 800283e:	e79f      	b.n	8002780 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002840:	69aa      	ldr	r2, [r5, #24]
 8002842:	4c4a      	ldr	r4, [pc, #296]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002844:	4b4b      	ldr	r3, [pc, #300]	; (8002974 <HAL_RCC_OscConfig+0x278>)
 8002846:	b1da      	cbz	r2, 8002880 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800284c:	f7ff fa28 	bl	8001ca0 <HAL_GetTick>
 8002850:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002854:	079b      	lsls	r3, r3, #30
 8002856:	d50d      	bpl.n	8002874 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002858:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800285c:	4b46      	ldr	r3, [pc, #280]	; (8002978 <HAL_RCC_OscConfig+0x27c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	fbb3 f3f2 	udiv	r3, r3, r2
 8002864:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002866:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002868:	9b01      	ldr	r3, [sp, #4]
 800286a:	1e5a      	subs	r2, r3, #1
 800286c:	9201      	str	r2, [sp, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f9      	bne.n	8002866 <HAL_RCC_OscConfig+0x16a>
 8002872:	e750      	b.n	8002716 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002874:	f7ff fa14 	bl	8001ca0 <HAL_GetTick>
 8002878:	1b80      	subs	r0, r0, r6
 800287a:	2802      	cmp	r0, #2
 800287c:	d9e9      	bls.n	8002852 <HAL_RCC_OscConfig+0x156>
 800287e:	e77f      	b.n	8002780 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002880:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002882:	f7ff fa0d 	bl	8001ca0 <HAL_GetTick>
 8002886:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800288a:	079f      	lsls	r7, r3, #30
 800288c:	f57f af43 	bpl.w	8002716 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002890:	f7ff fa06 	bl	8001ca0 <HAL_GetTick>
 8002894:	1b80      	subs	r0, r0, r6
 8002896:	2802      	cmp	r0, #2
 8002898:	d9f6      	bls.n	8002888 <HAL_RCC_OscConfig+0x18c>
 800289a:	e771      	b.n	8002780 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289c:	4c33      	ldr	r4, [pc, #204]	; (800296c <HAL_RCC_OscConfig+0x270>)
 800289e:	69e3      	ldr	r3, [r4, #28]
 80028a0:	00d8      	lsls	r0, r3, #3
 80028a2:	d424      	bmi.n	80028ee <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80028a4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	69e3      	ldr	r3, [r4, #28]
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ac:	61e3      	str	r3, [r4, #28]
 80028ae:	69e3      	ldr	r3, [r4, #28]
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	4e30      	ldr	r6, [pc, #192]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80028ba:	6833      	ldr	r3, [r6, #0]
 80028bc:	05d9      	lsls	r1, r3, #23
 80028be:	d518      	bpl.n	80028f2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c0:	68eb      	ldr	r3, [r5, #12]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d126      	bne.n	8002914 <HAL_RCC_OscConfig+0x218>
 80028c6:	6a23      	ldr	r3, [r4, #32]
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80028ce:	f7ff f9e7 	bl	8001ca0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80028d6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d8:	6a23      	ldr	r3, [r4, #32]
 80028da:	079b      	lsls	r3, r3, #30
 80028dc:	d53f      	bpl.n	800295e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80028de:	2f00      	cmp	r7, #0
 80028e0:	f43f af1d 	beq.w	800271e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e4:	69e3      	ldr	r3, [r4, #28]
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ea:	61e3      	str	r3, [r4, #28]
 80028ec:	e717      	b.n	800271e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80028ee:	2700      	movs	r7, #0
 80028f0:	e7e2      	b.n	80028b8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f2:	6833      	ldr	r3, [r6, #0]
 80028f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80028fa:	f7ff f9d1 	bl	8001ca0 <HAL_GetTick>
 80028fe:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002900:	6833      	ldr	r3, [r6, #0]
 8002902:	05da      	lsls	r2, r3, #23
 8002904:	d4dc      	bmi.n	80028c0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002906:	f7ff f9cb 	bl	8001ca0 <HAL_GetTick>
 800290a:	eba0 0008 	sub.w	r0, r0, r8
 800290e:	2864      	cmp	r0, #100	; 0x64
 8002910:	d9f6      	bls.n	8002900 <HAL_RCC_OscConfig+0x204>
 8002912:	e735      	b.n	8002780 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	b9ab      	cbnz	r3, 8002942 <HAL_RCC_OscConfig+0x246>
 8002916:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002918:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	6223      	str	r3, [r4, #32]
 8002922:	6a23      	ldr	r3, [r4, #32]
 8002924:	f023 0304 	bic.w	r3, r3, #4
 8002928:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800292a:	f7ff f9b9 	bl	8001ca0 <HAL_GetTick>
 800292e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002930:	6a23      	ldr	r3, [r4, #32]
 8002932:	0798      	lsls	r0, r3, #30
 8002934:	d5d3      	bpl.n	80028de <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7ff f9b3 	bl	8001ca0 <HAL_GetTick>
 800293a:	1b80      	subs	r0, r0, r6
 800293c:	4540      	cmp	r0, r8
 800293e:	d9f7      	bls.n	8002930 <HAL_RCC_OscConfig+0x234>
 8002940:	e71e      	b.n	8002780 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002942:	2b05      	cmp	r3, #5
 8002944:	6a23      	ldr	r3, [r4, #32]
 8002946:	d103      	bne.n	8002950 <HAL_RCC_OscConfig+0x254>
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	6223      	str	r3, [r4, #32]
 800294e:	e7ba      	b.n	80028c6 <HAL_RCC_OscConfig+0x1ca>
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	6223      	str	r3, [r4, #32]
 8002956:	6a23      	ldr	r3, [r4, #32]
 8002958:	f023 0304 	bic.w	r3, r3, #4
 800295c:	e7b6      	b.n	80028cc <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7ff f99f 	bl	8001ca0 <HAL_GetTick>
 8002962:	eba0 0008 	sub.w	r0, r0, r8
 8002966:	42b0      	cmp	r0, r6
 8002968:	d9b6      	bls.n	80028d8 <HAL_RCC_OscConfig+0x1dc>
 800296a:	e709      	b.n	8002780 <HAL_RCC_OscConfig+0x84>
 800296c:	40021000 	.word	0x40021000
 8002970:	42420000 	.word	0x42420000
 8002974:	42420480 	.word	0x42420480
 8002978:	20000018 	.word	0x20000018
 800297c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002980:	4c22      	ldr	r4, [pc, #136]	; (8002a0c <HAL_RCC_OscConfig+0x310>)
 8002982:	6863      	ldr	r3, [r4, #4]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b08      	cmp	r3, #8
 800298a:	f43f aee2 	beq.w	8002752 <HAL_RCC_OscConfig+0x56>
 800298e:	2300      	movs	r3, #0
 8002990:	4e1f      	ldr	r6, [pc, #124]	; (8002a10 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002992:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002994:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002996:	d12b      	bne.n	80029f0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002998:	f7ff f982 	bl	8001ca0 <HAL_GetTick>
 800299c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	0199      	lsls	r1, r3, #6
 80029a2:	d41f      	bmi.n	80029e4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029a4:	6a2b      	ldr	r3, [r5, #32]
 80029a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029aa:	d105      	bne.n	80029b8 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029ac:	6862      	ldr	r2, [r4, #4]
 80029ae:	68a9      	ldr	r1, [r5, #8]
 80029b0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80029b4:	430a      	orrs	r2, r1
 80029b6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80029ba:	6862      	ldr	r2, [r4, #4]
 80029bc:	430b      	orrs	r3, r1
 80029be:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80029c2:	4313      	orrs	r3, r2
 80029c4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80029c6:	2301      	movs	r3, #1
 80029c8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80029ca:	f7ff f969 	bl	8001ca0 <HAL_GetTick>
 80029ce:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	019a      	lsls	r2, r3, #6
 80029d4:	f53f aea7 	bmi.w	8002726 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7ff f962 	bl	8001ca0 <HAL_GetTick>
 80029dc:	1b40      	subs	r0, r0, r5
 80029de:	2802      	cmp	r0, #2
 80029e0:	d9f6      	bls.n	80029d0 <HAL_RCC_OscConfig+0x2d4>
 80029e2:	e6cd      	b.n	8002780 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e4:	f7ff f95c 	bl	8001ca0 <HAL_GetTick>
 80029e8:	1bc0      	subs	r0, r0, r7
 80029ea:	2802      	cmp	r0, #2
 80029ec:	d9d7      	bls.n	800299e <HAL_RCC_OscConfig+0x2a2>
 80029ee:	e6c7      	b.n	8002780 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80029f0:	f7ff f956 	bl	8001ca0 <HAL_GetTick>
 80029f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	019b      	lsls	r3, r3, #6
 80029fa:	f57f ae94 	bpl.w	8002726 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fe:	f7ff f94f 	bl	8001ca0 <HAL_GetTick>
 8002a02:	1b40      	subs	r0, r0, r5
 8002a04:	2802      	cmp	r0, #2
 8002a06:	d9f6      	bls.n	80029f6 <HAL_RCC_OscConfig+0x2fa>
 8002a08:	e6ba      	b.n	8002780 <HAL_RCC_OscConfig+0x84>
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	42420060 	.word	0x42420060

08002a14 <HAL_RCC_GetSysClockFreq>:
{
 8002a14:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a16:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002a18:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a1a:	ac02      	add	r4, sp, #8
 8002a1c:	f103 0510 	add.w	r5, r3, #16
 8002a20:	4622      	mov	r2, r4
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	6859      	ldr	r1, [r3, #4]
 8002a26:	3308      	adds	r3, #8
 8002a28:	c203      	stmia	r2!, {r0, r1}
 8002a2a:	42ab      	cmp	r3, r5
 8002a2c:	4614      	mov	r4, r2
 8002a2e:	d1f7      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a30:	2301      	movs	r3, #1
 8002a32:	f88d 3004 	strb.w	r3, [sp, #4]
 8002a36:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002a38:	4911      	ldr	r1, [pc, #68]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a3a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002a3e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002a40:	f003 020c 	and.w	r2, r3, #12
 8002a44:	2a08      	cmp	r2, #8
 8002a46:	d117      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a48:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002a4c:	a806      	add	r0, sp, #24
 8002a4e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a50:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a52:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a56:	d50c      	bpl.n	8002a72 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a58:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a5a:	480a      	ldr	r0, [pc, #40]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a5c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a60:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a62:	aa06      	add	r2, sp, #24
 8002a64:	4413      	add	r3, r2
 8002a66:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a6a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002a6e:	b007      	add	sp, #28
 8002a70:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a72:	4805      	ldr	r0, [pc, #20]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x74>)
 8002a74:	4350      	muls	r0, r2
 8002a76:	e7fa      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002a7a:	e7f8      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x5a>
 8002a7c:	08003f60 	.word	0x08003f60
 8002a80:	40021000 	.word	0x40021000
 8002a84:	007a1200 	.word	0x007a1200
 8002a88:	003d0900 	.word	0x003d0900

08002a8c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002a8c:	4a54      	ldr	r2, [pc, #336]	; (8002be0 <HAL_RCC_ClockConfig+0x154>)
{
 8002a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002a92:	6813      	ldr	r3, [r2, #0]
{
 8002a94:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	428b      	cmp	r3, r1
{
 8002a9c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002a9e:	d32a      	bcc.n	8002af6 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa0:	6829      	ldr	r1, [r5, #0]
 8002aa2:	078c      	lsls	r4, r1, #30
 8002aa4:	d434      	bmi.n	8002b10 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa6:	07ca      	lsls	r2, r1, #31
 8002aa8:	d447      	bmi.n	8002b3a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002aaa:	4a4d      	ldr	r2, [pc, #308]	; (8002be0 <HAL_RCC_ClockConfig+0x154>)
 8002aac:	6813      	ldr	r3, [r2, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	429e      	cmp	r6, r3
 8002ab4:	f0c0 8082 	bcc.w	8002bbc <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	682a      	ldr	r2, [r5, #0]
 8002aba:	4c4a      	ldr	r4, [pc, #296]	; (8002be4 <HAL_RCC_ClockConfig+0x158>)
 8002abc:	f012 0f04 	tst.w	r2, #4
 8002ac0:	f040 8087 	bne.w	8002bd2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac4:	0713      	lsls	r3, r2, #28
 8002ac6:	d506      	bpl.n	8002ad6 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ac8:	6863      	ldr	r3, [r4, #4]
 8002aca:	692a      	ldr	r2, [r5, #16]
 8002acc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002ad0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002ad4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ad6:	f7ff ff9d 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 8002ada:	6863      	ldr	r3, [r4, #4]
 8002adc:	4a42      	ldr	r2, [pc, #264]	; (8002be8 <HAL_RCC_ClockConfig+0x15c>)
 8002ade:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
 8002ae4:	40d8      	lsrs	r0, r3
 8002ae6:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_RCC_ClockConfig+0x160>)
 8002ae8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7ff f896 	bl	8001c1c <HAL_InitTick>
  return HAL_OK;
 8002af0:	2000      	movs	r0, #0
}
 8002af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	6813      	ldr	r3, [r2, #0]
 8002af8:	f023 0307 	bic.w	r3, r3, #7
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b00:	6813      	ldr	r3, [r2, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	4299      	cmp	r1, r3
 8002b08:	d0ca      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b10:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b12:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b16:	bf1e      	ittt	ne
 8002b18:	685a      	ldrne	r2, [r3, #4]
 8002b1a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002b1e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b20:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b22:	bf42      	ittt	mi
 8002b24:	685a      	ldrmi	r2, [r3, #4]
 8002b26:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002b2a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	68a8      	ldr	r0, [r5, #8]
 8002b30:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b34:	4302      	orrs	r2, r0
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	e7b5      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3a:	686a      	ldr	r2, [r5, #4]
 8002b3c:	4c29      	ldr	r4, [pc, #164]	; (8002be4 <HAL_RCC_ClockConfig+0x158>)
 8002b3e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b40:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b42:	d11c      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b44:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	d0df      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b4a:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b50:	f023 0303 	bic.w	r3, r3, #3
 8002b54:	4313      	orrs	r3, r2
 8002b56:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002b58:	f7ff f8a2 	bl	8001ca0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002b5e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d114      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b64:	6863      	ldr	r3, [r4, #4]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d09d      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6e:	f7ff f897 	bl	8001ca0 <HAL_GetTick>
 8002b72:	1bc0      	subs	r0, r0, r7
 8002b74:	4540      	cmp	r0, r8
 8002b76:	d9f5      	bls.n	8002b64 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8002b78:	2003      	movs	r0, #3
 8002b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7e:	2a02      	cmp	r2, #2
 8002b80:	d102      	bne.n	8002b88 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b86:	e7df      	b.n	8002b48 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	f013 0f02 	tst.w	r3, #2
 8002b8c:	e7dc      	b.n	8002b48 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d10f      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b92:	6863      	ldr	r3, [r4, #4]
 8002b94:	f003 030c 	and.w	r3, r3, #12
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d086      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9c:	f7ff f880 	bl	8001ca0 <HAL_GetTick>
 8002ba0:	1bc0      	subs	r0, r0, r7
 8002ba2:	4540      	cmp	r0, r8
 8002ba4:	d9f5      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x106>
 8002ba6:	e7e7      	b.n	8002b78 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f7ff f87a 	bl	8001ca0 <HAL_GetTick>
 8002bac:	1bc0      	subs	r0, r0, r7
 8002bae:	4540      	cmp	r0, r8
 8002bb0:	d8e2      	bhi.n	8002b78 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bb2:	6863      	ldr	r3, [r4, #4]
 8002bb4:	f013 0f0c 	tst.w	r3, #12
 8002bb8:	d1f6      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x11c>
 8002bba:	e776      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbc:	6813      	ldr	r3, [r2, #0]
 8002bbe:	f023 0307 	bic.w	r3, r3, #7
 8002bc2:	4333      	orrs	r3, r6
 8002bc4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bc6:	6813      	ldr	r3, [r2, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	429e      	cmp	r6, r3
 8002bce:	d19c      	bne.n	8002b0a <HAL_RCC_ClockConfig+0x7e>
 8002bd0:	e772      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd2:	6863      	ldr	r3, [r4, #4]
 8002bd4:	68e9      	ldr	r1, [r5, #12]
 8002bd6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	6063      	str	r3, [r4, #4]
 8002bde:	e771      	b.n	8002ac4 <HAL_RCC_ClockConfig+0x38>
 8002be0:	40022000 	.word	0x40022000
 8002be4:	40021000 	.word	0x40021000
 8002be8:	08003f70 	.word	0x08003f70
 8002bec:	20000018 	.word	0x20000018

08002bf0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002bf2:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002bfa:	5cd3      	ldrb	r3, [r2, r3]
 8002bfc:	4a03      	ldr	r2, [pc, #12]	; (8002c0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002bfe:	6810      	ldr	r0, [r2, #0]
}    
 8002c00:	40d8      	lsrs	r0, r3
 8002c02:	4770      	bx	lr
 8002c04:	40021000 	.word	0x40021000
 8002c08:	08003f80 	.word	0x08003f80
 8002c0c:	20000018 	.word	0x20000018

08002c10 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002c12:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002c1a:	5cd3      	ldrb	r3, [r2, r3]
 8002c1c:	4a03      	ldr	r2, [pc, #12]	; (8002c2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002c1e:	6810      	ldr	r0, [r2, #0]
} 
 8002c20:	40d8      	lsrs	r0, r3
 8002c22:	4770      	bx	lr
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08003f80 	.word	0x08003f80
 8002c2c:	20000018 	.word	0x20000018

08002c30 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c34:	6805      	ldr	r5, [r0, #0]
 8002c36:	68c2      	ldr	r2, [r0, #12]
 8002c38:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c3a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c40:	4313      	orrs	r3, r2
 8002c42:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c44:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002c46:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002c4c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002c50:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c54:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c5a:	696b      	ldr	r3, [r5, #20]
 8002c5c:	6982      	ldr	r2, [r0, #24]
 8002c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c62:	4313      	orrs	r3, r2
 8002c64:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002c66:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <UART_SetConfig+0x138>)
{
 8002c68:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002c6a:	429d      	cmp	r5, r3
 8002c6c:	f04f 0419 	mov.w	r4, #25
 8002c70:	d146      	bne.n	8002d00 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c72:	f7ff ffcd 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 8002c76:	fb04 f300 	mul.w	r3, r4, r0
 8002c7a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002c7e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002c82:	00b6      	lsls	r6, r6, #2
 8002c84:	fbb3 f3f6 	udiv	r3, r3, r6
 8002c88:	fbb3 f3f8 	udiv	r3, r3, r8
 8002c8c:	011e      	lsls	r6, r3, #4
 8002c8e:	f7ff ffbf 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 8002c92:	4360      	muls	r0, r4
 8002c94:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	fbb0 f7f3 	udiv	r7, r0, r3
 8002c9e:	f7ff ffb7 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 8002ca2:	4360      	muls	r0, r4
 8002ca4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cae:	fbb3 f3f8 	udiv	r3, r3, r8
 8002cb2:	fb08 7313 	mls	r3, r8, r3, r7
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	3332      	adds	r3, #50	; 0x32
 8002cba:	fbb3 f3f8 	udiv	r3, r3, r8
 8002cbe:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002cc2:	f7ff ffa5 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 8002cc6:	4360      	muls	r0, r4
 8002cc8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002ccc:	0092      	lsls	r2, r2, #2
 8002cce:	fbb0 faf2 	udiv	sl, r0, r2
 8002cd2:	f7ff ff9d 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002cd6:	4360      	muls	r0, r4
 8002cd8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce2:	fbb3 f3f8 	udiv	r3, r3, r8
 8002ce6:	fb08 a313 	mls	r3, r8, r3, sl
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	3332      	adds	r3, #50	; 0x32
 8002cee:	fbb3 f3f8 	udiv	r3, r3, r8
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	433b      	orrs	r3, r7
 8002cf8:	4433      	add	r3, r6
 8002cfa:	60ab      	str	r3, [r5, #8]
 8002cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d00:	f7ff ff76 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 8002d04:	fb04 f300 	mul.w	r3, r4, r0
 8002d08:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002d0c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002d10:	00b6      	lsls	r6, r6, #2
 8002d12:	fbb3 f3f6 	udiv	r3, r3, r6
 8002d16:	fbb3 f3f8 	udiv	r3, r3, r8
 8002d1a:	011e      	lsls	r6, r3, #4
 8002d1c:	f7ff ff68 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 8002d20:	4360      	muls	r0, r4
 8002d22:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fbb0 f7f3 	udiv	r7, r0, r3
 8002d2c:	f7ff ff60 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 8002d30:	4360      	muls	r0, r4
 8002d32:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002d40:	fb08 7313 	mls	r3, r8, r3, r7
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	3332      	adds	r3, #50	; 0x32
 8002d48:	fbb3 f3f8 	udiv	r3, r3, r8
 8002d4c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002d50:	f7ff ff4e 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 8002d54:	4360      	muls	r0, r4
 8002d56:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002d5a:	0092      	lsls	r2, r2, #2
 8002d5c:	fbb0 faf2 	udiv	sl, r0, r2
 8002d60:	f7ff ff46 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 8002d64:	e7b7      	b.n	8002cd6 <UART_SetConfig+0xa6>
 8002d66:	bf00      	nop
 8002d68:	40013800 	.word	0x40013800

08002d6c <HAL_UART_Init>:
{
 8002d6c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002d6e:	4604      	mov	r4, r0
 8002d70:	b340      	cbz	r0, 8002dc4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002d72:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002d76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d7a:	b91b      	cbnz	r3, 8002d84 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002d7c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002d80:	f7fe ff10 	bl	8001ba4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d84:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002d86:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d88:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002d8c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d8e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002d90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d94:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d96:	f7ff ff4b 	bl	8002c30 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d9a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dac:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002db4:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002db6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002dba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002dbe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002dc2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002dc4:	2001      	movs	r0, #1
}
 8002dc6:	bd10      	pop	{r4, pc}

08002dc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002dc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002dca:	e003      	b.n	8002dd4 <LoopCopyDataInit>

08002dcc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002dce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002dd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002dd2:	3104      	adds	r1, #4

08002dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002dd4:	480a      	ldr	r0, [pc, #40]	; (8002e00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002dd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002dda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ddc:	d3f6      	bcc.n	8002dcc <CopyDataInit>
  ldr r2, =_sbss
 8002dde:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002de0:	e002      	b.n	8002de8 <LoopFillZerobss>

08002de2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002de4:	f842 3b04 	str.w	r3, [r2], #4

08002de8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002dea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002dec:	d3f9      	bcc.n	8002de2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002dee:	f7fe fe95 	bl	8001b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002df2:	f000 f80f 	bl	8002e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002df6:	f7fe fd7b 	bl	80018f0 <main>
  bx lr
 8002dfa:	4770      	bx	lr
  ldr r3, =_sidata
 8002dfc:	08003fe0 	.word	0x08003fe0
  ldr r0, =_sdata
 8002e00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002e04:	2000008c 	.word	0x2000008c
  ldr r2, =_sbss
 8002e08:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 8002e0c:	20003d60 	.word	0x20003d60

08002e10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e10:	e7fe      	b.n	8002e10 <ADC1_2_IRQHandler>
	...

08002e14 <__libc_init_array>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	2500      	movs	r5, #0
 8002e18:	4e0c      	ldr	r6, [pc, #48]	; (8002e4c <__libc_init_array+0x38>)
 8002e1a:	4c0d      	ldr	r4, [pc, #52]	; (8002e50 <__libc_init_array+0x3c>)
 8002e1c:	1ba4      	subs	r4, r4, r6
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	42a5      	cmp	r5, r4
 8002e22:	d109      	bne.n	8002e38 <__libc_init_array+0x24>
 8002e24:	f001 f890 	bl	8003f48 <_init>
 8002e28:	2500      	movs	r5, #0
 8002e2a:	4e0a      	ldr	r6, [pc, #40]	; (8002e54 <__libc_init_array+0x40>)
 8002e2c:	4c0a      	ldr	r4, [pc, #40]	; (8002e58 <__libc_init_array+0x44>)
 8002e2e:	1ba4      	subs	r4, r4, r6
 8002e30:	10a4      	asrs	r4, r4, #2
 8002e32:	42a5      	cmp	r5, r4
 8002e34:	d105      	bne.n	8002e42 <__libc_init_array+0x2e>
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e3c:	4798      	blx	r3
 8002e3e:	3501      	adds	r5, #1
 8002e40:	e7ee      	b.n	8002e20 <__libc_init_array+0xc>
 8002e42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e46:	4798      	blx	r3
 8002e48:	3501      	adds	r5, #1
 8002e4a:	e7f2      	b.n	8002e32 <__libc_init_array+0x1e>
 8002e4c:	08003fd8 	.word	0x08003fd8
 8002e50:	08003fd8 	.word	0x08003fd8
 8002e54:	08003fd8 	.word	0x08003fd8
 8002e58:	08003fdc 	.word	0x08003fdc

08002e5c <memset>:
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4402      	add	r2, r0
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d100      	bne.n	8002e66 <memset+0xa>
 8002e64:	4770      	bx	lr
 8002e66:	f803 1b01 	strb.w	r1, [r3], #1
 8002e6a:	e7f9      	b.n	8002e60 <memset+0x4>

08002e6c <pow>:
 8002e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e70:	b08f      	sub	sp, #60	; 0x3c
 8002e72:	461d      	mov	r5, r3
 8002e74:	4680      	mov	r8, r0
 8002e76:	4689      	mov	r9, r1
 8002e78:	4614      	mov	r4, r2
 8002e7a:	f000 f9b1 	bl	80031e0 <__ieee754_pow>
 8002e7e:	4fa5      	ldr	r7, [pc, #660]	; (8003114 <pow+0x2a8>)
 8002e80:	e9cd 0100 	strd	r0, r1, [sp]
 8002e84:	f997 3000 	ldrsb.w	r3, [r7]
 8002e88:	463e      	mov	r6, r7
 8002e8a:	9302      	str	r3, [sp, #8]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	d05f      	beq.n	8002f50 <pow+0xe4>
 8002e90:	4622      	mov	r2, r4
 8002e92:	462b      	mov	r3, r5
 8002e94:	4620      	mov	r0, r4
 8002e96:	4629      	mov	r1, r5
 8002e98:	f7fd fdac 	bl	80009f4 <__aeabi_dcmpun>
 8002e9c:	4682      	mov	sl, r0
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	d156      	bne.n	8002f50 <pow+0xe4>
 8002ea2:	4642      	mov	r2, r8
 8002ea4:	464b      	mov	r3, r9
 8002ea6:	4640      	mov	r0, r8
 8002ea8:	4649      	mov	r1, r9
 8002eaa:	f7fd fda3 	bl	80009f4 <__aeabi_dcmpun>
 8002eae:	9003      	str	r0, [sp, #12]
 8002eb0:	b1e8      	cbz	r0, 8002eee <pow+0x82>
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	4629      	mov	r1, r5
 8002eba:	f7fd fd69 	bl	8000990 <__aeabi_dcmpeq>
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d046      	beq.n	8002f50 <pow+0xe4>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	9304      	str	r3, [sp, #16]
 8002ec8:	4b93      	ldr	r3, [pc, #588]	; (8003118 <pow+0x2ac>)
 8002eca:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8002ece:	9305      	str	r3, [sp, #20]
 8002ed0:	4b92      	ldr	r3, [pc, #584]	; (800311c <pow+0x2b0>)
 8002ed2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002ed6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002eda:	9b02      	ldr	r3, [sp, #8]
 8002edc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d031      	beq.n	8002f48 <pow+0xdc>
 8002ee4:	a804      	add	r0, sp, #16
 8002ee6:	f000 ff22 	bl	8003d2e <matherr>
 8002eea:	bb38      	cbnz	r0, 8002f3c <pow+0xd0>
 8002eec:	e058      	b.n	8002fa0 <pow+0x134>
 8002eee:	f04f 0a00 	mov.w	sl, #0
 8002ef2:	f04f 0b00 	mov.w	fp, #0
 8002ef6:	4652      	mov	r2, sl
 8002ef8:	465b      	mov	r3, fp
 8002efa:	4640      	mov	r0, r8
 8002efc:	4649      	mov	r1, r9
 8002efe:	f7fd fd47 	bl	8000990 <__aeabi_dcmpeq>
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d051      	beq.n	8002faa <pow+0x13e>
 8002f06:	4652      	mov	r2, sl
 8002f08:	465b      	mov	r3, fp
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	f7fd fd3f 	bl	8000990 <__aeabi_dcmpeq>
 8002f12:	4606      	mov	r6, r0
 8002f14:	b308      	cbz	r0, 8002f5a <pow+0xee>
 8002f16:	2301      	movs	r3, #1
 8002f18:	9304      	str	r3, [sp, #16]
 8002f1a:	4b7f      	ldr	r3, [pc, #508]	; (8003118 <pow+0x2ac>)
 8002f1c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002f20:	9305      	str	r3, [sp, #20]
 8002f22:	9b03      	ldr	r3, [sp, #12]
 8002f24:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002f28:	930c      	str	r3, [sp, #48]	; 0x30
 8002f2a:	9b02      	ldr	r3, [sp, #8]
 8002f2c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0d7      	beq.n	8002ee4 <pow+0x78>
 8002f34:	2200      	movs	r2, #0
 8002f36:	4b79      	ldr	r3, [pc, #484]	; (800311c <pow+0x2b0>)
 8002f38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002f3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f3e:	b11b      	cbz	r3, 8002f48 <pow+0xdc>
 8002f40:	f000 fffc 	bl	8003f3c <__errno>
 8002f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f46:	6003      	str	r3, [r0, #0]
 8002f48:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8002f4c:	e88d 0018 	stmia.w	sp, {r3, r4}
 8002f50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f54:	b00f      	add	sp, #60	; 0x3c
 8002f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	f000 fee0 	bl	8003d22 <finite>
 8002f62:	2800      	cmp	r0, #0
 8002f64:	d0f4      	beq.n	8002f50 <pow+0xe4>
 8002f66:	4652      	mov	r2, sl
 8002f68:	465b      	mov	r3, fp
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	f7fd fd19 	bl	80009a4 <__aeabi_dcmplt>
 8002f72:	2800      	cmp	r0, #0
 8002f74:	d0ec      	beq.n	8002f50 <pow+0xe4>
 8002f76:	2301      	movs	r3, #1
 8002f78:	9304      	str	r3, [sp, #16]
 8002f7a:	4b67      	ldr	r3, [pc, #412]	; (8003118 <pow+0x2ac>)
 8002f7c:	960c      	str	r6, [sp, #48]	; 0x30
 8002f7e:	9305      	str	r3, [sp, #20]
 8002f80:	f997 3000 	ldrsb.w	r3, [r7]
 8002f84:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002f88:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002f8c:	b913      	cbnz	r3, 8002f94 <pow+0x128>
 8002f8e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002f92:	e7a7      	b.n	8002ee4 <pow+0x78>
 8002f94:	2000      	movs	r0, #0
 8002f96:	4962      	ldr	r1, [pc, #392]	; (8003120 <pow+0x2b4>)
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f9e:	d1a1      	bne.n	8002ee4 <pow+0x78>
 8002fa0:	f000 ffcc 	bl	8003f3c <__errno>
 8002fa4:	2321      	movs	r3, #33	; 0x21
 8002fa6:	6003      	str	r3, [r0, #0]
 8002fa8:	e7c8      	b.n	8002f3c <pow+0xd0>
 8002faa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002fae:	f000 feb8 	bl	8003d22 <finite>
 8002fb2:	9002      	str	r0, [sp, #8]
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d17f      	bne.n	80030b8 <pow+0x24c>
 8002fb8:	4640      	mov	r0, r8
 8002fba:	4649      	mov	r1, r9
 8002fbc:	f000 feb1 	bl	8003d22 <finite>
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d079      	beq.n	80030b8 <pow+0x24c>
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	f000 feab 	bl	8003d22 <finite>
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	d073      	beq.n	80030b8 <pow+0x24c>
 8002fd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	f7fd fd0c 	bl	80009f4 <__aeabi_dcmpun>
 8002fdc:	f997 7000 	ldrsb.w	r7, [r7]
 8002fe0:	4b4d      	ldr	r3, [pc, #308]	; (8003118 <pow+0x2ac>)
 8002fe2:	b1a0      	cbz	r0, 800300e <pow+0x1a2>
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	9305      	str	r3, [sp, #20]
 8002fe8:	9b02      	ldr	r3, [sp, #8]
 8002fea:	9204      	str	r2, [sp, #16]
 8002fec:	930c      	str	r3, [sp, #48]	; 0x30
 8002fee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002ff2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002ff6:	2f00      	cmp	r7, #0
 8002ff8:	d0c9      	beq.n	8002f8e <pow+0x122>
 8002ffa:	4652      	mov	r2, sl
 8002ffc:	465b      	mov	r3, fp
 8002ffe:	4650      	mov	r0, sl
 8003000:	4659      	mov	r1, fp
 8003002:	f7fd fb87 	bl	8000714 <__aeabi_ddiv>
 8003006:	2f02      	cmp	r7, #2
 8003008:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800300c:	e7c7      	b.n	8002f9e <pow+0x132>
 800300e:	2203      	movs	r2, #3
 8003010:	9305      	str	r3, [sp, #20]
 8003012:	9204      	str	r2, [sp, #16]
 8003014:	900c      	str	r0, [sp, #48]	; 0x30
 8003016:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800301a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800301e:	bb57      	cbnz	r7, 8003076 <pow+0x20a>
 8003020:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003024:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <pow+0x2b8>)
 8003026:	4640      	mov	r0, r8
 8003028:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800302c:	4649      	mov	r1, r9
 800302e:	4652      	mov	r2, sl
 8003030:	465b      	mov	r3, fp
 8003032:	f7fd fcb7 	bl	80009a4 <__aeabi_dcmplt>
 8003036:	2800      	cmp	r0, #0
 8003038:	d064      	beq.n	8003104 <pow+0x298>
 800303a:	2200      	movs	r2, #0
 800303c:	4b3a      	ldr	r3, [pc, #232]	; (8003128 <pow+0x2bc>)
 800303e:	4620      	mov	r0, r4
 8003040:	4629      	mov	r1, r5
 8003042:	f7fd fa3d 	bl	80004c0 <__aeabi_dmul>
 8003046:	4604      	mov	r4, r0
 8003048:	460d      	mov	r5, r1
 800304a:	f000 fe79 	bl	8003d40 <rint>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4620      	mov	r0, r4
 8003054:	4629      	mov	r1, r5
 8003056:	f7fd fc9b 	bl	8000990 <__aeabi_dcmpeq>
 800305a:	b920      	cbnz	r0, 8003066 <pow+0x1fa>
 800305c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003060:	4b32      	ldr	r3, [pc, #200]	; (800312c <pow+0x2c0>)
 8003062:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003066:	f996 3000 	ldrsb.w	r3, [r6]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d14a      	bne.n	8003104 <pow+0x298>
 800306e:	f000 ff65 	bl	8003f3c <__errno>
 8003072:	2322      	movs	r3, #34	; 0x22
 8003074:	e797      	b.n	8002fa6 <pow+0x13a>
 8003076:	2200      	movs	r2, #0
 8003078:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <pow+0x2c4>)
 800307a:	4640      	mov	r0, r8
 800307c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003080:	4649      	mov	r1, r9
 8003082:	4652      	mov	r2, sl
 8003084:	465b      	mov	r3, fp
 8003086:	f7fd fc8d 	bl	80009a4 <__aeabi_dcmplt>
 800308a:	2800      	cmp	r0, #0
 800308c:	d0eb      	beq.n	8003066 <pow+0x1fa>
 800308e:	2200      	movs	r2, #0
 8003090:	4b25      	ldr	r3, [pc, #148]	; (8003128 <pow+0x2bc>)
 8003092:	4620      	mov	r0, r4
 8003094:	4629      	mov	r1, r5
 8003096:	f7fd fa13 	bl	80004c0 <__aeabi_dmul>
 800309a:	4604      	mov	r4, r0
 800309c:	460d      	mov	r5, r1
 800309e:	f000 fe4f 	bl	8003d40 <rint>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4620      	mov	r0, r4
 80030a8:	4629      	mov	r1, r5
 80030aa:	f7fd fc71 	bl	8000990 <__aeabi_dcmpeq>
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d1d9      	bne.n	8003066 <pow+0x1fa>
 80030b2:	2200      	movs	r2, #0
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <pow+0x2b4>)
 80030b6:	e7d4      	b.n	8003062 <pow+0x1f6>
 80030b8:	2200      	movs	r2, #0
 80030ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80030be:	2300      	movs	r3, #0
 80030c0:	f7fd fc66 	bl	8000990 <__aeabi_dcmpeq>
 80030c4:	2800      	cmp	r0, #0
 80030c6:	f43f af43 	beq.w	8002f50 <pow+0xe4>
 80030ca:	4640      	mov	r0, r8
 80030cc:	4649      	mov	r1, r9
 80030ce:	f000 fe28 	bl	8003d22 <finite>
 80030d2:	2800      	cmp	r0, #0
 80030d4:	f43f af3c 	beq.w	8002f50 <pow+0xe4>
 80030d8:	4620      	mov	r0, r4
 80030da:	4629      	mov	r1, r5
 80030dc:	f000 fe21 	bl	8003d22 <finite>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	f43f af35 	beq.w	8002f50 <pow+0xe4>
 80030e6:	2304      	movs	r3, #4
 80030e8:	9304      	str	r3, [sp, #16]
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <pow+0x2ac>)
 80030ec:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80030f0:	9305      	str	r3, [sp, #20]
 80030f2:	2300      	movs	r3, #0
 80030f4:	2400      	movs	r4, #0
 80030f6:	930c      	str	r3, [sp, #48]	; 0x30
 80030f8:	2300      	movs	r3, #0
 80030fa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80030fe:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8003102:	e7b0      	b.n	8003066 <pow+0x1fa>
 8003104:	a804      	add	r0, sp, #16
 8003106:	f000 fe12 	bl	8003d2e <matherr>
 800310a:	2800      	cmp	r0, #0
 800310c:	f47f af16 	bne.w	8002f3c <pow+0xd0>
 8003110:	e7ad      	b.n	800306e <pow+0x202>
 8003112:	bf00      	nop
 8003114:	20000088 	.word	0x20000088
 8003118:	08003f88 	.word	0x08003f88
 800311c:	3ff00000 	.word	0x3ff00000
 8003120:	fff00000 	.word	0xfff00000
 8003124:	47efffff 	.word	0x47efffff
 8003128:	3fe00000 	.word	0x3fe00000
 800312c:	c7efffff 	.word	0xc7efffff
 8003130:	7ff00000 	.word	0x7ff00000

08003134 <sqrt>:
 8003134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003138:	b08b      	sub	sp, #44	; 0x2c
 800313a:	4604      	mov	r4, r0
 800313c:	460d      	mov	r5, r1
 800313e:	f000 fd41 	bl	8003bc4 <__ieee754_sqrt>
 8003142:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <sqrt+0xa0>)
 8003144:	4680      	mov	r8, r0
 8003146:	f993 a000 	ldrsb.w	sl, [r3]
 800314a:	4689      	mov	r9, r1
 800314c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003150:	d02b      	beq.n	80031aa <sqrt+0x76>
 8003152:	4622      	mov	r2, r4
 8003154:	462b      	mov	r3, r5
 8003156:	4620      	mov	r0, r4
 8003158:	4629      	mov	r1, r5
 800315a:	f7fd fc4b 	bl	80009f4 <__aeabi_dcmpun>
 800315e:	4683      	mov	fp, r0
 8003160:	bb18      	cbnz	r0, 80031aa <sqrt+0x76>
 8003162:	2600      	movs	r6, #0
 8003164:	2700      	movs	r7, #0
 8003166:	4632      	mov	r2, r6
 8003168:	463b      	mov	r3, r7
 800316a:	4620      	mov	r0, r4
 800316c:	4629      	mov	r1, r5
 800316e:	f7fd fc19 	bl	80009a4 <__aeabi_dcmplt>
 8003172:	b1d0      	cbz	r0, 80031aa <sqrt+0x76>
 8003174:	2301      	movs	r3, #1
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <sqrt+0xa4>)
 800317a:	f8cd b020 	str.w	fp, [sp, #32]
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003184:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003188:	f1ba 0f00 	cmp.w	sl, #0
 800318c:	d112      	bne.n	80031b4 <sqrt+0x80>
 800318e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003192:	4668      	mov	r0, sp
 8003194:	f000 fdcb 	bl	8003d2e <matherr>
 8003198:	b1b8      	cbz	r0, 80031ca <sqrt+0x96>
 800319a:	9b08      	ldr	r3, [sp, #32]
 800319c:	b11b      	cbz	r3, 80031a6 <sqrt+0x72>
 800319e:	f000 fecd 	bl	8003f3c <__errno>
 80031a2:	9b08      	ldr	r3, [sp, #32]
 80031a4:	6003      	str	r3, [r0, #0]
 80031a6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80031aa:	4640      	mov	r0, r8
 80031ac:	4649      	mov	r1, r9
 80031ae:	b00b      	add	sp, #44	; 0x2c
 80031b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031b4:	4632      	mov	r2, r6
 80031b6:	463b      	mov	r3, r7
 80031b8:	4630      	mov	r0, r6
 80031ba:	4639      	mov	r1, r7
 80031bc:	f7fd faaa 	bl	8000714 <__aeabi_ddiv>
 80031c0:	f1ba 0f02 	cmp.w	sl, #2
 80031c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80031c8:	d1e3      	bne.n	8003192 <sqrt+0x5e>
 80031ca:	f000 feb7 	bl	8003f3c <__errno>
 80031ce:	2321      	movs	r3, #33	; 0x21
 80031d0:	6003      	str	r3, [r0, #0]
 80031d2:	e7e2      	b.n	800319a <sqrt+0x66>
 80031d4:	20000088 	.word	0x20000088
 80031d8:	08003f8c 	.word	0x08003f8c
 80031dc:	00000000 	.word	0x00000000

080031e0 <__ieee754_pow>:
 80031e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e4:	b093      	sub	sp, #76	; 0x4c
 80031e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80031ea:	9e03      	ldr	r6, [sp, #12]
 80031ec:	9a02      	ldr	r2, [sp, #8]
 80031ee:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80031f2:	ea55 0302 	orrs.w	r3, r5, r2
 80031f6:	4607      	mov	r7, r0
 80031f8:	4688      	mov	r8, r1
 80031fa:	4682      	mov	sl, r0
 80031fc:	4689      	mov	r9, r1
 80031fe:	f000 849e 	beq.w	8003b3e <__ieee754_pow+0x95e>
 8003202:	4b77      	ldr	r3, [pc, #476]	; (80033e0 <__ieee754_pow+0x200>)
 8003204:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8003208:	429c      	cmp	r4, r3
 800320a:	dc09      	bgt.n	8003220 <__ieee754_pow+0x40>
 800320c:	d103      	bne.n	8003216 <__ieee754_pow+0x36>
 800320e:	b938      	cbnz	r0, 8003220 <__ieee754_pow+0x40>
 8003210:	42a5      	cmp	r5, r4
 8003212:	dc0d      	bgt.n	8003230 <__ieee754_pow+0x50>
 8003214:	e001      	b.n	800321a <__ieee754_pow+0x3a>
 8003216:	429d      	cmp	r5, r3
 8003218:	dc02      	bgt.n	8003220 <__ieee754_pow+0x40>
 800321a:	429d      	cmp	r5, r3
 800321c:	d10e      	bne.n	800323c <__ieee754_pow+0x5c>
 800321e:	b16a      	cbz	r2, 800323c <__ieee754_pow+0x5c>
 8003220:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003224:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003228:	ea54 030a 	orrs.w	r3, r4, sl
 800322c:	f000 8487 	beq.w	8003b3e <__ieee754_pow+0x95e>
 8003230:	486c      	ldr	r0, [pc, #432]	; (80033e4 <__ieee754_pow+0x204>)
 8003232:	b013      	add	sp, #76	; 0x4c
 8003234:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003238:	f000 bd7c 	b.w	8003d34 <nan>
 800323c:	f1b9 0f00 	cmp.w	r9, #0
 8003240:	da4f      	bge.n	80032e2 <__ieee754_pow+0x102>
 8003242:	4b69      	ldr	r3, [pc, #420]	; (80033e8 <__ieee754_pow+0x208>)
 8003244:	429d      	cmp	r5, r3
 8003246:	dc4a      	bgt.n	80032de <__ieee754_pow+0xfe>
 8003248:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800324c:	429d      	cmp	r5, r3
 800324e:	dd48      	ble.n	80032e2 <__ieee754_pow+0x102>
 8003250:	152b      	asrs	r3, r5, #20
 8003252:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003256:	2b14      	cmp	r3, #20
 8003258:	dd24      	ble.n	80032a4 <__ieee754_pow+0xc4>
 800325a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800325e:	fa22 f103 	lsr.w	r1, r2, r3
 8003262:	fa01 f303 	lsl.w	r3, r1, r3
 8003266:	429a      	cmp	r2, r3
 8003268:	d13b      	bne.n	80032e2 <__ieee754_pow+0x102>
 800326a:	f001 0101 	and.w	r1, r1, #1
 800326e:	f1c1 0302 	rsb	r3, r1, #2
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2a00      	cmp	r2, #0
 8003276:	d156      	bne.n	8003326 <__ieee754_pow+0x146>
 8003278:	4b59      	ldr	r3, [pc, #356]	; (80033e0 <__ieee754_pow+0x200>)
 800327a:	429d      	cmp	r5, r3
 800327c:	d122      	bne.n	80032c4 <__ieee754_pow+0xe4>
 800327e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003282:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003286:	ea53 030a 	orrs.w	r3, r3, sl
 800328a:	f000 8458 	beq.w	8003b3e <__ieee754_pow+0x95e>
 800328e:	4b57      	ldr	r3, [pc, #348]	; (80033ec <__ieee754_pow+0x20c>)
 8003290:	429c      	cmp	r4, r3
 8003292:	dd28      	ble.n	80032e6 <__ieee754_pow+0x106>
 8003294:	2e00      	cmp	r6, #0
 8003296:	f280 8456 	bge.w	8003b46 <__ieee754_pow+0x966>
 800329a:	2000      	movs	r0, #0
 800329c:	2100      	movs	r1, #0
 800329e:	b013      	add	sp, #76	; 0x4c
 80032a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032a4:	2a00      	cmp	r2, #0
 80032a6:	d13c      	bne.n	8003322 <__ieee754_pow+0x142>
 80032a8:	f1c3 0314 	rsb	r3, r3, #20
 80032ac:	fa45 f103 	asr.w	r1, r5, r3
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	429d      	cmp	r5, r3
 80032b6:	f040 844e 	bne.w	8003b56 <__ieee754_pow+0x976>
 80032ba:	f001 0101 	and.w	r1, r1, #1
 80032be:	f1c1 0302 	rsb	r3, r1, #2
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <__ieee754_pow+0x210>)
 80032c6:	429d      	cmp	r5, r3
 80032c8:	d114      	bne.n	80032f4 <__ieee754_pow+0x114>
 80032ca:	2e00      	cmp	r6, #0
 80032cc:	f280 843f 	bge.w	8003b4e <__ieee754_pow+0x96e>
 80032d0:	463a      	mov	r2, r7
 80032d2:	4643      	mov	r3, r8
 80032d4:	2000      	movs	r0, #0
 80032d6:	4946      	ldr	r1, [pc, #280]	; (80033f0 <__ieee754_pow+0x210>)
 80032d8:	f7fd fa1c 	bl	8000714 <__aeabi_ddiv>
 80032dc:	e7df      	b.n	800329e <__ieee754_pow+0xbe>
 80032de:	2302      	movs	r3, #2
 80032e0:	e7c7      	b.n	8003272 <__ieee754_pow+0x92>
 80032e2:	2300      	movs	r3, #0
 80032e4:	e7c5      	b.n	8003272 <__ieee754_pow+0x92>
 80032e6:	2e00      	cmp	r6, #0
 80032e8:	dad7      	bge.n	800329a <__ieee754_pow+0xba>
 80032ea:	9b03      	ldr	r3, [sp, #12]
 80032ec:	9802      	ldr	r0, [sp, #8]
 80032ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80032f2:	e7d4      	b.n	800329e <__ieee754_pow+0xbe>
 80032f4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80032f8:	d106      	bne.n	8003308 <__ieee754_pow+0x128>
 80032fa:	463a      	mov	r2, r7
 80032fc:	4643      	mov	r3, r8
 80032fe:	4638      	mov	r0, r7
 8003300:	4641      	mov	r1, r8
 8003302:	f7fd f8dd 	bl	80004c0 <__aeabi_dmul>
 8003306:	e7ca      	b.n	800329e <__ieee754_pow+0xbe>
 8003308:	4b3a      	ldr	r3, [pc, #232]	; (80033f4 <__ieee754_pow+0x214>)
 800330a:	429e      	cmp	r6, r3
 800330c:	d10b      	bne.n	8003326 <__ieee754_pow+0x146>
 800330e:	f1b9 0f00 	cmp.w	r9, #0
 8003312:	db08      	blt.n	8003326 <__ieee754_pow+0x146>
 8003314:	4638      	mov	r0, r7
 8003316:	4641      	mov	r1, r8
 8003318:	b013      	add	sp, #76	; 0x4c
 800331a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331e:	f000 bc51 	b.w	8003bc4 <__ieee754_sqrt>
 8003322:	2300      	movs	r3, #0
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	4638      	mov	r0, r7
 8003328:	4641      	mov	r1, r8
 800332a:	f000 fcf7 	bl	8003d1c <fabs>
 800332e:	f1ba 0f00 	cmp.w	sl, #0
 8003332:	d125      	bne.n	8003380 <__ieee754_pow+0x1a0>
 8003334:	b124      	cbz	r4, 8003340 <__ieee754_pow+0x160>
 8003336:	4b2e      	ldr	r3, [pc, #184]	; (80033f0 <__ieee754_pow+0x210>)
 8003338:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800333c:	429a      	cmp	r2, r3
 800333e:	d11f      	bne.n	8003380 <__ieee754_pow+0x1a0>
 8003340:	2e00      	cmp	r6, #0
 8003342:	da05      	bge.n	8003350 <__ieee754_pow+0x170>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	2000      	movs	r0, #0
 800334a:	4929      	ldr	r1, [pc, #164]	; (80033f0 <__ieee754_pow+0x210>)
 800334c:	f7fd f9e2 	bl	8000714 <__aeabi_ddiv>
 8003350:	f1b9 0f00 	cmp.w	r9, #0
 8003354:	daa3      	bge.n	800329e <__ieee754_pow+0xbe>
 8003356:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800335a:	9b00      	ldr	r3, [sp, #0]
 800335c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003360:	4323      	orrs	r3, r4
 8003362:	d106      	bne.n	8003372 <__ieee754_pow+0x192>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	f7fc fef6 	bl	8000158 <__aeabi_dsub>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	e7b2      	b.n	80032d8 <__ieee754_pow+0xf8>
 8003372:	9b00      	ldr	r3, [sp, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d192      	bne.n	800329e <__ieee754_pow+0xbe>
 8003378:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800337c:	4619      	mov	r1, r3
 800337e:	e78e      	b.n	800329e <__ieee754_pow+0xbe>
 8003380:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8003384:	f109 33ff 	add.w	r3, r9, #4294967295
 8003388:	930c      	str	r3, [sp, #48]	; 0x30
 800338a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800338c:	9b00      	ldr	r3, [sp, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	d104      	bne.n	800339c <__ieee754_pow+0x1bc>
 8003392:	463a      	mov	r2, r7
 8003394:	4643      	mov	r3, r8
 8003396:	4638      	mov	r0, r7
 8003398:	4641      	mov	r1, r8
 800339a:	e7e5      	b.n	8003368 <__ieee754_pow+0x188>
 800339c:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <__ieee754_pow+0x218>)
 800339e:	429d      	cmp	r5, r3
 80033a0:	f340 80fc 	ble.w	800359c <__ieee754_pow+0x3bc>
 80033a4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80033a8:	429d      	cmp	r5, r3
 80033aa:	dd0b      	ble.n	80033c4 <__ieee754_pow+0x1e4>
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <__ieee754_pow+0x20c>)
 80033ae:	429c      	cmp	r4, r3
 80033b0:	dc0e      	bgt.n	80033d0 <__ieee754_pow+0x1f0>
 80033b2:	2e00      	cmp	r6, #0
 80033b4:	f6bf af71 	bge.w	800329a <__ieee754_pow+0xba>
 80033b8:	a307      	add	r3, pc, #28	; (adr r3, 80033d8 <__ieee754_pow+0x1f8>)
 80033ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	e79e      	b.n	8003302 <__ieee754_pow+0x122>
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <__ieee754_pow+0x21c>)
 80033c6:	429c      	cmp	r4, r3
 80033c8:	ddf3      	ble.n	80033b2 <__ieee754_pow+0x1d2>
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <__ieee754_pow+0x210>)
 80033cc:	429c      	cmp	r4, r3
 80033ce:	dd17      	ble.n	8003400 <__ieee754_pow+0x220>
 80033d0:	2e00      	cmp	r6, #0
 80033d2:	dcf1      	bgt.n	80033b8 <__ieee754_pow+0x1d8>
 80033d4:	e761      	b.n	800329a <__ieee754_pow+0xba>
 80033d6:	bf00      	nop
 80033d8:	8800759c 	.word	0x8800759c
 80033dc:	7e37e43c 	.word	0x7e37e43c
 80033e0:	7ff00000 	.word	0x7ff00000
 80033e4:	08003f90 	.word	0x08003f90
 80033e8:	433fffff 	.word	0x433fffff
 80033ec:	3fefffff 	.word	0x3fefffff
 80033f0:	3ff00000 	.word	0x3ff00000
 80033f4:	3fe00000 	.word	0x3fe00000
 80033f8:	41e00000 	.word	0x41e00000
 80033fc:	3feffffe 	.word	0x3feffffe
 8003400:	2200      	movs	r2, #0
 8003402:	4b61      	ldr	r3, [pc, #388]	; (8003588 <__ieee754_pow+0x3a8>)
 8003404:	f7fc fea8 	bl	8000158 <__aeabi_dsub>
 8003408:	a355      	add	r3, pc, #340	; (adr r3, 8003560 <__ieee754_pow+0x380>)
 800340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340e:	4604      	mov	r4, r0
 8003410:	460d      	mov	r5, r1
 8003412:	f7fd f855 	bl	80004c0 <__aeabi_dmul>
 8003416:	a354      	add	r3, pc, #336	; (adr r3, 8003568 <__ieee754_pow+0x388>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	4606      	mov	r6, r0
 800341e:	460f      	mov	r7, r1
 8003420:	4620      	mov	r0, r4
 8003422:	4629      	mov	r1, r5
 8003424:	f7fd f84c 	bl	80004c0 <__aeabi_dmul>
 8003428:	2200      	movs	r2, #0
 800342a:	4682      	mov	sl, r0
 800342c:	468b      	mov	fp, r1
 800342e:	4b57      	ldr	r3, [pc, #348]	; (800358c <__ieee754_pow+0x3ac>)
 8003430:	4620      	mov	r0, r4
 8003432:	4629      	mov	r1, r5
 8003434:	f7fd f844 	bl	80004c0 <__aeabi_dmul>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	a14c      	add	r1, pc, #304	; (adr r1, 8003570 <__ieee754_pow+0x390>)
 800343e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003442:	f7fc fe89 	bl	8000158 <__aeabi_dsub>
 8003446:	4622      	mov	r2, r4
 8003448:	462b      	mov	r3, r5
 800344a:	f7fd f839 	bl	80004c0 <__aeabi_dmul>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	2000      	movs	r0, #0
 8003454:	494e      	ldr	r1, [pc, #312]	; (8003590 <__ieee754_pow+0x3b0>)
 8003456:	f7fc fe7f 	bl	8000158 <__aeabi_dsub>
 800345a:	4622      	mov	r2, r4
 800345c:	462b      	mov	r3, r5
 800345e:	4680      	mov	r8, r0
 8003460:	4689      	mov	r9, r1
 8003462:	4620      	mov	r0, r4
 8003464:	4629      	mov	r1, r5
 8003466:	f7fd f82b 	bl	80004c0 <__aeabi_dmul>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4640      	mov	r0, r8
 8003470:	4649      	mov	r1, r9
 8003472:	f7fd f825 	bl	80004c0 <__aeabi_dmul>
 8003476:	a340      	add	r3, pc, #256	; (adr r3, 8003578 <__ieee754_pow+0x398>)
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	f7fd f820 	bl	80004c0 <__aeabi_dmul>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4650      	mov	r0, sl
 8003486:	4659      	mov	r1, fp
 8003488:	f7fc fe66 	bl	8000158 <__aeabi_dsub>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4604      	mov	r4, r0
 8003492:	460d      	mov	r5, r1
 8003494:	4630      	mov	r0, r6
 8003496:	4639      	mov	r1, r7
 8003498:	f7fc fe60 	bl	800015c <__adddf3>
 800349c:	2000      	movs	r0, #0
 800349e:	468b      	mov	fp, r1
 80034a0:	4682      	mov	sl, r0
 80034a2:	4632      	mov	r2, r6
 80034a4:	463b      	mov	r3, r7
 80034a6:	f7fc fe57 	bl	8000158 <__aeabi_dsub>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4620      	mov	r0, r4
 80034b0:	4629      	mov	r1, r5
 80034b2:	f7fc fe51 	bl	8000158 <__aeabi_dsub>
 80034b6:	9b00      	ldr	r3, [sp, #0]
 80034b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80034ba:	3b01      	subs	r3, #1
 80034bc:	4313      	orrs	r3, r2
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	4c33      	ldreq	r4, [pc, #204]	; (8003594 <__ieee754_pow+0x3b4>)
 80034c6:	4c30      	ldrne	r4, [pc, #192]	; (8003588 <__ieee754_pow+0x3a8>)
 80034c8:	4606      	mov	r6, r0
 80034ca:	e88d 0018 	stmia.w	sp, {r3, r4}
 80034ce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80034d2:	2400      	movs	r4, #0
 80034d4:	460f      	mov	r7, r1
 80034d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034da:	4622      	mov	r2, r4
 80034dc:	462b      	mov	r3, r5
 80034de:	f7fc fe3b 	bl	8000158 <__aeabi_dsub>
 80034e2:	4652      	mov	r2, sl
 80034e4:	465b      	mov	r3, fp
 80034e6:	f7fc ffeb 	bl	80004c0 <__aeabi_dmul>
 80034ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80034ee:	4680      	mov	r8, r0
 80034f0:	4689      	mov	r9, r1
 80034f2:	4630      	mov	r0, r6
 80034f4:	4639      	mov	r1, r7
 80034f6:	f7fc ffe3 	bl	80004c0 <__aeabi_dmul>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4640      	mov	r0, r8
 8003500:	4649      	mov	r1, r9
 8003502:	f7fc fe2b 	bl	800015c <__adddf3>
 8003506:	4622      	mov	r2, r4
 8003508:	462b      	mov	r3, r5
 800350a:	4680      	mov	r8, r0
 800350c:	4689      	mov	r9, r1
 800350e:	4650      	mov	r0, sl
 8003510:	4659      	mov	r1, fp
 8003512:	f7fc ffd5 	bl	80004c0 <__aeabi_dmul>
 8003516:	4604      	mov	r4, r0
 8003518:	460d      	mov	r5, r1
 800351a:	460b      	mov	r3, r1
 800351c:	4602      	mov	r2, r0
 800351e:	4649      	mov	r1, r9
 8003520:	4640      	mov	r0, r8
 8003522:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003526:	f7fc fe19 	bl	800015c <__adddf3>
 800352a:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <__ieee754_pow+0x3b8>)
 800352c:	4682      	mov	sl, r0
 800352e:	4299      	cmp	r1, r3
 8003530:	460f      	mov	r7, r1
 8003532:	460e      	mov	r6, r1
 8003534:	f340 82da 	ble.w	8003aec <__ieee754_pow+0x90c>
 8003538:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800353c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003540:	4303      	orrs	r3, r0
 8003542:	f000 81d5 	beq.w	80038f0 <__ieee754_pow+0x710>
 8003546:	a30e      	add	r3, pc, #56	; (adr r3, 8003580 <__ieee754_pow+0x3a0>)
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003550:	f7fc ffb6 	bl	80004c0 <__aeabi_dmul>
 8003554:	a30a      	add	r3, pc, #40	; (adr r3, 8003580 <__ieee754_pow+0x3a0>)
 8003556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355a:	e6d2      	b.n	8003302 <__ieee754_pow+0x122>
 800355c:	f3af 8000 	nop.w
 8003560:	60000000 	.word	0x60000000
 8003564:	3ff71547 	.word	0x3ff71547
 8003568:	f85ddf44 	.word	0xf85ddf44
 800356c:	3e54ae0b 	.word	0x3e54ae0b
 8003570:	55555555 	.word	0x55555555
 8003574:	3fd55555 	.word	0x3fd55555
 8003578:	652b82fe 	.word	0x652b82fe
 800357c:	3ff71547 	.word	0x3ff71547
 8003580:	8800759c 	.word	0x8800759c
 8003584:	7e37e43c 	.word	0x7e37e43c
 8003588:	3ff00000 	.word	0x3ff00000
 800358c:	3fd00000 	.word	0x3fd00000
 8003590:	3fe00000 	.word	0x3fe00000
 8003594:	bff00000 	.word	0xbff00000
 8003598:	408fffff 	.word	0x408fffff
 800359c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	da05      	bge.n	80035b2 <__ieee754_pow+0x3d2>
 80035a6:	4bca      	ldr	r3, [pc, #808]	; (80038d0 <__ieee754_pow+0x6f0>)
 80035a8:	f7fc ff8a 	bl	80004c0 <__aeabi_dmul>
 80035ac:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80035b0:	460c      	mov	r4, r1
 80035b2:	1523      	asrs	r3, r4, #20
 80035b4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80035b8:	4413      	add	r3, r2
 80035ba:	9307      	str	r3, [sp, #28]
 80035bc:	4bc5      	ldr	r3, [pc, #788]	; (80038d4 <__ieee754_pow+0x6f4>)
 80035be:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80035c2:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80035c6:	429c      	cmp	r4, r3
 80035c8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80035cc:	dd08      	ble.n	80035e0 <__ieee754_pow+0x400>
 80035ce:	4bc2      	ldr	r3, [pc, #776]	; (80038d8 <__ieee754_pow+0x6f8>)
 80035d0:	429c      	cmp	r4, r3
 80035d2:	f340 8154 	ble.w	800387e <__ieee754_pow+0x69e>
 80035d6:	9b07      	ldr	r3, [sp, #28]
 80035d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80035dc:	3301      	adds	r3, #1
 80035de:	9307      	str	r3, [sp, #28]
 80035e0:	2600      	movs	r6, #0
 80035e2:	4629      	mov	r1, r5
 80035e4:	00f3      	lsls	r3, r6, #3
 80035e6:	930d      	str	r3, [sp, #52]	; 0x34
 80035e8:	4bbc      	ldr	r3, [pc, #752]	; (80038dc <__ieee754_pow+0x6fc>)
 80035ea:	00f2      	lsls	r2, r6, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	cb18      	ldmia	r3, {r3, r4}
 80035f0:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80035f4:	461a      	mov	r2, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80035fc:	f7fc fdac 	bl	8000158 <__aeabi_dsub>
 8003600:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003604:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003608:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800360c:	f7fc fda6 	bl	800015c <__adddf3>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	2000      	movs	r0, #0
 8003616:	49b2      	ldr	r1, [pc, #712]	; (80038e0 <__ieee754_pow+0x700>)
 8003618:	f7fd f87c 	bl	8000714 <__aeabi_ddiv>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003624:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003628:	f7fc ff4a 	bl	80004c0 <__aeabi_dmul>
 800362c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003630:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003634:	f04f 0a00 	mov.w	sl, #0
 8003638:	2200      	movs	r2, #0
 800363a:	106d      	asrs	r5, r5, #1
 800363c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003640:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003644:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003648:	4659      	mov	r1, fp
 800364a:	4650      	mov	r0, sl
 800364c:	4614      	mov	r4, r2
 800364e:	461d      	mov	r5, r3
 8003650:	f7fc ff36 	bl	80004c0 <__aeabi_dmul>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800365c:	f7fc fd7c 	bl	8000158 <__aeabi_dsub>
 8003660:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003664:	4606      	mov	r6, r0
 8003666:	460f      	mov	r7, r1
 8003668:	4620      	mov	r0, r4
 800366a:	4629      	mov	r1, r5
 800366c:	f7fc fd74 	bl	8000158 <__aeabi_dsub>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003678:	f7fc fd6e 	bl	8000158 <__aeabi_dsub>
 800367c:	465b      	mov	r3, fp
 800367e:	4652      	mov	r2, sl
 8003680:	f7fc ff1e 	bl	80004c0 <__aeabi_dmul>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4630      	mov	r0, r6
 800368a:	4639      	mov	r1, r7
 800368c:	f7fc fd64 	bl	8000158 <__aeabi_dsub>
 8003690:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003694:	f7fc ff14 	bl	80004c0 <__aeabi_dmul>
 8003698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800369c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	f7fc ff0c 	bl	80004c0 <__aeabi_dmul>
 80036a8:	a377      	add	r3, pc, #476	; (adr r3, 8003888 <__ieee754_pow+0x6a8>)
 80036aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ae:	4604      	mov	r4, r0
 80036b0:	460d      	mov	r5, r1
 80036b2:	f7fc ff05 	bl	80004c0 <__aeabi_dmul>
 80036b6:	a376      	add	r3, pc, #472	; (adr r3, 8003890 <__ieee754_pow+0x6b0>)
 80036b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036bc:	f7fc fd4e 	bl	800015c <__adddf3>
 80036c0:	4622      	mov	r2, r4
 80036c2:	462b      	mov	r3, r5
 80036c4:	f7fc fefc 	bl	80004c0 <__aeabi_dmul>
 80036c8:	a373      	add	r3, pc, #460	; (adr r3, 8003898 <__ieee754_pow+0x6b8>)
 80036ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ce:	f7fc fd45 	bl	800015c <__adddf3>
 80036d2:	4622      	mov	r2, r4
 80036d4:	462b      	mov	r3, r5
 80036d6:	f7fc fef3 	bl	80004c0 <__aeabi_dmul>
 80036da:	a371      	add	r3, pc, #452	; (adr r3, 80038a0 <__ieee754_pow+0x6c0>)
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f7fc fd3c 	bl	800015c <__adddf3>
 80036e4:	4622      	mov	r2, r4
 80036e6:	462b      	mov	r3, r5
 80036e8:	f7fc feea 	bl	80004c0 <__aeabi_dmul>
 80036ec:	a36e      	add	r3, pc, #440	; (adr r3, 80038a8 <__ieee754_pow+0x6c8>)
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f7fc fd33 	bl	800015c <__adddf3>
 80036f6:	4622      	mov	r2, r4
 80036f8:	462b      	mov	r3, r5
 80036fa:	f7fc fee1 	bl	80004c0 <__aeabi_dmul>
 80036fe:	a36c      	add	r3, pc, #432	; (adr r3, 80038b0 <__ieee754_pow+0x6d0>)
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f7fc fd2a 	bl	800015c <__adddf3>
 8003708:	4622      	mov	r2, r4
 800370a:	4606      	mov	r6, r0
 800370c:	460f      	mov	r7, r1
 800370e:	462b      	mov	r3, r5
 8003710:	4620      	mov	r0, r4
 8003712:	4629      	mov	r1, r5
 8003714:	f7fc fed4 	bl	80004c0 <__aeabi_dmul>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4630      	mov	r0, r6
 800371e:	4639      	mov	r1, r7
 8003720:	f7fc fece 	bl	80004c0 <__aeabi_dmul>
 8003724:	4604      	mov	r4, r0
 8003726:	460d      	mov	r5, r1
 8003728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800372c:	465b      	mov	r3, fp
 800372e:	4652      	mov	r2, sl
 8003730:	f7fc fd14 	bl	800015c <__adddf3>
 8003734:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003738:	f7fc fec2 	bl	80004c0 <__aeabi_dmul>
 800373c:	4622      	mov	r2, r4
 800373e:	462b      	mov	r3, r5
 8003740:	f7fc fd0c 	bl	800015c <__adddf3>
 8003744:	465b      	mov	r3, fp
 8003746:	4606      	mov	r6, r0
 8003748:	460f      	mov	r7, r1
 800374a:	4652      	mov	r2, sl
 800374c:	4659      	mov	r1, fp
 800374e:	4650      	mov	r0, sl
 8003750:	f7fc feb6 	bl	80004c0 <__aeabi_dmul>
 8003754:	2200      	movs	r2, #0
 8003756:	4b63      	ldr	r3, [pc, #396]	; (80038e4 <__ieee754_pow+0x704>)
 8003758:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800375c:	f7fc fcfe 	bl	800015c <__adddf3>
 8003760:	4632      	mov	r2, r6
 8003762:	463b      	mov	r3, r7
 8003764:	f7fc fcfa 	bl	800015c <__adddf3>
 8003768:	4650      	mov	r0, sl
 800376a:	460d      	mov	r5, r1
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4650      	mov	r0, sl
 8003772:	4659      	mov	r1, fp
 8003774:	f7fc fea4 	bl	80004c0 <__aeabi_dmul>
 8003778:	2200      	movs	r2, #0
 800377a:	4680      	mov	r8, r0
 800377c:	4689      	mov	r9, r1
 800377e:	4b59      	ldr	r3, [pc, #356]	; (80038e4 <__ieee754_pow+0x704>)
 8003780:	4629      	mov	r1, r5
 8003782:	4650      	mov	r0, sl
 8003784:	f7fc fce8 	bl	8000158 <__aeabi_dsub>
 8003788:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800378c:	f7fc fce4 	bl	8000158 <__aeabi_dsub>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4630      	mov	r0, r6
 8003796:	4639      	mov	r1, r7
 8003798:	f7fc fcde 	bl	8000158 <__aeabi_dsub>
 800379c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80037a0:	f7fc fe8e 	bl	80004c0 <__aeabi_dmul>
 80037a4:	462b      	mov	r3, r5
 80037a6:	4606      	mov	r6, r0
 80037a8:	460f      	mov	r7, r1
 80037aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80037ae:	4652      	mov	r2, sl
 80037b0:	f7fc fe86 	bl	80004c0 <__aeabi_dmul>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4630      	mov	r0, r6
 80037ba:	4639      	mov	r1, r7
 80037bc:	f7fc fcce 	bl	800015c <__adddf3>
 80037c0:	4606      	mov	r6, r0
 80037c2:	460f      	mov	r7, r1
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4640      	mov	r0, r8
 80037ca:	4649      	mov	r1, r9
 80037cc:	f7fc fcc6 	bl	800015c <__adddf3>
 80037d0:	a339      	add	r3, pc, #228	; (adr r3, 80038b8 <__ieee754_pow+0x6d8>)
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	4650      	mov	r0, sl
 80037d8:	460d      	mov	r5, r1
 80037da:	f7fc fe71 	bl	80004c0 <__aeabi_dmul>
 80037de:	4642      	mov	r2, r8
 80037e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80037e4:	464b      	mov	r3, r9
 80037e6:	4629      	mov	r1, r5
 80037e8:	4650      	mov	r0, sl
 80037ea:	f7fc fcb5 	bl	8000158 <__aeabi_dsub>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4630      	mov	r0, r6
 80037f4:	4639      	mov	r1, r7
 80037f6:	f7fc fcaf 	bl	8000158 <__aeabi_dsub>
 80037fa:	a331      	add	r3, pc, #196	; (adr r3, 80038c0 <__ieee754_pow+0x6e0>)
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	f7fc fe5e 	bl	80004c0 <__aeabi_dmul>
 8003804:	a330      	add	r3, pc, #192	; (adr r3, 80038c8 <__ieee754_pow+0x6e8>)
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	4606      	mov	r6, r0
 800380c:	460f      	mov	r7, r1
 800380e:	4650      	mov	r0, sl
 8003810:	4629      	mov	r1, r5
 8003812:	f7fc fe55 	bl	80004c0 <__aeabi_dmul>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4630      	mov	r0, r6
 800381c:	4639      	mov	r1, r7
 800381e:	f7fc fc9d 	bl	800015c <__adddf3>
 8003822:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003824:	4b30      	ldr	r3, [pc, #192]	; (80038e8 <__ieee754_pow+0x708>)
 8003826:	4413      	add	r3, r2
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f7fc fc96 	bl	800015c <__adddf3>
 8003830:	4604      	mov	r4, r0
 8003832:	9807      	ldr	r0, [sp, #28]
 8003834:	460d      	mov	r5, r1
 8003836:	f7fc fddd 	bl	80003f4 <__aeabi_i2d>
 800383a:	4606      	mov	r6, r0
 800383c:	460f      	mov	r7, r1
 800383e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003840:	4b2a      	ldr	r3, [pc, #168]	; (80038ec <__ieee754_pow+0x70c>)
 8003842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003846:	4413      	add	r3, r2
 8003848:	e9d3 8900 	ldrd	r8, r9, [r3]
 800384c:	4622      	mov	r2, r4
 800384e:	462b      	mov	r3, r5
 8003850:	f7fc fc84 	bl	800015c <__adddf3>
 8003854:	4642      	mov	r2, r8
 8003856:	464b      	mov	r3, r9
 8003858:	f7fc fc80 	bl	800015c <__adddf3>
 800385c:	4632      	mov	r2, r6
 800385e:	463b      	mov	r3, r7
 8003860:	f7fc fc7c 	bl	800015c <__adddf3>
 8003864:	4632      	mov	r2, r6
 8003866:	463b      	mov	r3, r7
 8003868:	4650      	mov	r0, sl
 800386a:	468b      	mov	fp, r1
 800386c:	f7fc fc74 	bl	8000158 <__aeabi_dsub>
 8003870:	4642      	mov	r2, r8
 8003872:	464b      	mov	r3, r9
 8003874:	f7fc fc70 	bl	8000158 <__aeabi_dsub>
 8003878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800387c:	e613      	b.n	80034a6 <__ieee754_pow+0x2c6>
 800387e:	2601      	movs	r6, #1
 8003880:	e6af      	b.n	80035e2 <__ieee754_pow+0x402>
 8003882:	bf00      	nop
 8003884:	f3af 8000 	nop.w
 8003888:	4a454eef 	.word	0x4a454eef
 800388c:	3fca7e28 	.word	0x3fca7e28
 8003890:	93c9db65 	.word	0x93c9db65
 8003894:	3fcd864a 	.word	0x3fcd864a
 8003898:	a91d4101 	.word	0xa91d4101
 800389c:	3fd17460 	.word	0x3fd17460
 80038a0:	518f264d 	.word	0x518f264d
 80038a4:	3fd55555 	.word	0x3fd55555
 80038a8:	db6fabff 	.word	0xdb6fabff
 80038ac:	3fdb6db6 	.word	0x3fdb6db6
 80038b0:	33333303 	.word	0x33333303
 80038b4:	3fe33333 	.word	0x3fe33333
 80038b8:	e0000000 	.word	0xe0000000
 80038bc:	3feec709 	.word	0x3feec709
 80038c0:	dc3a03fd 	.word	0xdc3a03fd
 80038c4:	3feec709 	.word	0x3feec709
 80038c8:	145b01f5 	.word	0x145b01f5
 80038cc:	be3e2fe0 	.word	0xbe3e2fe0
 80038d0:	43400000 	.word	0x43400000
 80038d4:	0003988e 	.word	0x0003988e
 80038d8:	000bb679 	.word	0x000bb679
 80038dc:	08003f98 	.word	0x08003f98
 80038e0:	3ff00000 	.word	0x3ff00000
 80038e4:	40080000 	.word	0x40080000
 80038e8:	08003fb8 	.word	0x08003fb8
 80038ec:	08003fa8 	.word	0x08003fa8
 80038f0:	a39b      	add	r3, pc, #620	; (adr r3, 8003b60 <__ieee754_pow+0x980>)
 80038f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f6:	4640      	mov	r0, r8
 80038f8:	4649      	mov	r1, r9
 80038fa:	f7fc fc2f 	bl	800015c <__adddf3>
 80038fe:	4622      	mov	r2, r4
 8003900:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003904:	462b      	mov	r3, r5
 8003906:	4650      	mov	r0, sl
 8003908:	4639      	mov	r1, r7
 800390a:	f7fc fc25 	bl	8000158 <__aeabi_dsub>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003916:	f7fd f863 	bl	80009e0 <__aeabi_dcmpgt>
 800391a:	2800      	cmp	r0, #0
 800391c:	f47f ae13 	bne.w	8003546 <__ieee754_pow+0x366>
 8003920:	4aa3      	ldr	r2, [pc, #652]	; (8003bb0 <__ieee754_pow+0x9d0>)
 8003922:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8003926:	4293      	cmp	r3, r2
 8003928:	f340 8104 	ble.w	8003b34 <__ieee754_pow+0x954>
 800392c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003930:	2000      	movs	r0, #0
 8003932:	151b      	asrs	r3, r3, #20
 8003934:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003938:	fa4a f303 	asr.w	r3, sl, r3
 800393c:	4433      	add	r3, r6
 800393e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003942:	4f9c      	ldr	r7, [pc, #624]	; (8003bb4 <__ieee754_pow+0x9d4>)
 8003944:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003948:	4117      	asrs	r7, r2
 800394a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800394e:	ea23 0107 	bic.w	r1, r3, r7
 8003952:	f1c2 0214 	rsb	r2, r2, #20
 8003956:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800395a:	fa4a fa02 	asr.w	sl, sl, r2
 800395e:	2e00      	cmp	r6, #0
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4620      	mov	r0, r4
 8003966:	4629      	mov	r1, r5
 8003968:	bfb8      	it	lt
 800396a:	f1ca 0a00 	rsblt	sl, sl, #0
 800396e:	f7fc fbf3 	bl	8000158 <__aeabi_dsub>
 8003972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800397a:	4642      	mov	r2, r8
 800397c:	464b      	mov	r3, r9
 800397e:	f7fc fbed 	bl	800015c <__adddf3>
 8003982:	a379      	add	r3, pc, #484	; (adr r3, 8003b68 <__ieee754_pow+0x988>)
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	2000      	movs	r0, #0
 800398a:	460d      	mov	r5, r1
 800398c:	4604      	mov	r4, r0
 800398e:	f7fc fd97 	bl	80004c0 <__aeabi_dmul>
 8003992:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003996:	4606      	mov	r6, r0
 8003998:	460f      	mov	r7, r1
 800399a:	4620      	mov	r0, r4
 800399c:	4629      	mov	r1, r5
 800399e:	f7fc fbdb 	bl	8000158 <__aeabi_dsub>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4640      	mov	r0, r8
 80039a8:	4649      	mov	r1, r9
 80039aa:	f7fc fbd5 	bl	8000158 <__aeabi_dsub>
 80039ae:	a370      	add	r3, pc, #448	; (adr r3, 8003b70 <__ieee754_pow+0x990>)
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f7fc fd84 	bl	80004c0 <__aeabi_dmul>
 80039b8:	a36f      	add	r3, pc, #444	; (adr r3, 8003b78 <__ieee754_pow+0x998>)
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	4680      	mov	r8, r0
 80039c0:	4689      	mov	r9, r1
 80039c2:	4620      	mov	r0, r4
 80039c4:	4629      	mov	r1, r5
 80039c6:	f7fc fd7b 	bl	80004c0 <__aeabi_dmul>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4640      	mov	r0, r8
 80039d0:	4649      	mov	r1, r9
 80039d2:	f7fc fbc3 	bl	800015c <__adddf3>
 80039d6:	4604      	mov	r4, r0
 80039d8:	460d      	mov	r5, r1
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4630      	mov	r0, r6
 80039e0:	4639      	mov	r1, r7
 80039e2:	f7fc fbbb 	bl	800015c <__adddf3>
 80039e6:	4632      	mov	r2, r6
 80039e8:	463b      	mov	r3, r7
 80039ea:	4680      	mov	r8, r0
 80039ec:	4689      	mov	r9, r1
 80039ee:	f7fc fbb3 	bl	8000158 <__aeabi_dsub>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4620      	mov	r0, r4
 80039f8:	4629      	mov	r1, r5
 80039fa:	f7fc fbad 	bl	8000158 <__aeabi_dsub>
 80039fe:	4642      	mov	r2, r8
 8003a00:	4606      	mov	r6, r0
 8003a02:	460f      	mov	r7, r1
 8003a04:	464b      	mov	r3, r9
 8003a06:	4640      	mov	r0, r8
 8003a08:	4649      	mov	r1, r9
 8003a0a:	f7fc fd59 	bl	80004c0 <__aeabi_dmul>
 8003a0e:	a35c      	add	r3, pc, #368	; (adr r3, 8003b80 <__ieee754_pow+0x9a0>)
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	4604      	mov	r4, r0
 8003a16:	460d      	mov	r5, r1
 8003a18:	f7fc fd52 	bl	80004c0 <__aeabi_dmul>
 8003a1c:	a35a      	add	r3, pc, #360	; (adr r3, 8003b88 <__ieee754_pow+0x9a8>)
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	f7fc fb99 	bl	8000158 <__aeabi_dsub>
 8003a26:	4622      	mov	r2, r4
 8003a28:	462b      	mov	r3, r5
 8003a2a:	f7fc fd49 	bl	80004c0 <__aeabi_dmul>
 8003a2e:	a358      	add	r3, pc, #352	; (adr r3, 8003b90 <__ieee754_pow+0x9b0>)
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f7fc fb92 	bl	800015c <__adddf3>
 8003a38:	4622      	mov	r2, r4
 8003a3a:	462b      	mov	r3, r5
 8003a3c:	f7fc fd40 	bl	80004c0 <__aeabi_dmul>
 8003a40:	a355      	add	r3, pc, #340	; (adr r3, 8003b98 <__ieee754_pow+0x9b8>)
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	f7fc fb87 	bl	8000158 <__aeabi_dsub>
 8003a4a:	4622      	mov	r2, r4
 8003a4c:	462b      	mov	r3, r5
 8003a4e:	f7fc fd37 	bl	80004c0 <__aeabi_dmul>
 8003a52:	a353      	add	r3, pc, #332	; (adr r3, 8003ba0 <__ieee754_pow+0x9c0>)
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f7fc fb80 	bl	800015c <__adddf3>
 8003a5c:	4622      	mov	r2, r4
 8003a5e:	462b      	mov	r3, r5
 8003a60:	f7fc fd2e 	bl	80004c0 <__aeabi_dmul>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4640      	mov	r0, r8
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	f7fc fb74 	bl	8000158 <__aeabi_dsub>
 8003a70:	4604      	mov	r4, r0
 8003a72:	460d      	mov	r5, r1
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4640      	mov	r0, r8
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	f7fc fd20 	bl	80004c0 <__aeabi_dmul>
 8003a80:	2200      	movs	r2, #0
 8003a82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	f7fc fb63 	bl	8000158 <__aeabi_dsub>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a9a:	f7fc fe3b 	bl	8000714 <__aeabi_ddiv>
 8003a9e:	4632      	mov	r2, r6
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	460d      	mov	r5, r1
 8003aa4:	463b      	mov	r3, r7
 8003aa6:	4640      	mov	r0, r8
 8003aa8:	4649      	mov	r1, r9
 8003aaa:	f7fc fd09 	bl	80004c0 <__aeabi_dmul>
 8003aae:	4632      	mov	r2, r6
 8003ab0:	463b      	mov	r3, r7
 8003ab2:	f7fc fb53 	bl	800015c <__adddf3>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4620      	mov	r0, r4
 8003abc:	4629      	mov	r1, r5
 8003abe:	f7fc fb4b 	bl	8000158 <__aeabi_dsub>
 8003ac2:	4642      	mov	r2, r8
 8003ac4:	464b      	mov	r3, r9
 8003ac6:	f7fc fb47 	bl	8000158 <__aeabi_dsub>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	2000      	movs	r0, #0
 8003ad0:	4939      	ldr	r1, [pc, #228]	; (8003bb8 <__ieee754_pow+0x9d8>)
 8003ad2:	f7fc fb41 	bl	8000158 <__aeabi_dsub>
 8003ad6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003ada:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003ade:	da2c      	bge.n	8003b3a <__ieee754_pow+0x95a>
 8003ae0:	4652      	mov	r2, sl
 8003ae2:	f000 f9b5 	bl	8003e50 <scalbn>
 8003ae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003aea:	e40a      	b.n	8003302 <__ieee754_pow+0x122>
 8003aec:	4b33      	ldr	r3, [pc, #204]	; (8003bbc <__ieee754_pow+0x9dc>)
 8003aee:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003af2:	429f      	cmp	r7, r3
 8003af4:	f77f af14 	ble.w	8003920 <__ieee754_pow+0x740>
 8003af8:	4b31      	ldr	r3, [pc, #196]	; (8003bc0 <__ieee754_pow+0x9e0>)
 8003afa:	440b      	add	r3, r1
 8003afc:	4303      	orrs	r3, r0
 8003afe:	d00b      	beq.n	8003b18 <__ieee754_pow+0x938>
 8003b00:	a329      	add	r3, pc, #164	; (adr r3, 8003ba8 <__ieee754_pow+0x9c8>)
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b0a:	f7fc fcd9 	bl	80004c0 <__aeabi_dmul>
 8003b0e:	a326      	add	r3, pc, #152	; (adr r3, 8003ba8 <__ieee754_pow+0x9c8>)
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f7ff bbf5 	b.w	8003302 <__ieee754_pow+0x122>
 8003b18:	4622      	mov	r2, r4
 8003b1a:	462b      	mov	r3, r5
 8003b1c:	f7fc fb1c 	bl	8000158 <__aeabi_dsub>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4640      	mov	r0, r8
 8003b26:	4649      	mov	r1, r9
 8003b28:	f7fc ff46 	bl	80009b8 <__aeabi_dcmple>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	f43f aef7 	beq.w	8003920 <__ieee754_pow+0x740>
 8003b32:	e7e5      	b.n	8003b00 <__ieee754_pow+0x920>
 8003b34:	f04f 0a00 	mov.w	sl, #0
 8003b38:	e71d      	b.n	8003976 <__ieee754_pow+0x796>
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	e7d3      	b.n	8003ae6 <__ieee754_pow+0x906>
 8003b3e:	2000      	movs	r0, #0
 8003b40:	491d      	ldr	r1, [pc, #116]	; (8003bb8 <__ieee754_pow+0x9d8>)
 8003b42:	f7ff bbac 	b.w	800329e <__ieee754_pow+0xbe>
 8003b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b4a:	f7ff bba8 	b.w	800329e <__ieee754_pow+0xbe>
 8003b4e:	4638      	mov	r0, r7
 8003b50:	4641      	mov	r1, r8
 8003b52:	f7ff bba4 	b.w	800329e <__ieee754_pow+0xbe>
 8003b56:	9200      	str	r2, [sp, #0]
 8003b58:	f7ff bbb4 	b.w	80032c4 <__ieee754_pow+0xe4>
 8003b5c:	f3af 8000 	nop.w
 8003b60:	652b82fe 	.word	0x652b82fe
 8003b64:	3c971547 	.word	0x3c971547
 8003b68:	00000000 	.word	0x00000000
 8003b6c:	3fe62e43 	.word	0x3fe62e43
 8003b70:	fefa39ef 	.word	0xfefa39ef
 8003b74:	3fe62e42 	.word	0x3fe62e42
 8003b78:	0ca86c39 	.word	0x0ca86c39
 8003b7c:	be205c61 	.word	0xbe205c61
 8003b80:	72bea4d0 	.word	0x72bea4d0
 8003b84:	3e663769 	.word	0x3e663769
 8003b88:	c5d26bf1 	.word	0xc5d26bf1
 8003b8c:	3ebbbd41 	.word	0x3ebbbd41
 8003b90:	af25de2c 	.word	0xaf25de2c
 8003b94:	3f11566a 	.word	0x3f11566a
 8003b98:	16bebd93 	.word	0x16bebd93
 8003b9c:	3f66c16c 	.word	0x3f66c16c
 8003ba0:	5555553e 	.word	0x5555553e
 8003ba4:	3fc55555 	.word	0x3fc55555
 8003ba8:	c2f8f359 	.word	0xc2f8f359
 8003bac:	01a56e1f 	.word	0x01a56e1f
 8003bb0:	3fe00000 	.word	0x3fe00000
 8003bb4:	000fffff 	.word	0x000fffff
 8003bb8:	3ff00000 	.word	0x3ff00000
 8003bbc:	4090cbff 	.word	0x4090cbff
 8003bc0:	3f6f3400 	.word	0x3f6f3400

08003bc4 <__ieee754_sqrt>:
 8003bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc8:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8003d18 <__ieee754_sqrt+0x154>
 8003bcc:	4606      	mov	r6, r0
 8003bce:	ea3e 0e01 	bics.w	lr, lr, r1
 8003bd2:	460d      	mov	r5, r1
 8003bd4:	4607      	mov	r7, r0
 8003bd6:	460a      	mov	r2, r1
 8003bd8:	460c      	mov	r4, r1
 8003bda:	4603      	mov	r3, r0
 8003bdc:	d10f      	bne.n	8003bfe <__ieee754_sqrt+0x3a>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	f7fc fc6d 	bl	80004c0 <__aeabi_dmul>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4630      	mov	r0, r6
 8003bec:	4629      	mov	r1, r5
 8003bee:	f7fc fab5 	bl	800015c <__adddf3>
 8003bf2:	4606      	mov	r6, r0
 8003bf4:	460d      	mov	r5, r1
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bfe:	2900      	cmp	r1, #0
 8003c00:	dc0e      	bgt.n	8003c20 <__ieee754_sqrt+0x5c>
 8003c02:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8003c06:	ea5e 0707 	orrs.w	r7, lr, r7
 8003c0a:	d0f4      	beq.n	8003bf6 <__ieee754_sqrt+0x32>
 8003c0c:	b141      	cbz	r1, 8003c20 <__ieee754_sqrt+0x5c>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	f7fc faa1 	bl	8000158 <__aeabi_dsub>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	f7fc fd7b 	bl	8000714 <__aeabi_ddiv>
 8003c1e:	e7e8      	b.n	8003bf2 <__ieee754_sqrt+0x2e>
 8003c20:	1512      	asrs	r2, r2, #20
 8003c22:	d10c      	bne.n	8003c3e <__ieee754_sqrt+0x7a>
 8003c24:	2c00      	cmp	r4, #0
 8003c26:	d06e      	beq.n	8003d06 <__ieee754_sqrt+0x142>
 8003c28:	2100      	movs	r1, #0
 8003c2a:	02e6      	lsls	r6, r4, #11
 8003c2c:	d56f      	bpl.n	8003d0e <__ieee754_sqrt+0x14a>
 8003c2e:	1e48      	subs	r0, r1, #1
 8003c30:	1a12      	subs	r2, r2, r0
 8003c32:	f1c1 0020 	rsb	r0, r1, #32
 8003c36:	fa23 f000 	lsr.w	r0, r3, r0
 8003c3a:	4304      	orrs	r4, r0
 8003c3c:	408b      	lsls	r3, r1
 8003c3e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003c42:	07d5      	lsls	r5, r2, #31
 8003c44:	f04f 0500 	mov.w	r5, #0
 8003c48:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003c4c:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8003c50:	bf42      	ittt	mi
 8003c52:	0064      	lslmi	r4, r4, #1
 8003c54:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8003c58:	005b      	lslmi	r3, r3, #1
 8003c5a:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8003c5e:	1050      	asrs	r0, r2, #1
 8003c60:	4421      	add	r1, r4
 8003c62:	2216      	movs	r2, #22
 8003c64:	462c      	mov	r4, r5
 8003c66:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	19a7      	adds	r7, r4, r6
 8003c6e:	428f      	cmp	r7, r1
 8003c70:	bfde      	ittt	le
 8003c72:	1bc9      	suble	r1, r1, r7
 8003c74:	19bc      	addle	r4, r7, r6
 8003c76:	19ad      	addle	r5, r5, r6
 8003c78:	0049      	lsls	r1, r1, #1
 8003c7a:	3a01      	subs	r2, #1
 8003c7c:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8003c80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003c88:	d1f0      	bne.n	8003c6c <__ieee754_sqrt+0xa8>
 8003c8a:	f04f 0e20 	mov.w	lr, #32
 8003c8e:	4694      	mov	ip, r2
 8003c90:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003c94:	42a1      	cmp	r1, r4
 8003c96:	eb06 070c 	add.w	r7, r6, ip
 8003c9a:	dc02      	bgt.n	8003ca2 <__ieee754_sqrt+0xde>
 8003c9c:	d112      	bne.n	8003cc4 <__ieee754_sqrt+0x100>
 8003c9e:	429f      	cmp	r7, r3
 8003ca0:	d810      	bhi.n	8003cc4 <__ieee754_sqrt+0x100>
 8003ca2:	2f00      	cmp	r7, #0
 8003ca4:	eb07 0c06 	add.w	ip, r7, r6
 8003ca8:	da34      	bge.n	8003d14 <__ieee754_sqrt+0x150>
 8003caa:	f1bc 0f00 	cmp.w	ip, #0
 8003cae:	db31      	blt.n	8003d14 <__ieee754_sqrt+0x150>
 8003cb0:	f104 0801 	add.w	r8, r4, #1
 8003cb4:	1b09      	subs	r1, r1, r4
 8003cb6:	4644      	mov	r4, r8
 8003cb8:	429f      	cmp	r7, r3
 8003cba:	bf88      	it	hi
 8003cbc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8003cc0:	1bdb      	subs	r3, r3, r7
 8003cc2:	4432      	add	r2, r6
 8003cc4:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8003cc8:	f1be 0e01 	subs.w	lr, lr, #1
 8003ccc:	4439      	add	r1, r7
 8003cce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003cd2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003cd6:	d1dd      	bne.n	8003c94 <__ieee754_sqrt+0xd0>
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	d006      	beq.n	8003cea <__ieee754_sqrt+0x126>
 8003cdc:	1c54      	adds	r4, r2, #1
 8003cde:	bf0b      	itete	eq
 8003ce0:	4672      	moveq	r2, lr
 8003ce2:	3201      	addne	r2, #1
 8003ce4:	3501      	addeq	r5, #1
 8003ce6:	f022 0201 	bicne.w	r2, r2, #1
 8003cea:	106b      	asrs	r3, r5, #1
 8003cec:	0852      	lsrs	r2, r2, #1
 8003cee:	07e9      	lsls	r1, r5, #31
 8003cf0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003cf4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003cf8:	bf48      	it	mi
 8003cfa:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003cfe:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8003d02:	4616      	mov	r6, r2
 8003d04:	e777      	b.n	8003bf6 <__ieee754_sqrt+0x32>
 8003d06:	0adc      	lsrs	r4, r3, #11
 8003d08:	3a15      	subs	r2, #21
 8003d0a:	055b      	lsls	r3, r3, #21
 8003d0c:	e78a      	b.n	8003c24 <__ieee754_sqrt+0x60>
 8003d0e:	0064      	lsls	r4, r4, #1
 8003d10:	3101      	adds	r1, #1
 8003d12:	e78a      	b.n	8003c2a <__ieee754_sqrt+0x66>
 8003d14:	46a0      	mov	r8, r4
 8003d16:	e7cd      	b.n	8003cb4 <__ieee754_sqrt+0xf0>
 8003d18:	7ff00000 	.word	0x7ff00000

08003d1c <fabs>:
 8003d1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003d20:	4770      	bx	lr

08003d22 <finite>:
 8003d22:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003d26:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8003d2a:	0fc0      	lsrs	r0, r0, #31
 8003d2c:	4770      	bx	lr

08003d2e <matherr>:
 8003d2e:	2000      	movs	r0, #0
 8003d30:	4770      	bx	lr
	...

08003d34 <nan>:
 8003d34:	2000      	movs	r0, #0
 8003d36:	4901      	ldr	r1, [pc, #4]	; (8003d3c <nan+0x8>)
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	7ff80000 	.word	0x7ff80000

08003d40 <rint>:
 8003d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d42:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 8003d46:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 8003d4a:	2f13      	cmp	r7, #19
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4684      	mov	ip, r0
 8003d52:	460c      	mov	r4, r1
 8003d54:	4605      	mov	r5, r0
 8003d56:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8003d5a:	dc56      	bgt.n	8003e0a <rint+0xca>
 8003d5c:	2f00      	cmp	r7, #0
 8003d5e:	da29      	bge.n	8003db4 <rint+0x74>
 8003d60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003d64:	4301      	orrs	r1, r0
 8003d66:	d021      	beq.n	8003dac <rint+0x6c>
 8003d68:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8003d6c:	4305      	orrs	r5, r0
 8003d6e:	426b      	negs	r3, r5
 8003d70:	432b      	orrs	r3, r5
 8003d72:	0b1b      	lsrs	r3, r3, #12
 8003d74:	0c64      	lsrs	r4, r4, #17
 8003d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d7a:	0464      	lsls	r4, r4, #17
 8003d7c:	ea43 0104 	orr.w	r1, r3, r4
 8003d80:	4b31      	ldr	r3, [pc, #196]	; (8003e48 <rint+0x108>)
 8003d82:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003d86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	462b      	mov	r3, r5
 8003d8e:	f7fc f9e5 	bl	800015c <__adddf3>
 8003d92:	e9cd 0100 	strd	r0, r1, [sp]
 8003d96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	462b      	mov	r3, r5
 8003d9e:	f7fc f9db 	bl	8000158 <__aeabi_dsub>
 8003da2:	4602      	mov	r2, r0
 8003da4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003da8:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 8003dac:	4610      	mov	r0, r2
 8003dae:	4619      	mov	r1, r3
 8003db0:	b003      	add	sp, #12
 8003db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003db4:	4925      	ldr	r1, [pc, #148]	; (8003e4c <rint+0x10c>)
 8003db6:	4139      	asrs	r1, r7
 8003db8:	ea03 0001 	and.w	r0, r3, r1
 8003dbc:	4310      	orrs	r0, r2
 8003dbe:	d0f5      	beq.n	8003dac <rint+0x6c>
 8003dc0:	084b      	lsrs	r3, r1, #1
 8003dc2:	ea04 0203 	and.w	r2, r4, r3
 8003dc6:	ea52 050c 	orrs.w	r5, r2, ip
 8003dca:	d00a      	beq.n	8003de2 <rint+0xa2>
 8003dcc:	ea24 0303 	bic.w	r3, r4, r3
 8003dd0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8003dd4:	2f13      	cmp	r7, #19
 8003dd6:	bf0c      	ite	eq
 8003dd8:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8003ddc:	2500      	movne	r5, #0
 8003dde:	413c      	asrs	r4, r7
 8003de0:	431c      	orrs	r4, r3
 8003de2:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <rint+0x108>)
 8003de4:	4621      	mov	r1, r4
 8003de6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8003dea:	4628      	mov	r0, r5
 8003dec:	e9d6 4500 	ldrd	r4, r5, [r6]
 8003df0:	4622      	mov	r2, r4
 8003df2:	462b      	mov	r3, r5
 8003df4:	f7fc f9b2 	bl	800015c <__adddf3>
 8003df8:	e9cd 0100 	strd	r0, r1, [sp]
 8003dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e00:	4622      	mov	r2, r4
 8003e02:	462b      	mov	r3, r5
 8003e04:	f7fc f9a8 	bl	8000158 <__aeabi_dsub>
 8003e08:	e006      	b.n	8003e18 <rint+0xd8>
 8003e0a:	2f33      	cmp	r7, #51	; 0x33
 8003e0c:	dd07      	ble.n	8003e1e <rint+0xde>
 8003e0e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8003e12:	d1cb      	bne.n	8003dac <rint+0x6c>
 8003e14:	f7fc f9a2 	bl	800015c <__adddf3>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	e7c6      	b.n	8003dac <rint+0x6c>
 8003e1e:	f04f 31ff 	mov.w	r1, #4294967295
 8003e22:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 8003e26:	fa21 f10e 	lsr.w	r1, r1, lr
 8003e2a:	4208      	tst	r0, r1
 8003e2c:	d0be      	beq.n	8003dac <rint+0x6c>
 8003e2e:	084b      	lsrs	r3, r1, #1
 8003e30:	4218      	tst	r0, r3
 8003e32:	bf1f      	itttt	ne
 8003e34:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8003e38:	ea20 0303 	bicne.w	r3, r0, r3
 8003e3c:	fa45 fe0e 	asrne.w	lr, r5, lr
 8003e40:	ea4e 0503 	orrne.w	r5, lr, r3
 8003e44:	e7cd      	b.n	8003de2 <rint+0xa2>
 8003e46:	bf00      	nop
 8003e48:	08003fc8 	.word	0x08003fc8
 8003e4c:	000fffff 	.word	0x000fffff

08003e50 <scalbn>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	4616      	mov	r6, r2
 8003e54:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003e58:	4604      	mov	r4, r0
 8003e5a:	460d      	mov	r5, r1
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	b98a      	cbnz	r2, 8003e84 <scalbn+0x34>
 8003e60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003e64:	4303      	orrs	r3, r0
 8003e66:	d035      	beq.n	8003ed4 <scalbn+0x84>
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <scalbn+0xd0>)
 8003e6c:	f7fc fb28 	bl	80004c0 <__aeabi_dmul>
 8003e70:	4a2c      	ldr	r2, [pc, #176]	; (8003f24 <scalbn+0xd4>)
 8003e72:	4604      	mov	r4, r0
 8003e74:	4296      	cmp	r6, r2
 8003e76:	460d      	mov	r5, r1
 8003e78:	460b      	mov	r3, r1
 8003e7a:	da0e      	bge.n	8003e9a <scalbn+0x4a>
 8003e7c:	a324      	add	r3, pc, #144	; (adr r3, 8003f10 <scalbn+0xc0>)
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	e01c      	b.n	8003ebe <scalbn+0x6e>
 8003e84:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8003e88:	42ba      	cmp	r2, r7
 8003e8a:	d109      	bne.n	8003ea0 <scalbn+0x50>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	f7fc f964 	bl	800015c <__adddf3>
 8003e94:	4604      	mov	r4, r0
 8003e96:	460d      	mov	r5, r1
 8003e98:	e01c      	b.n	8003ed4 <scalbn+0x84>
 8003e9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003e9e:	3a36      	subs	r2, #54	; 0x36
 8003ea0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003ea4:	4432      	add	r2, r6
 8003ea6:	428a      	cmp	r2, r1
 8003ea8:	dd0c      	ble.n	8003ec4 <scalbn+0x74>
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	a11a      	add	r1, pc, #104	; (adr r1, 8003f18 <scalbn+0xc8>)
 8003eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003eb4:	f000 f83a 	bl	8003f2c <copysign>
 8003eb8:	a317      	add	r3, pc, #92	; (adr r3, 8003f18 <scalbn+0xc8>)
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f7fc faff 	bl	80004c0 <__aeabi_dmul>
 8003ec2:	e7e7      	b.n	8003e94 <scalbn+0x44>
 8003ec4:	2a00      	cmp	r2, #0
 8003ec6:	dd08      	ble.n	8003eda <scalbn+0x8a>
 8003ec8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003ecc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ed0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eda:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003ede:	da0b      	bge.n	8003ef8 <scalbn+0xa8>
 8003ee0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003ee4:	429e      	cmp	r6, r3
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	462b      	mov	r3, r5
 8003eea:	dce0      	bgt.n	8003eae <scalbn+0x5e>
 8003eec:	a108      	add	r1, pc, #32	; (adr r1, 8003f10 <scalbn+0xc0>)
 8003eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ef2:	f000 f81b 	bl	8003f2c <copysign>
 8003ef6:	e7c1      	b.n	8003e7c <scalbn+0x2c>
 8003ef8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003efc:	3236      	adds	r2, #54	; 0x36
 8003efe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003f06:	4620      	mov	r0, r4
 8003f08:	4629      	mov	r1, r5
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <scalbn+0xd8>)
 8003f0e:	e7d6      	b.n	8003ebe <scalbn+0x6e>
 8003f10:	c2f8f359 	.word	0xc2f8f359
 8003f14:	01a56e1f 	.word	0x01a56e1f
 8003f18:	8800759c 	.word	0x8800759c
 8003f1c:	7e37e43c 	.word	0x7e37e43c
 8003f20:	43500000 	.word	0x43500000
 8003f24:	ffff3cb0 	.word	0xffff3cb0
 8003f28:	3c900000 	.word	0x3c900000

08003f2c <copysign>:
 8003f2c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003f30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f34:	ea42 0103 	orr.w	r1, r2, r3
 8003f38:	4770      	bx	lr
	...

08003f3c <__errno>:
 8003f3c:	4b01      	ldr	r3, [pc, #4]	; (8003f44 <__errno+0x8>)
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000024 	.word	0x20000024

08003f48 <_init>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	bf00      	nop
 8003f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4e:	bc08      	pop	{r3}
 8003f50:	469e      	mov	lr, r3
 8003f52:	4770      	bx	lr

08003f54 <_fini>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	bf00      	nop
 8003f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5a:	bc08      	pop	{r3}
 8003f5c:	469e      	mov	lr, r3
 8003f5e:	4770      	bx	lr
