
BluePillSensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002afc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002c08  08002c08  00012c08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002c38  08002c38  00012c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08002c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000016cc  20000074  08002cb4  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001740  08002cb4  00021740  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001256e  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002719  00000000  00000000  0003260b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000710  00000000  00000000  00034d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b10  00000000  00000000  00035438  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000573f  00000000  00000000  00035f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002a72  00000000  00000000  0003b687  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003e0f9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000174c  00000000  00000000  0003e178  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000515f  00000000  00000000  0003f8c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bf0 	.word	0x08002bf0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002bf0 	.word	0x08002bf0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	bf14      	ite	ne
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800044c:	e720      	b.n	8000290 <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_ul2d>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	b530      	push	{r4, r5, lr}
 800045a:	f04f 0500 	mov.w	r5, #0
 800045e:	e00a      	b.n	8000476 <__aeabi_l2d+0x16>

08000460 <__aeabi_l2d>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800046e:	d502      	bpl.n	8000476 <__aeabi_l2d+0x16>
 8000470:	4240      	negs	r0, r0
 8000472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000476:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000482:	f43f aedc 	beq.w	800023e <__adddf3+0xe6>
 8000486:	f04f 0203 	mov.w	r2, #3
 800048a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800048e:	bf18      	it	ne
 8000490:	3203      	addne	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800049e:	f1c2 0320 	rsb	r3, r2, #32
 80004a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ae:	ea40 000e 	orr.w	r0, r0, lr
 80004b2:	fa21 f102 	lsr.w	r1, r1, r2
 80004b6:	4414      	add	r4, r2
 80004b8:	e6c1      	b.n	800023e <__adddf3+0xe6>
 80004ba:	bf00      	nop

080004bc <__aeabi_dmul>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ca:	bf1d      	ittte	ne
 80004cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d0:	ea94 0f0c 	teqne	r4, ip
 80004d4:	ea95 0f0c 	teqne	r5, ip
 80004d8:	f000 f8de 	bleq	8000698 <__aeabi_dmul+0x1dc>
 80004dc:	442c      	add	r4, r5
 80004de:	ea81 0603 	eor.w	r6, r1, r3
 80004e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ee:	bf18      	it	ne
 80004f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004fc:	d038      	beq.n	8000570 <__aeabi_dmul+0xb4>
 80004fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800050e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000512:	f04f 0600 	mov.w	r6, #0
 8000516:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051a:	f09c 0f00 	teq	ip, #0
 800051e:	bf18      	it	ne
 8000520:	f04e 0e01 	orrne.w	lr, lr, #1
 8000524:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000528:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800052c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000530:	d204      	bcs.n	800053c <__aeabi_dmul+0x80>
 8000532:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000536:	416d      	adcs	r5, r5
 8000538:	eb46 0606 	adc.w	r6, r6, r6
 800053c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000540:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000544:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000548:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800054c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000550:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000554:	bf88      	it	hi
 8000556:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055a:	d81e      	bhi.n	800059a <__aeabi_dmul+0xde>
 800055c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000574:	ea46 0101 	orr.w	r1, r6, r1
 8000578:	ea40 0002 	orr.w	r0, r0, r2
 800057c:	ea81 0103 	eor.w	r1, r1, r3
 8000580:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000584:	bfc2      	ittt	gt
 8000586:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800058e:	bd70      	popgt	{r4, r5, r6, pc}
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f04f 0e00 	mov.w	lr, #0
 8000598:	3c01      	subs	r4, #1
 800059a:	f300 80ab 	bgt.w	80006f4 <__aeabi_dmul+0x238>
 800059e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a2:	bfde      	ittt	le
 80005a4:	2000      	movle	r0, #0
 80005a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd70      	pople	{r4, r5, r6, pc}
 80005ac:	f1c4 0400 	rsb	r4, r4, #0
 80005b0:	3c20      	subs	r4, #32
 80005b2:	da35      	bge.n	8000620 <__aeabi_dmul+0x164>
 80005b4:	340c      	adds	r4, #12
 80005b6:	dc1b      	bgt.n	80005f0 <__aeabi_dmul+0x134>
 80005b8:	f104 0414 	add.w	r4, r4, #20
 80005bc:	f1c4 0520 	rsb	r5, r4, #32
 80005c0:	fa00 f305 	lsl.w	r3, r0, r5
 80005c4:	fa20 f004 	lsr.w	r0, r0, r4
 80005c8:	fa01 f205 	lsl.w	r2, r1, r5
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	fa21 f604 	lsr.w	r6, r1, r4
 80005e0:	eb42 0106 	adc.w	r1, r2, r6
 80005e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e8:	bf08      	it	eq
 80005ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f1c4 040c 	rsb	r4, r4, #12
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f304 	lsl.w	r3, r0, r4
 80005fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000600:	fa01 f204 	lsl.w	r2, r1, r4
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	f141 0100 	adc.w	r1, r1, #0
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f205 	lsl.w	r2, r0, r5
 8000628:	ea4e 0e02 	orr.w	lr, lr, r2
 800062c:	fa20 f304 	lsr.w	r3, r0, r4
 8000630:	fa01 f205 	lsl.w	r2, r1, r5
 8000634:	ea43 0302 	orr.w	r3, r3, r2
 8000638:	fa21 f004 	lsr.w	r0, r1, r4
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	fa21 f204 	lsr.w	r2, r1, r4
 8000644:	ea20 0002 	bic.w	r0, r0, r2
 8000648:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f094 0f00 	teq	r4, #0
 800065c:	d10f      	bne.n	800067e <__aeabi_dmul+0x1c2>
 800065e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000662:	0040      	lsls	r0, r0, #1
 8000664:	eb41 0101 	adc.w	r1, r1, r1
 8000668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800066c:	bf08      	it	eq
 800066e:	3c01      	subeq	r4, #1
 8000670:	d0f7      	beq.n	8000662 <__aeabi_dmul+0x1a6>
 8000672:	ea41 0106 	orr.w	r1, r1, r6
 8000676:	f095 0f00 	teq	r5, #0
 800067a:	bf18      	it	ne
 800067c:	4770      	bxne	lr
 800067e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	eb43 0303 	adc.w	r3, r3, r3
 8000688:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3d01      	subeq	r5, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1c6>
 8000692:	ea43 0306 	orr.w	r3, r3, r6
 8000696:	4770      	bx	lr
 8000698:	ea94 0f0c 	teq	r4, ip
 800069c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a0:	bf18      	it	ne
 80006a2:	ea95 0f0c 	teqne	r5, ip
 80006a6:	d00c      	beq.n	80006c2 <__aeabi_dmul+0x206>
 80006a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ac:	bf18      	it	ne
 80006ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b2:	d1d1      	bne.n	8000658 <__aeabi_dmul+0x19c>
 80006b4:	ea81 0103 	eor.w	r1, r1, r3
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c6:	bf06      	itte	eq
 80006c8:	4610      	moveq	r0, r2
 80006ca:	4619      	moveq	r1, r3
 80006cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d0:	d019      	beq.n	8000706 <__aeabi_dmul+0x24a>
 80006d2:	ea94 0f0c 	teq	r4, ip
 80006d6:	d102      	bne.n	80006de <__aeabi_dmul+0x222>
 80006d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006dc:	d113      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006de:	ea95 0f0c 	teq	r5, ip
 80006e2:	d105      	bne.n	80006f0 <__aeabi_dmul+0x234>
 80006e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006e8:	bf1c      	itt	ne
 80006ea:	4610      	movne	r0, r2
 80006ec:	4619      	movne	r1, r3
 80006ee:	d10a      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800070e:	bd70      	pop	{r4, r5, r6, pc}

08000710 <__aeabi_ddiv>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800071e:	bf1d      	ittte	ne
 8000720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000724:	ea94 0f0c 	teqne	r4, ip
 8000728:	ea95 0f0c 	teqne	r5, ip
 800072c:	f000 f8a7 	bleq	800087e <__aeabi_ddiv+0x16e>
 8000730:	eba4 0405 	sub.w	r4, r4, r5
 8000734:	ea81 0e03 	eor.w	lr, r1, r3
 8000738:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800073c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000740:	f000 8088 	beq.w	8000854 <__aeabi_ddiv+0x144>
 8000744:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000748:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800074c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000750:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000754:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000758:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800075c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000760:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000764:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000768:	429d      	cmp	r5, r3
 800076a:	bf08      	it	eq
 800076c:	4296      	cmpeq	r6, r2
 800076e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000772:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000776:	d202      	bcs.n	800077e <__aeabi_ddiv+0x6e>
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	ea4f 0232 	mov.w	r2, r2, rrx
 800077e:	1ab6      	subs	r6, r6, r2
 8000780:	eb65 0503 	sbc.w	r5, r5, r3
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800078e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000792:	ebb6 0e02 	subs.w	lr, r6, r2
 8000796:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079a:	bf22      	ittt	cs
 800079c:	1ab6      	subcs	r6, r6, r2
 800079e:	4675      	movcs	r5, lr
 80007a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f0:	d018      	beq.n	8000824 <__aeabi_ddiv+0x114>
 80007f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000802:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000806:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800080e:	d1c0      	bne.n	8000792 <__aeabi_ddiv+0x82>
 8000810:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000814:	d10b      	bne.n	800082e <__aeabi_ddiv+0x11e>
 8000816:	ea41 0100 	orr.w	r1, r1, r0
 800081a:	f04f 0000 	mov.w	r0, #0
 800081e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000822:	e7b6      	b.n	8000792 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf04      	itt	eq
 800082a:	4301      	orreq	r1, r0
 800082c:	2000      	moveq	r0, #0
 800082e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000832:	bf88      	it	hi
 8000834:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000838:	f63f aeaf 	bhi.w	800059a <__aeabi_dmul+0xde>
 800083c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000840:	bf04      	itt	eq
 8000842:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000846:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084a:	f150 0000 	adcs.w	r0, r0, #0
 800084e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000858:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800085c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000860:	bfc2      	ittt	gt
 8000862:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086a:	bd70      	popgt	{r4, r5, r6, pc}
 800086c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000870:	f04f 0e00 	mov.w	lr, #0
 8000874:	3c01      	subs	r4, #1
 8000876:	e690      	b.n	800059a <__aeabi_dmul+0xde>
 8000878:	ea45 0e06 	orr.w	lr, r5, r6
 800087c:	e68d      	b.n	800059a <__aeabi_dmul+0xde>
 800087e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000882:	ea94 0f0c 	teq	r4, ip
 8000886:	bf08      	it	eq
 8000888:	ea95 0f0c 	teqeq	r5, ip
 800088c:	f43f af3b 	beq.w	8000706 <__aeabi_dmul+0x24a>
 8000890:	ea94 0f0c 	teq	r4, ip
 8000894:	d10a      	bne.n	80008ac <__aeabi_ddiv+0x19c>
 8000896:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089a:	f47f af34 	bne.w	8000706 <__aeabi_dmul+0x24a>
 800089e:	ea95 0f0c 	teq	r5, ip
 80008a2:	f47f af25 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008a6:	4610      	mov	r0, r2
 80008a8:	4619      	mov	r1, r3
 80008aa:	e72c      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008ac:	ea95 0f0c 	teq	r5, ip
 80008b0:	d106      	bne.n	80008c0 <__aeabi_ddiv+0x1b0>
 80008b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b6:	f43f aefd 	beq.w	80006b4 <__aeabi_dmul+0x1f8>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e722      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c4:	bf18      	it	ne
 80008c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ca:	f47f aec5 	bne.w	8000658 <__aeabi_dmul+0x19c>
 80008ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d2:	f47f af0d 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008da:	f47f aeeb 	bne.w	80006b4 <__aeabi_dmul+0x1f8>
 80008de:	e712      	b.n	8000706 <__aeabi_dmul+0x24a>

080008e0 <__gedf2>:
 80008e0:	f04f 3cff 	mov.w	ip, #4294967295
 80008e4:	e006      	b.n	80008f4 <__cmpdf2+0x4>
 80008e6:	bf00      	nop

080008e8 <__ledf2>:
 80008e8:	f04f 0c01 	mov.w	ip, #1
 80008ec:	e002      	b.n	80008f4 <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__cmpdf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000904:	bf18      	it	ne
 8000906:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090a:	d01b      	beq.n	8000944 <__cmpdf2+0x54>
 800090c:	b001      	add	sp, #4
 800090e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000912:	bf0c      	ite	eq
 8000914:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000918:	ea91 0f03 	teqne	r1, r3
 800091c:	bf02      	ittt	eq
 800091e:	ea90 0f02 	teqeq	r0, r2
 8000922:	2000      	moveq	r0, #0
 8000924:	4770      	bxeq	lr
 8000926:	f110 0f00 	cmn.w	r0, #0
 800092a:	ea91 0f03 	teq	r1, r3
 800092e:	bf58      	it	pl
 8000930:	4299      	cmppl	r1, r3
 8000932:	bf08      	it	eq
 8000934:	4290      	cmpeq	r0, r2
 8000936:	bf2c      	ite	cs
 8000938:	17d8      	asrcs	r0, r3, #31
 800093a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800093e:	f040 0001 	orr.w	r0, r0, #1
 8000942:	4770      	bx	lr
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	d102      	bne.n	8000954 <__cmpdf2+0x64>
 800094e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000952:	d107      	bne.n	8000964 <__cmpdf2+0x74>
 8000954:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800095c:	d1d6      	bne.n	800090c <__cmpdf2+0x1c>
 800095e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000962:	d0d3      	beq.n	800090c <__cmpdf2+0x1c>
 8000964:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <__aeabi_cdrcmple>:
 800096c:	4684      	mov	ip, r0
 800096e:	4610      	mov	r0, r2
 8000970:	4662      	mov	r2, ip
 8000972:	468c      	mov	ip, r1
 8000974:	4619      	mov	r1, r3
 8000976:	4663      	mov	r3, ip
 8000978:	e000      	b.n	800097c <__aeabi_cdcmpeq>
 800097a:	bf00      	nop

0800097c <__aeabi_cdcmpeq>:
 800097c:	b501      	push	{r0, lr}
 800097e:	f7ff ffb7 	bl	80008f0 <__cmpdf2>
 8000982:	2800      	cmp	r0, #0
 8000984:	bf48      	it	mi
 8000986:	f110 0f00 	cmnmi.w	r0, #0
 800098a:	bd01      	pop	{r0, pc}

0800098c <__aeabi_dcmpeq>:
 800098c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000990:	f7ff fff4 	bl	800097c <__aeabi_cdcmpeq>
 8000994:	bf0c      	ite	eq
 8000996:	2001      	moveq	r0, #1
 8000998:	2000      	movne	r0, #0
 800099a:	f85d fb08 	ldr.w	pc, [sp], #8
 800099e:	bf00      	nop

080009a0 <__aeabi_dcmplt>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff ffea 	bl	800097c <__aeabi_cdcmpeq>
 80009a8:	bf34      	ite	cc
 80009aa:	2001      	movcc	r0, #1
 80009ac:	2000      	movcs	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmple>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffe0 	bl	800097c <__aeabi_cdcmpeq>
 80009bc:	bf94      	ite	ls
 80009be:	2001      	movls	r0, #1
 80009c0:	2000      	movhi	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmpge>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffce 	bl	800096c <__aeabi_cdrcmple>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpgt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffc4 	bl	800096c <__aeabi_cdrcmple>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpun>:
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__aeabi_dcmpun+0x10>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d10a      	bne.n	8000a16 <__aeabi_dcmpun+0x26>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__aeabi_dcmpun+0x20>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d102      	bne.n	8000a16 <__aeabi_dcmpun+0x26>
 8000a10:	f04f 0000 	mov.w	r0, #0
 8000a14:	4770      	bx	lr
 8000a16:	f04f 0001 	mov.w	r0, #1
 8000a1a:	4770      	bx	lr

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_frsub>:
 8000abc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac0:	e002      	b.n	8000ac8 <__addsf3>
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_fsub>:
 8000ac4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac8 <__addsf3>:
 8000ac8:	0042      	lsls	r2, r0, #1
 8000aca:	bf1f      	itttt	ne
 8000acc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad0:	ea92 0f03 	teqne	r2, r3
 8000ad4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000adc:	d06a      	beq.n	8000bb4 <__addsf3+0xec>
 8000ade:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ae2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae6:	bfc1      	itttt	gt
 8000ae8:	18d2      	addgt	r2, r2, r3
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	4048      	eorgt	r0, r1
 8000aee:	4041      	eorgt	r1, r0
 8000af0:	bfb8      	it	lt
 8000af2:	425b      	neglt	r3, r3
 8000af4:	2b19      	cmp	r3, #25
 8000af6:	bf88      	it	hi
 8000af8:	4770      	bxhi	lr
 8000afa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b16:	bf18      	it	ne
 8000b18:	4249      	negne	r1, r1
 8000b1a:	ea92 0f03 	teq	r2, r3
 8000b1e:	d03f      	beq.n	8000ba0 <__addsf3+0xd8>
 8000b20:	f1a2 0201 	sub.w	r2, r2, #1
 8000b24:	fa41 fc03 	asr.w	ip, r1, r3
 8000b28:	eb10 000c 	adds.w	r0, r0, ip
 8000b2c:	f1c3 0320 	rsb	r3, r3, #32
 8000b30:	fa01 f103 	lsl.w	r1, r1, r3
 8000b34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__addsf3+0x78>
 8000b3a:	4249      	negs	r1, r1
 8000b3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b44:	d313      	bcc.n	8000b6e <__addsf3+0xa6>
 8000b46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b4a:	d306      	bcc.n	8000b5a <__addsf3+0x92>
 8000b4c:	0840      	lsrs	r0, r0, #1
 8000b4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b52:	f102 0201 	add.w	r2, r2, #1
 8000b56:	2afe      	cmp	r2, #254	; 0xfe
 8000b58:	d251      	bcs.n	8000bfe <__addsf3+0x136>
 8000b5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b62:	bf08      	it	eq
 8000b64:	f020 0001 	biceq.w	r0, r0, #1
 8000b68:	ea40 0003 	orr.w	r0, r0, r3
 8000b6c:	4770      	bx	lr
 8000b6e:	0049      	lsls	r1, r1, #1
 8000b70:	eb40 0000 	adc.w	r0, r0, r0
 8000b74:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	d1ed      	bne.n	8000b5a <__addsf3+0x92>
 8000b7e:	fab0 fc80 	clz	ip, r0
 8000b82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b86:	ebb2 020c 	subs.w	r2, r2, ip
 8000b8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8e:	bfaa      	itet	ge
 8000b90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b94:	4252      	neglt	r2, r2
 8000b96:	4318      	orrge	r0, r3
 8000b98:	bfbc      	itt	lt
 8000b9a:	40d0      	lsrlt	r0, r2
 8000b9c:	4318      	orrlt	r0, r3
 8000b9e:	4770      	bx	lr
 8000ba0:	f092 0f00 	teq	r2, #0
 8000ba4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba8:	bf06      	itte	eq
 8000baa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bae:	3201      	addeq	r2, #1
 8000bb0:	3b01      	subne	r3, #1
 8000bb2:	e7b5      	b.n	8000b20 <__addsf3+0x58>
 8000bb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	bf18      	it	ne
 8000bbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc2:	d021      	beq.n	8000c08 <__addsf3+0x140>
 8000bc4:	ea92 0f03 	teq	r2, r3
 8000bc8:	d004      	beq.n	8000bd4 <__addsf3+0x10c>
 8000bca:	f092 0f00 	teq	r2, #0
 8000bce:	bf08      	it	eq
 8000bd0:	4608      	moveq	r0, r1
 8000bd2:	4770      	bx	lr
 8000bd4:	ea90 0f01 	teq	r0, r1
 8000bd8:	bf1c      	itt	ne
 8000bda:	2000      	movne	r0, #0
 8000bdc:	4770      	bxne	lr
 8000bde:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000be2:	d104      	bne.n	8000bee <__addsf3+0x126>
 8000be4:	0040      	lsls	r0, r0, #1
 8000be6:	bf28      	it	cs
 8000be8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	4770      	bx	lr
 8000bee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bf2:	bf3c      	itt	cc
 8000bf4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bxcc	lr
 8000bfa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c06:	4770      	bx	lr
 8000c08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c0c:	bf16      	itet	ne
 8000c0e:	4608      	movne	r0, r1
 8000c10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c14:	4601      	movne	r1, r0
 8000c16:	0242      	lsls	r2, r0, #9
 8000c18:	bf06      	itte	eq
 8000c1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1e:	ea90 0f01 	teqeq	r0, r1
 8000c22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_ui2f>:
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e004      	b.n	8000c38 <__aeabi_i2f+0x8>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_i2f>:
 8000c30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c34:	bf48      	it	mi
 8000c36:	4240      	negmi	r0, r0
 8000c38:	ea5f 0c00 	movs.w	ip, r0
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c44:	4601      	mov	r1, r0
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	e01c      	b.n	8000c86 <__aeabi_l2f+0x2a>

08000c4c <__aeabi_ul2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e00a      	b.n	8000c70 <__aeabi_l2f+0x14>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_l2f>:
 8000c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c60:	bf08      	it	eq
 8000c62:	4770      	bxeq	lr
 8000c64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c68:	d502      	bpl.n	8000c70 <__aeabi_l2f+0x14>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	ea5f 0c01 	movs.w	ip, r1
 8000c74:	bf02      	ittt	eq
 8000c76:	4684      	moveq	ip, r0
 8000c78:	4601      	moveq	r1, r0
 8000c7a:	2000      	moveq	r0, #0
 8000c7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c80:	bf08      	it	eq
 8000c82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c8a:	fabc f28c 	clz	r2, ip
 8000c8e:	3a08      	subs	r2, #8
 8000c90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c94:	db10      	blt.n	8000cb8 <__aeabi_l2f+0x5c>
 8000c96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f102 0220 	add.w	r2, r2, #32
 8000cbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_fmul>:
 8000cd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cdc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce0:	bf1e      	ittt	ne
 8000ce2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce6:	ea92 0f0c 	teqne	r2, ip
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d06f      	beq.n	8000dd0 <__aeabi_fmul+0xf8>
 8000cf0:	441a      	add	r2, r3
 8000cf2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf6:	0240      	lsls	r0, r0, #9
 8000cf8:	bf18      	it	ne
 8000cfa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfe:	d01e      	beq.n	8000d3e <__aeabi_fmul+0x66>
 8000d00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d18:	bf3e      	ittt	cc
 8000d1a:	0049      	lslcc	r1, r1, #1
 8000d1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d20:	005b      	lslcc	r3, r3, #1
 8000d22:	ea40 0001 	orr.w	r0, r0, r1
 8000d26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d2a:	2afd      	cmp	r2, #253	; 0xfd
 8000d2c:	d81d      	bhi.n	8000d6a <__aeabi_fmul+0x92>
 8000d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	4770      	bx	lr
 8000d3e:	f090 0f00 	teq	r0, #0
 8000d42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d46:	bf08      	it	eq
 8000d48:	0249      	lsleq	r1, r1, #9
 8000d4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d52:	3a7f      	subs	r2, #127	; 0x7f
 8000d54:	bfc2      	ittt	gt
 8000d56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5e:	4770      	bxgt	lr
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	3a01      	subs	r2, #1
 8000d6a:	dc5d      	bgt.n	8000e28 <__aeabi_fmul+0x150>
 8000d6c:	f112 0f19 	cmn.w	r2, #25
 8000d70:	bfdc      	itt	le
 8000d72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d76:	4770      	bxle	lr
 8000d78:	f1c2 0200 	rsb	r2, r2, #0
 8000d7c:	0041      	lsls	r1, r0, #1
 8000d7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d82:	f1c2 0220 	rsb	r2, r2, #32
 8000d86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8e:	f140 0000 	adc.w	r0, r0, #0
 8000d92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d96:	bf08      	it	eq
 8000d98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d9c:	4770      	bx	lr
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da6:	bf02      	ittt	eq
 8000da8:	0040      	lsleq	r0, r0, #1
 8000daa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dae:	3a01      	subeq	r2, #1
 8000db0:	d0f9      	beq.n	8000da6 <__aeabi_fmul+0xce>
 8000db2:	ea40 000c 	orr.w	r0, r0, ip
 8000db6:	f093 0f00 	teq	r3, #0
 8000dba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dbe:	bf02      	ittt	eq
 8000dc0:	0049      	lsleq	r1, r1, #1
 8000dc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc6:	3b01      	subeq	r3, #1
 8000dc8:	d0f9      	beq.n	8000dbe <__aeabi_fmul+0xe6>
 8000dca:	ea41 010c 	orr.w	r1, r1, ip
 8000dce:	e78f      	b.n	8000cf0 <__aeabi_fmul+0x18>
 8000dd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd4:	ea92 0f0c 	teq	r2, ip
 8000dd8:	bf18      	it	ne
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d00a      	beq.n	8000df6 <__aeabi_fmul+0x11e>
 8000de0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de4:	bf18      	it	ne
 8000de6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	d1d8      	bne.n	8000d9e <__aeabi_fmul+0xc6>
 8000dec:	ea80 0001 	eor.w	r0, r0, r1
 8000df0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df4:	4770      	bx	lr
 8000df6:	f090 0f00 	teq	r0, #0
 8000dfa:	bf17      	itett	ne
 8000dfc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e00:	4608      	moveq	r0, r1
 8000e02:	f091 0f00 	teqne	r1, #0
 8000e06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e0a:	d014      	beq.n	8000e36 <__aeabi_fmul+0x15e>
 8000e0c:	ea92 0f0c 	teq	r2, ip
 8000e10:	d101      	bne.n	8000e16 <__aeabi_fmul+0x13e>
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	d10f      	bne.n	8000e36 <__aeabi_fmul+0x15e>
 8000e16:	ea93 0f0c 	teq	r3, ip
 8000e1a:	d103      	bne.n	8000e24 <__aeabi_fmul+0x14c>
 8000e1c:	024b      	lsls	r3, r1, #9
 8000e1e:	bf18      	it	ne
 8000e20:	4608      	movne	r0, r1
 8000e22:	d108      	bne.n	8000e36 <__aeabi_fmul+0x15e>
 8000e24:	ea80 0001 	eor.w	r0, r0, r1
 8000e28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e34:	4770      	bx	lr
 8000e36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3e:	4770      	bx	lr

08000e40 <__aeabi_fdiv>:
 8000e40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e48:	bf1e      	ittt	ne
 8000e4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4e:	ea92 0f0c 	teqne	r2, ip
 8000e52:	ea93 0f0c 	teqne	r3, ip
 8000e56:	d069      	beq.n	8000f2c <__aeabi_fdiv+0xec>
 8000e58:	eba2 0203 	sub.w	r2, r2, r3
 8000e5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e60:	0249      	lsls	r1, r1, #9
 8000e62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e66:	d037      	beq.n	8000ed8 <__aeabi_fdiv+0x98>
 8000e68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	bf38      	it	cc
 8000e7c:	005b      	lslcc	r3, r3, #1
 8000e7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e86:	428b      	cmp	r3, r1
 8000e88:	bf24      	itt	cs
 8000e8a:	1a5b      	subcs	r3, r3, r1
 8000e8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e94:	bf24      	itt	cs
 8000e96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ea2:	bf24      	itt	cs
 8000ea4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	bf18      	it	ne
 8000ebe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ec2:	d1e0      	bne.n	8000e86 <__aeabi_fdiv+0x46>
 8000ec4:	2afd      	cmp	r2, #253	; 0xfd
 8000ec6:	f63f af50 	bhi.w	8000d6a <__aeabi_fmul+0x92>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed0:	bf08      	it	eq
 8000ed2:	f020 0001 	biceq.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000edc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee0:	327f      	adds	r2, #127	; 0x7f
 8000ee2:	bfc2      	ittt	gt
 8000ee4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eec:	4770      	bxgt	lr
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	3a01      	subs	r2, #1
 8000ef8:	e737      	b.n	8000d6a <__aeabi_fmul+0x92>
 8000efa:	f092 0f00 	teq	r2, #0
 8000efe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0040      	lsleq	r0, r0, #1
 8000f06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f0a:	3a01      	subeq	r2, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fdiv+0xc2>
 8000f0e:	ea40 000c 	orr.w	r0, r0, ip
 8000f12:	f093 0f00 	teq	r3, #0
 8000f16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f1a:	bf02      	ittt	eq
 8000f1c:	0049      	lsleq	r1, r1, #1
 8000f1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f22:	3b01      	subeq	r3, #1
 8000f24:	d0f9      	beq.n	8000f1a <__aeabi_fdiv+0xda>
 8000f26:	ea41 010c 	orr.w	r1, r1, ip
 8000f2a:	e795      	b.n	8000e58 <__aeabi_fdiv+0x18>
 8000f2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f30:	ea92 0f0c 	teq	r2, ip
 8000f34:	d108      	bne.n	8000f48 <__aeabi_fdiv+0x108>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	f47f af7d 	bne.w	8000e36 <__aeabi_fmul+0x15e>
 8000f3c:	ea93 0f0c 	teq	r3, ip
 8000f40:	f47f af70 	bne.w	8000e24 <__aeabi_fmul+0x14c>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e776      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	d104      	bne.n	8000f58 <__aeabi_fdiv+0x118>
 8000f4e:	024b      	lsls	r3, r1, #9
 8000f50:	f43f af4c 	beq.w	8000dec <__aeabi_fmul+0x114>
 8000f54:	4608      	mov	r0, r1
 8000f56:	e76e      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f5c:	bf18      	it	ne
 8000f5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f62:	d1ca      	bne.n	8000efa <__aeabi_fdiv+0xba>
 8000f64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f68:	f47f af5c 	bne.w	8000e24 <__aeabi_fmul+0x14c>
 8000f6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f70:	f47f af3c 	bne.w	8000dec <__aeabi_fmul+0x114>
 8000f74:	e75f      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f76:	bf00      	nop

08000f78 <__aeabi_f2iz>:
 8000f78:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f7c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f80:	d30f      	bcc.n	8000fa2 <__aeabi_f2iz+0x2a>
 8000f82:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f86:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f8a:	d90d      	bls.n	8000fa8 <__aeabi_f2iz+0x30>
 8000f8c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f94:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f98:	fa23 f002 	lsr.w	r0, r3, r2
 8000f9c:	bf18      	it	ne
 8000f9e:	4240      	negne	r0, r0
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr
 8000fa8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_f2iz+0x3a>
 8000fae:	0242      	lsls	r2, r0, #9
 8000fb0:	d105      	bne.n	8000fbe <__aeabi_f2iz+0x46>
 8000fb2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fb6:	bf08      	it	eq
 8000fb8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fbc:	4770      	bx	lr
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	4770      	bx	lr

08000fc4 <config>:
uint8_t bufferread1[2];
uint8_t bufferread2[2];
uint8_t config_regadd;
uint8_t config_data;

void config(void) {
 8000fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* SetUp measurement mode -------------------------------------------*/
	bufferread1[0] = 0;
 8000fc8:	2700      	movs	r7, #0
 8000fca:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80010c4 <config+0x100>
	bufferread1[1] = 0;
	bufferread2[0] = 0;
 8000fce:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 80010c8 <config+0x104>
	bufferread2[1] = 0;
	HAL_Delay(15);
 8000fd2:	200f      	movs	r0, #15
	bufferconf[0] = 0x11; // Select mode register
	bufferconf[1] = 0x80; //Continuous measurement mode
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 8000fd4:	2564      	movs	r5, #100	; 0x64
	bufferread1[0] = 0;
 8000fd6:	f889 7000 	strb.w	r7, [r9]
	bufferread1[1] = 0;
 8000fda:	f889 7001 	strb.w	r7, [r9, #1]
	bufferread2[0] = 0;
 8000fde:	f88b 7000 	strb.w	r7, [fp]
	bufferread2[1] = 0;
 8000fe2:	f88b 7001 	strb.w	r7, [fp, #1]
	HAL_Delay(15);
 8000fe6:	f000 fc1b 	bl	8001820 <HAL_Delay>
	bufferconf[0] = 0x11; // Select mode register
 8000fea:	f04f 0311 	mov.w	r3, #17
	bufferconf[1] = 0x80; //Continuous measurement mode
 8000fee:	f04f 0a80 	mov.w	sl, #128	; 0x80
	bufferconf[0] = 0x11; // Select mode register
 8000ff2:	4c33      	ldr	r4, [pc, #204]	; (80010c0 <config+0xfc>)
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 8000ff4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80010cc <config+0x108>
 8000ff8:	4622      	mov	r2, r4
	bufferconf[0] = 0x11; // Select mode register
 8000ffa:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 8000ffc:	211c      	movs	r1, #28
 8000ffe:	2302      	movs	r3, #2
 8001000:	9500      	str	r5, [sp, #0]
 8001002:	4640      	mov	r0, r8
	bufferconf[1] = 0x80; //Continuous measurement mode
 8001004:	f884 a001 	strb.w	sl, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 8001008:	f000 feda 	bl	8001dc0 <HAL_I2C_Master_Transmit>
    HAL_Delay(15);
 800100c:	200f      	movs	r0, #15
 800100e:	f000 fc07 	bl	8001820 <HAL_Delay>

    bufferconf[0] = 0x10; // Select mode register
 8001012:	f04f 0310 	mov.w	r3, #16
	bufferconf[1] = 0x1; //Continuous measurement mode
 8001016:	2601      	movs	r6, #1
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 8001018:	4622      	mov	r2, r4
    bufferconf[0] = 0x10; // Select mode register
 800101a:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 800101c:	211c      	movs	r1, #28
 800101e:	2302      	movs	r3, #2
 8001020:	9500      	str	r5, [sp, #0]
 8001022:	4640      	mov	r0, r8
	bufferconf[1] = 0x1; //Continuous measurement mode
 8001024:	7066      	strb	r6, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 8001026:	f000 fecb 	bl	8001dc0 <HAL_I2C_Master_Transmit>
    HAL_Delay(15);
 800102a:	200f      	movs	r0, #15
 800102c:	f000 fbf8 	bl	8001820 <HAL_Delay>

    bufferconf[0] = 0x11; // Select mode register
 8001030:	f04f 0311 	mov.w	r3, #17
	bufferconf[1] = 0x80; //Continuous measurement mode
 8001034:	f884 a001 	strb.w	sl, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 8001038:	f8df a094 	ldr.w	sl, [pc, #148]	; 80010d0 <config+0x10c>
 800103c:	4622      	mov	r2, r4
    bufferconf[0] = 0x11; // Select mode register
 800103e:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 8001040:	211c      	movs	r1, #28
 8001042:	2302      	movs	r3, #2
 8001044:	9500      	str	r5, [sp, #0]
 8001046:	4650      	mov	r0, sl
 8001048:	f000 feba 	bl	8001dc0 <HAL_I2C_Master_Transmit>
    HAL_Delay(15);
 800104c:	200f      	movs	r0, #15
 800104e:	f000 fbe7 	bl	8001820 <HAL_Delay>

    bufferconf[0] = 0x10; // Select mode register
 8001052:	f04f 0310 	mov.w	r3, #16
	bufferconf[1] = 0x1; //Continuous measurement mode
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 8001056:	4622      	mov	r2, r4
    bufferconf[0] = 0x10; // Select mode register
 8001058:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 800105a:	211c      	movs	r1, #28
 800105c:	2302      	movs	r3, #2
 800105e:	9500      	str	r5, [sp, #0]
 8001060:	4650      	mov	r0, sl
	bufferconf[1] = 0x1; //Continuous measurement mode
 8001062:	7066      	strb	r6, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 8001064:	f000 feac 	bl	8001dc0 <HAL_I2C_Master_Transmit>
    HAL_Delay(15);
 8001068:	200f      	movs	r0, #15
 800106a:	f000 fbd9 	bl	8001820 <HAL_Delay>

    bufferconf[0] = 0x07; // Select mode register
 800106e:	2307      	movs	r3, #7
    bufferconf[1] = 0x00; //Continuous measurement mode
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 1, 100); //writes the address of the WHO_AM_I register as a test
 8001070:	4622      	mov	r2, r4
    bufferconf[0] = 0x07; // Select mode register
 8001072:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 1, 100); //writes the address of the WHO_AM_I register as a test
 8001074:	9500      	str	r5, [sp, #0]
 8001076:	4633      	mov	r3, r6
 8001078:	211c      	movs	r1, #28
 800107a:	4650      	mov	r0, sl
    bufferconf[1] = 0x00; //Continuous measurement mode
 800107c:	7067      	strb	r7, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 1, 100); //writes the address of the WHO_AM_I register as a test
 800107e:	f000 fe9f 	bl	8001dc0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 1, 100);
 8001082:	4633      	mov	r3, r6
 8001084:	4622      	mov	r2, r4
 8001086:	211c      	movs	r1, #28
 8001088:	9500      	str	r5, [sp, #0]
 800108a:	4640      	mov	r0, r8
 800108c:	f000 fe98 	bl	8001dc0 <HAL_I2C_Master_Transmit>

    HAL_Delay(10);
 8001090:	200a      	movs	r0, #10
 8001092:	f000 fbc5 	bl	8001820 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, MAG_ADDR, (uint8_t*)&bufferread1, 1, 100); //if I2C communication is working properly, the read byte must always be 0xC4
 8001096:	4633      	mov	r3, r6
 8001098:	464a      	mov	r2, r9
 800109a:	9500      	str	r5, [sp, #0]
 800109c:	211c      	movs	r1, #28
 800109e:	4640      	mov	r0, r8
 80010a0:	f000 ff64 	bl	8001f6c <HAL_I2C_Master_Receive>
    HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, (uint8_t*)&bufferread2, 1, 100);
 80010a4:	9500      	str	r5, [sp, #0]
 80010a6:	4633      	mov	r3, r6
 80010a8:	465a      	mov	r2, fp
 80010aa:	211c      	movs	r1, #28
 80010ac:	4650      	mov	r0, sl
 80010ae:	f000 ff5d 	bl	8001f6c <HAL_I2C_Master_Receive>
    HAL_Delay(15);
 80010b2:	200f      	movs	r0, #15

}
 80010b4:	b003      	add	sp, #12
 80010b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_Delay(15);
 80010ba:	f000 bbb1 	b.w	8001820 <HAL_Delay>
 80010be:	bf00      	nop
 80010c0:	20000094 	.word	0x20000094
 80010c4:	2000009a 	.word	0x2000009a
 80010c8:	20000097 	.word	0x20000097
 80010cc:	20000100 	.word	0x20000100
 80010d0:	20000154 	.word	0x20000154

080010d4 <make_unit_vectors>:
	mag_read_valueL(field_L);
	mag_read_valueR(field_R);
}

float make_unit_vectors(int field[], float unit_vect[])
{
 80010d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d8:	1f04      	subs	r4, r0, #4
 80010da:	460e      	mov	r6, r1
 80010dc:	4625      	mov	r5, r4
	float vect_length = 0;
 80010de:	f04f 0a00 	mov.w	sl, #0
 80010e2:	f100 0708 	add.w	r7, r0, #8

	for(int i = 0; i < 3; i++) vect_length += pow(field[i], 2);
 80010e6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80010ea:	f7ff f981 	bl	80003f0 <__aeabi_i2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	f7ff f9e3 	bl	80004bc <__aeabi_dmul>
 80010f6:	4680      	mov	r8, r0
 80010f8:	4650      	mov	r0, sl
 80010fa:	4689      	mov	r9, r1
 80010fc:	f7ff f98a 	bl	8000414 <__aeabi_f2d>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4640      	mov	r0, r8
 8001106:	4649      	mov	r1, r9
 8001108:	f7ff f826 	bl	8000158 <__adddf3>
 800110c:	f7ff fc86 	bl	8000a1c <__aeabi_d2f>
 8001110:	42bd      	cmp	r5, r7
 8001112:	4682      	mov	sl, r0
 8001114:	d1e7      	bne.n	80010e6 <make_unit_vectors+0x12>
	vect_length = sqrt(vect_length);
 8001116:	f7ff f97d 	bl	8000414 <__aeabi_f2d>
 800111a:	f001 fc61 	bl	80029e0 <sqrt>
 800111e:	f7ff fc7d 	bl	8000a1c <__aeabi_d2f>
 8001122:	4607      	mov	r7, r0
 8001124:	3e04      	subs	r6, #4
	for(int i = 0; i < 3; i++) unit_vect[i] = field[i] / vect_length;
 8001126:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800112a:	f7ff fd81 	bl	8000c30 <__aeabi_i2f>
 800112e:	4639      	mov	r1, r7
 8001130:	f7ff fe86 	bl	8000e40 <__aeabi_fdiv>
 8001134:	42a5      	cmp	r5, r4
 8001136:	f846 0f04 	str.w	r0, [r6, #4]!
 800113a:	d1f4      	bne.n	8001126 <make_unit_vectors+0x52>

	return vect_length;
}
 800113c:	4638      	mov	r0, r7
 800113e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001144 <mag_read_valueL>:

void mag_read_valueL(int field[])
{
 8001144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bufferW[0] = 0x01; //address of registry containing the first measured value
 8001146:	2301      	movs	r3, #1
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferW, 1, 100);  //writes the register address into the slave device
 8001148:	2764      	movs	r7, #100	; 0x64
{
 800114a:	4605      	mov	r5, r0
	bufferW[0] = 0x01; //address of registry containing the first measured value
 800114c:	4a13      	ldr	r2, [pc, #76]	; (800119c <mag_read_valueL+0x58>)
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferW, 1, 100);  //writes the register address into the slave device
 800114e:	4e14      	ldr	r6, [pc, #80]	; (80011a0 <mag_read_valueL+0x5c>)
    HAL_Delay(2);
    HAL_I2C_Master_Receive(&hi2c1, MAG_ADDR, (uint8_t*)&bufferR, 6, 100); //reads 6 bytes of data from the slave device, starting at the registry which was previously written
 8001150:	4c14      	ldr	r4, [pc, #80]	; (80011a4 <mag_read_valueL+0x60>)
	bufferW[0] = 0x01; //address of registry containing the first measured value
 8001152:	7013      	strb	r3, [r2, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferW, 1, 100);  //writes the register address into the slave device
 8001154:	211c      	movs	r1, #28
 8001156:	9700      	str	r7, [sp, #0]
 8001158:	4630      	mov	r0, r6
 800115a:	f000 fe31 	bl	8001dc0 <HAL_I2C_Master_Transmit>
    HAL_Delay(2);
 800115e:	2002      	movs	r0, #2
 8001160:	f000 fb5e 	bl	8001820 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, MAG_ADDR, (uint8_t*)&bufferR, 6, 100); //reads 6 bytes of data from the slave device, starting at the registry which was previously written
 8001164:	4622      	mov	r2, r4
 8001166:	2306      	movs	r3, #6
 8001168:	211c      	movs	r1, #28
 800116a:	9700      	str	r7, [sp, #0]
 800116c:	4630      	mov	r0, r6
 800116e:	f000 fefd 	bl	8001f6c <HAL_I2C_Master_Receive>
    HAL_Delay(2);
 8001172:	2002      	movs	r0, #2
 8001174:	f000 fb54 	bl	8001820 <HAL_Delay>

    field[0] = (bufferR[1]|(bufferR[0] << 8)); //buffer[0] is MSB of x, buffer[1] is LSB of x
 8001178:	7822      	ldrb	r2, [r4, #0]
 800117a:	7863      	ldrb	r3, [r4, #1]
 800117c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001180:	602b      	str	r3, [r5, #0]
    field[1] = (bufferR[3]|(bufferR[2] << 8)); //buffer[2] is MSB of y, buffer[3] is LSB of y
 8001182:	78a2      	ldrb	r2, [r4, #2]
 8001184:	78e3      	ldrb	r3, [r4, #3]
 8001186:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800118a:	606b      	str	r3, [r5, #4]
    field[2] = (bufferR[5]|(bufferR[4] << 8)); //buffer[4] is MSB of z, buffer[5] is LSB of z
 800118c:	7922      	ldrb	r2, [r4, #4]
 800118e:	7963      	ldrb	r3, [r4, #5]
 8001190:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001194:	60ab      	str	r3, [r5, #8]
}
 8001196:	b003      	add	sp, #12
 8001198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119a:	bf00      	nop
 800119c:	200000e0 	.word	0x200000e0
 80011a0:	20000100 	.word	0x20000100
 80011a4:	200000da 	.word	0x200000da

080011a8 <mag_read_valueR>:
void mag_read_valueR(int field[])
{
 80011a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bufferW[0] = 0x01;
 80011aa:	2301      	movs	r3, #1
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferW, 1, 100);
 80011ac:	2764      	movs	r7, #100	; 0x64
{
 80011ae:	4605      	mov	r5, r0
	bufferW[0] = 0x01;
 80011b0:	4a13      	ldr	r2, [pc, #76]	; (8001200 <mag_read_valueR+0x58>)
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferW, 1, 100);
 80011b2:	4e14      	ldr	r6, [pc, #80]	; (8001204 <mag_read_valueR+0x5c>)
    HAL_Delay(2);
    HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, (uint8_t*)&bufferR, 6, 100);
 80011b4:	4c14      	ldr	r4, [pc, #80]	; (8001208 <mag_read_valueR+0x60>)
	bufferW[0] = 0x01;
 80011b6:	7013      	strb	r3, [r2, #0]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferW, 1, 100);
 80011b8:	211c      	movs	r1, #28
 80011ba:	9700      	str	r7, [sp, #0]
 80011bc:	4630      	mov	r0, r6
 80011be:	f000 fdff 	bl	8001dc0 <HAL_I2C_Master_Transmit>
    HAL_Delay(2);
 80011c2:	2002      	movs	r0, #2
 80011c4:	f000 fb2c 	bl	8001820 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, (uint8_t*)&bufferR, 6, 100);
 80011c8:	4622      	mov	r2, r4
 80011ca:	2306      	movs	r3, #6
 80011cc:	211c      	movs	r1, #28
 80011ce:	9700      	str	r7, [sp, #0]
 80011d0:	4630      	mov	r0, r6
 80011d2:	f000 fecb 	bl	8001f6c <HAL_I2C_Master_Receive>
    HAL_Delay(2);
 80011d6:	2002      	movs	r0, #2
 80011d8:	f000 fb22 	bl	8001820 <HAL_Delay>

    field[0] = (bufferR[1]|(bufferR[0] << 8));
 80011dc:	7822      	ldrb	r2, [r4, #0]
 80011de:	7863      	ldrb	r3, [r4, #1]
 80011e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011e4:	602b      	str	r3, [r5, #0]
    field[1] = (bufferR[3]|(bufferR[2] << 8));
 80011e6:	78a2      	ldrb	r2, [r4, #2]
 80011e8:	78e3      	ldrb	r3, [r4, #3]
 80011ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011ee:	606b      	str	r3, [r5, #4]
    field[2] = (bufferR[5]|(bufferR[4] << 8));
 80011f0:	7922      	ldrb	r2, [r4, #4]
 80011f2:	7963      	ldrb	r3, [r4, #5]
 80011f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011f8:	60ab      	str	r3, [r5, #8]
}
 80011fa:	b003      	add	sp, #12
 80011fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000e0 	.word	0x200000e0
 8001204:	20000154 	.word	0x20000154
 8001208:	200000da 	.word	0x200000da

0800120c <read_values_to_arrays>:
{
 800120c:	b510      	push	{r4, lr}
 800120e:	460c      	mov	r4, r1
	mag_read_valueL(field_L);
 8001210:	f7ff ff98 	bl	8001144 <mag_read_valueL>
	mag_read_valueR(field_R);
 8001214:	4620      	mov	r0, r4
}
 8001216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mag_read_valueR(field_R);
 800121a:	f7ff bfc5 	b.w	80011a8 <mag_read_valueR>

0800121e <reset_background>:

void reset_background(int field_L[], int field_R[], int bg_L[], int bg_R[], int end_of_startup)
{
 800121e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001222:	4605      	mov	r5, r0
 8001224:	460f      	mov	r7, r1
 8001226:	4690      	mov	r8, r2
  for(int j = 0; j <= end_of_startup; j++)
 8001228:	2400      	movs	r4, #0
{
 800122a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800122c:	f1a2 0904 	sub.w	r9, r2, #4
 8001230:	f1a3 0a04 	sub.w	sl, r3, #4
 8001234:	f100 0b0c 	add.w	fp, r0, #12
  for(int j = 0; j <= end_of_startup; j++)
 8001238:	42b4      	cmp	r4, r6
 800123a:	dd01      	ble.n	8001240 <reset_background+0x22>
        bg_L[i] += field_L[i];
        bg_R[i] += field_R[i];
      }
    }
  }
}
 800123c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(j == end_of_startup)
 8001240:	d111      	bne.n	8001266 <reset_background+0x48>
 8001242:	464b      	mov	r3, r9
 8001244:	4651      	mov	r1, sl
 8001246:	f108 0008 	add.w	r0, r8, #8
        bg_L[i] = bg_L[i] / end_of_startup;
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	fb92 f2f4 	sdiv	r2, r2, r4
 8001250:	f843 2f04 	str.w	r2, [r3, #4]!
        bg_R[i] = bg_R[i] / end_of_startup;
 8001254:	684a      	ldr	r2, [r1, #4]
      for(int i = 0; i < 3; i++)
 8001256:	4298      	cmp	r0, r3
        bg_R[i] = bg_R[i] / end_of_startup;
 8001258:	fb92 f2f4 	sdiv	r2, r2, r4
 800125c:	f841 2f04 	str.w	r2, [r1, #4]!
      for(int i = 0; i < 3; i++)
 8001260:	d1f3      	bne.n	800124a <reset_background+0x2c>
  for(int j = 0; j <= end_of_startup; j++)
 8001262:	3401      	adds	r4, #1
 8001264:	e7e8      	b.n	8001238 <reset_background+0x1a>
      read_values_to_arrays(field_L, field_R);
 8001266:	4639      	mov	r1, r7
 8001268:	4628      	mov	r0, r5
 800126a:	f7ff ffcf 	bl	800120c <read_values_to_arrays>
 800126e:	4629      	mov	r1, r5
 8001270:	46cc      	mov	ip, r9
 8001272:	46d6      	mov	lr, sl
 8001274:	463a      	mov	r2, r7
        if(field_L[i] > 65536 / 2) field_L[i] = field_L[i] - 65536;
 8001276:	680b      	ldr	r3, [r1, #0]
 8001278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800127c:	bfc4      	itt	gt
 800127e:	f5a3 3380 	subgt.w	r3, r3, #65536	; 0x10000
 8001282:	600b      	strgt	r3, [r1, #0]
        if(field_R[i] > 65536 / 2) field_R[i] = field_R[i] - 65536;
 8001284:	6813      	ldr	r3, [r2, #0]
 8001286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800128a:	bfc4      	itt	gt
 800128c:	f5a3 3380 	subgt.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	strgt	r3, [r2, #0]
        bg_L[i] += field_L[i];
 8001292:	f851 0b04 	ldr.w	r0, [r1], #4
 8001296:	f8dc 3004 	ldr.w	r3, [ip, #4]
      for(int i = 0; i < 3; i++)
 800129a:	4559      	cmp	r1, fp
        bg_L[i] += field_L[i];
 800129c:	4403      	add	r3, r0
 800129e:	f84c 3f04 	str.w	r3, [ip, #4]!
        bg_R[i] += field_R[i];
 80012a2:	f8de 0004 	ldr.w	r0, [lr, #4]
 80012a6:	f852 3b04 	ldr.w	r3, [r2], #4
 80012aa:	4418      	add	r0, r3
 80012ac:	f84e 0f04 	str.w	r0, [lr, #4]!
      for(int i = 0; i < 3; i++)
 80012b0:	d1e1      	bne.n	8001276 <reset_background+0x58>
 80012b2:	e7d6      	b.n	8001262 <reset_background+0x44>

080012b4 <average>:

float average(int array[], int k)
{
 80012b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b8:	4607      	mov	r7, r0
 80012ba:	460e      	mov	r6, r1
	float sum = 0;
	for(int i = 0; i < k; i++)
 80012bc:	2400      	movs	r4, #0
	float sum = 0;
 80012be:	2500      	movs	r5, #0
	{
		if(array[i] > 0 && array[i] < 65535) sum += array[i];
 80012c0:	f64f 78fd 	movw	r8, #65533	; 0xfffd
	for(int i = 0; i < k; i++)
 80012c4:	42b4      	cmp	r4, r6
 80012c6:	db08      	blt.n	80012da <average+0x26>
	}
	sum = sum / k;
 80012c8:	4630      	mov	r0, r6
 80012ca:	f7ff fcb1 	bl	8000c30 <__aeabi_i2f>
 80012ce:	4601      	mov	r1, r0
 80012d0:	4628      	mov	r0, r5
 80012d2:	f7ff fdb5 	bl	8000e40 <__aeabi_fdiv>
	return sum;
}
 80012d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(array[i] > 0 && array[i] < 65535) sum += array[i];
 80012da:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 80012de:	1e43      	subs	r3, r0, #1
 80012e0:	4543      	cmp	r3, r8
 80012e2:	d806      	bhi.n	80012f2 <average+0x3e>
 80012e4:	f7ff fca4 	bl	8000c30 <__aeabi_i2f>
 80012e8:	4601      	mov	r1, r0
 80012ea:	4628      	mov	r0, r5
 80012ec:	f7ff fbec 	bl	8000ac8 <__addsf3>
 80012f0:	4605      	mov	r5, r0
	for(int i = 0; i < k; i++)
 80012f2:	3401      	adds	r4, #1
 80012f4:	e7e6      	b.n	80012c4 <average+0x10>
	...

080012f8 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	2210      	movs	r2, #16
{
 80012fa:	b510      	push	{r4, lr}
 80012fc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	eb0d 0002 	add.w	r0, sp, r2
 8001302:	2100      	movs	r1, #0
 8001304:	f001 fb64 	bl	80029d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <MX_GPIO_Init+0x88>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800130a:	4c1e      	ldr	r4, [pc, #120]	; (8001384 <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800130e:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001310:	f042 0210 	orr.w	r2, r2, #16
 8001314:	619a      	str	r2, [r3, #24]
 8001316:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001318:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131c:	f002 0210 	and.w	r2, r2, #16
 8001320:	9200      	str	r2, [sp, #0]
 8001322:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001324:	699a      	ldr	r2, [r3, #24]
 8001326:	f042 0220 	orr.w	r2, r2, #32
 800132a:	619a      	str	r2, [r3, #24]
 800132c:	699a      	ldr	r2, [r3, #24]
 800132e:	f002 0220 	and.w	r2, r2, #32
 8001332:	9201      	str	r2, [sp, #4]
 8001334:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	699a      	ldr	r2, [r3, #24]
 8001338:	f042 0208 	orr.w	r2, r2, #8
 800133c:	619a      	str	r2, [r3, #24]
 800133e:	699a      	ldr	r2, [r3, #24]
 8001340:	f002 0208 	and.w	r2, r2, #8
 8001344:	9202      	str	r2, [sp, #8]
 8001346:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	699a      	ldr	r2, [r3, #24]
 800134a:	f042 0204 	orr.w	r2, r2, #4
 800134e:	619a      	str	r2, [r3, #24]
 8001350:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	9303      	str	r3, [sp, #12]
 800135a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800135c:	f000 fbae 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001364:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001370:	a904      	add	r1, sp, #16
 8001372:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001376:	f000 fac1 	bl	80018fc <HAL_GPIO_Init>

}
 800137a:	b008      	add	sp, #32
 800137c:	bd10      	pop	{r4, pc}
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	40011000 	.word	0x40011000

08001388 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001388:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800138a:	480c      	ldr	r0, [pc, #48]	; (80013bc <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_I2C1_Init+0x38>)
 800138e:	f8df e034 	ldr.w	lr, [pc, #52]	; 80013c4 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001392:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8001396:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800139a:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139c:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800139e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013a0:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013a4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013aa:	f000 fc89 	bl	8001cc0 <HAL_I2C_Init>
 80013ae:	b118      	cbz	r0, 80013b8 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 80013b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80013b4:	f000 b93e 	b.w	8001634 <Error_Handler>
 80013b8:	bd08      	pop	{r3, pc}
 80013ba:	bf00      	nop
 80013bc:	20000100 	.word	0x20000100
 80013c0:	40005400 	.word	0x40005400
 80013c4:	00061a80 	.word	0x00061a80

080013c8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013c8:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80013ca:	480c      	ldr	r0, [pc, #48]	; (80013fc <MX_I2C2_Init+0x34>)
  hi2c2.Init.ClockSpeed = 400000;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_I2C2_Init+0x38>)
 80013ce:	f8df e034 	ldr.w	lr, [pc, #52]	; 8001404 <MX_I2C2_Init+0x3c>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 400000;
 80013d6:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013da:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013dc:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013de:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013e0:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e2:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013e4:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e6:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013ea:	f000 fc69 	bl	8001cc0 <HAL_I2C_Init>
 80013ee:	b118      	cbz	r0, 80013f8 <MX_I2C2_Init+0x30>
  {
    Error_Handler();
  }

}
 80013f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80013f4:	f000 b91e 	b.w	8001634 <Error_Handler>
 80013f8:	bd08      	pop	{r3, pc}
 80013fa:	bf00      	nop
 80013fc:	20000154 	.word	0x20000154
 8001400:	40005800 	.word	0x40005800
 8001404:	00061a80 	.word	0x00061a80

08001408 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	2210      	movs	r2, #16
{
 800140a:	b510      	push	{r4, lr}
 800140c:	4604      	mov	r4, r0
 800140e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	eb0d 0002 	add.w	r0, sp, r2
 8001414:	2100      	movs	r1, #0
 8001416:	f001 fadb 	bl	80029d0 <memset>
  if(i2cHandle->Instance==I2C1)
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <HAL_I2C_MspInit+0x9c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d11e      	bne.n	8001460 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4c21      	ldr	r4, [pc, #132]	; (80014a8 <HAL_I2C_MspInit+0xa0>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	4820      	ldr	r0, [pc, #128]	; (80014ac <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	61a3      	str	r3, [r4, #24]
 8001430:	69a3      	ldr	r3, [r4, #24]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800143a:	23c0      	movs	r3, #192	; 0xc0
 800143c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800143e:	2312      	movs	r3, #18
 8001440:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f000 fa59 	bl	80018fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800144a:	69e3      	ldr	r3, [r4, #28]
 800144c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001450:	61e3      	str	r3, [r4, #28]
 8001452:	69e3      	ldr	r3, [r4, #28]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800145c:	b008      	add	sp, #32
 800145e:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 8001460:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <HAL_I2C_MspInit+0xa8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d1fa      	bne.n	800145c <HAL_I2C_MspInit+0x54>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4c10      	ldr	r4, [pc, #64]	; (80014a8 <HAL_I2C_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	480f      	ldr	r0, [pc, #60]	; (80014ac <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	f043 0308 	orr.w	r3, r3, #8
 8001472:	61a3      	str	r3, [r4, #24]
 8001474:	69a3      	ldr	r3, [r4, #24]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	9302      	str	r3, [sp, #8]
 800147c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800147e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001482:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001484:	2312      	movs	r3, #18
 8001486:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f000 fa36 	bl	80018fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001490:	69e3      	ldr	r3, [r4, #28]
 8001492:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001496:	61e3      	str	r3, [r4, #28]
 8001498:	69e3      	ldr	r3, [r4, #28]
 800149a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149e:	9303      	str	r3, [sp, #12]
 80014a0:	9b03      	ldr	r3, [sp, #12]
}
 80014a2:	e7db      	b.n	800145c <HAL_I2C_MspInit+0x54>
 80014a4:	40005400 	.word	0x40005400
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	40005800 	.word	0x40005800

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b510      	push	{r4, lr}
 80014b6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b8:	2228      	movs	r2, #40	; 0x28
 80014ba:	2100      	movs	r1, #0
 80014bc:	a806      	add	r0, sp, #24
 80014be:	f001 fa87 	bl	80029d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c2:	2100      	movs	r1, #0
 80014c4:	2214      	movs	r2, #20
 80014c6:	a801      	add	r0, sp, #4
 80014c8:	f001 fa82 	bl	80029d0 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d0:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014dc:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014de:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014e2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e4:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e6:	f000 fec3 	bl	8002270 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ea:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f4:	4621      	mov	r1, r4
 80014f6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f8:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fa:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fc:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fe:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001500:	f001 f87e 	bl	8002600 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001504:	b010      	add	sp, #64	; 0x40
 8001506:	bd10      	pop	{r4, pc}

08001508 <main>:
{
 8001508:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_Init();
 800150c:	f000 f964 	bl	80017d8 <HAL_Init>
  SystemClock_Config();
 8001510:	f7ff ffd0 	bl	80014b4 <SystemClock_Config>
  MX_GPIO_Init();
 8001514:	f7ff fef0 	bl	80012f8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001518:	f7ff ff56 	bl	80013c8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800151c:	f000 f8de 	bl	80016dc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001520:	f7ff ff32 	bl	8001388 <MX_I2C1_Init>
  config();
 8001524:	f7ff fd4e 	bl	8000fc4 <config>
  reset_background(field_L, field_R, bg_L, bg_R, 100);
 8001528:	2364      	movs	r3, #100	; 0x64
 800152a:	4a35      	ldr	r2, [pc, #212]	; (8001600 <main+0xf8>)
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	4935      	ldr	r1, [pc, #212]	; (8001604 <main+0xfc>)
 8001530:	4b35      	ldr	r3, [pc, #212]	; (8001608 <main+0x100>)
 8001532:	4836      	ldr	r0, [pc, #216]	; (800160c <main+0x104>)
 8001534:	f7ff fe73 	bl	800121e <reset_background>
	read_values_to_arrays(field_L, field_R);
 8001538:	4e32      	ldr	r6, [pc, #200]	; (8001604 <main+0xfc>)
 800153a:	4f34      	ldr	r7, [pc, #208]	; (800160c <main+0x104>)
	strsum_L[k] = str_L; //adds strength of magnetic field to array for average calculation
 800153c:	4d34      	ldr	r5, [pc, #208]	; (8001610 <main+0x108>)
	read_values_to_arrays(field_L, field_R);
 800153e:	4631      	mov	r1, r6
 8001540:	4638      	mov	r0, r7
 8001542:	f7ff fe63 	bl	800120c <read_values_to_arrays>
	for(int i = 0; i < 3; i++)
 8001546:	2300      	movs	r3, #0
 8001548:	4930      	ldr	r1, [pc, #192]	; (800160c <main+0x104>)
 800154a:	4a2e      	ldr	r2, [pc, #184]	; (8001604 <main+0xfc>)
	  field_L[i] -= bg_L[i]; //accounts for the background magnetic fields
 800154c:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8001600 <main+0xf8>
	  field_R[i] -= bg_R[i];
 8001550:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8001608 <main+0x100>
	  if(field_L[i] > 65536 / 2) field_L[i] = field_L[i] - 65536; //by default, negative magnetic fields are represented as decreasing from maximum 16 bit number 65535
 8001554:	6808      	ldr	r0, [r1, #0]
	  field_L[i] -= bg_L[i]; //accounts for the background magnetic fields
 8001556:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
	  if(field_L[i] > 65536 / 2) field_L[i] = field_L[i] - 65536; //by default, negative magnetic fields are represented as decreasing from maximum 16 bit number 65535
 800155a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800155e:	bfc4      	itt	gt
 8001560:	f5a0 3080 	subgt.w	r0, r0, #65536	; 0x10000
 8001564:	6008      	strgt	r0, [r1, #0]
	  if(field_R[i] > 65536 / 2) field_R[i] = field_R[i] - 65536; //changes the representation of negative magnetic fields to negative values starting at zero
 8001566:	6810      	ldr	r0, [r2, #0]
 8001568:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800156c:	bfc4      	itt	gt
 800156e:	f5a0 3080 	subgt.w	r0, r0, #65536	; 0x10000
 8001572:	6010      	strgt	r0, [r2, #0]
	  field_L[i] -= bg_L[i]; //accounts for the background magnetic fields
 8001574:	6808      	ldr	r0, [r1, #0]
 8001576:	1b00      	subs	r0, r0, r4
 8001578:	f841 0b04 	str.w	r0, [r1], #4
	  field_R[i] -= bg_R[i];
 800157c:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8001580:	6810      	ldr	r0, [r2, #0]
	for(int i = 0; i < 3; i++)
 8001582:	3301      	adds	r3, #1
	  field_R[i] -= bg_R[i];
 8001584:	1b00      	subs	r0, r0, r4
	for(int i = 0; i < 3; i++)
 8001586:	2b03      	cmp	r3, #3
	  field_R[i] -= bg_R[i];
 8001588:	f842 0b04 	str.w	r0, [r2], #4
	for(int i = 0; i < 3; i++)
 800158c:	d1e2      	bne.n	8001554 <main+0x4c>
	str_L = make_unit_vectors(field_L, vect_L); //creates array of directional unit vectors and outputs strength of magnetic field
 800158e:	4921      	ldr	r1, [pc, #132]	; (8001614 <main+0x10c>)
 8001590:	4638      	mov	r0, r7
 8001592:	f7ff fd9f 	bl	80010d4 <make_unit_vectors>
 8001596:	f8df a094 	ldr.w	sl, [pc, #148]	; 800162c <main+0x124>
	str_R = make_unit_vectors(field_R, vect_R);
 800159a:	491f      	ldr	r1, [pc, #124]	; (8001618 <main+0x110>)
	str_L = make_unit_vectors(field_L, vect_L); //creates array of directional unit vectors and outputs strength of magnetic field
 800159c:	f8ca 0000 	str.w	r0, [sl]
	str_R = make_unit_vectors(field_R, vect_R);
 80015a0:	4630      	mov	r0, r6
 80015a2:	f7ff fd97 	bl	80010d4 <make_unit_vectors>
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <main+0x114>)
 80015a8:	4681      	mov	r9, r0
 80015aa:	6018      	str	r0, [r3, #0]
	strsum_L[k] = str_L; //adds strength of magnetic field to array for average calculation
 80015ac:	f8da 0000 	ldr.w	r0, [sl]
 80015b0:	f7ff fce2 	bl	8000f78 <__aeabi_f2iz>
 80015b4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001630 <main+0x128>
 80015b8:	f8d8 4000 	ldr.w	r4, [r8]
 80015bc:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	strsum_R[k] = str_R;
 80015c0:	4648      	mov	r0, r9
 80015c2:	f7ff fcd9 	bl	8000f78 <__aeabi_f2iz>
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <main+0x118>)
	avgstr_L = average(strsum_L, 20); //calculates the average of the most recent 20 field strength measurements
 80015c8:	2114      	movs	r1, #20
	strsum_R[k] = str_R;
 80015ca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	k++;
 80015ce:	3401      	adds	r4, #1
	if(k >= 20) k = 0;
 80015d0:	2c13      	cmp	r4, #19
 80015d2:	bfc8      	it	gt
 80015d4:	2300      	movgt	r3, #0
	avgstr_L = average(strsum_L, 20); //calculates the average of the most recent 20 field strength measurements
 80015d6:	4628      	mov	r0, r5
	if(k >= 20) k = 0;
 80015d8:	bfcc      	ite	gt
 80015da:	f8c8 3000 	strgt.w	r3, [r8]
	k++;
 80015de:	f8c8 4000 	strle.w	r4, [r8]
	avgstr_L = average(strsum_L, 20); //calculates the average of the most recent 20 field strength measurements
 80015e2:	f7ff fe67 	bl	80012b4 <average>
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <main+0x11c>)
	avgstr_R = average(strsum_R, 20);
 80015e8:	2114      	movs	r1, #20
	avgstr_L = average(strsum_L, 20); //calculates the average of the most recent 20 field strength measurements
 80015ea:	6018      	str	r0, [r3, #0]
	avgstr_R = average(strsum_R, 20);
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <main+0x118>)
 80015ee:	f7ff fe61 	bl	80012b4 <average>
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <main+0x120>)
 80015f4:	6018      	str	r0, [r3, #0]
	HAL_Delay(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f000 f912 	bl	8001820 <HAL_Delay>
	read_values_to_arrays(field_L, field_R);
 80015fc:	e79f      	b.n	800153e <main+0x36>
 80015fe:	bf00      	nop
 8001600:	200000f4 	.word	0x200000f4
 8001604:	200000e8 	.word	0x200000e8
 8001608:	200000c0 	.word	0x200000c0
 800160c:	2000009c 	.word	0x2000009c
 8001610:	200016ac 	.word	0x200016ac
 8001614:	200000b4 	.word	0x200000b4
 8001618:	200000a8 	.word	0x200000a8
 800161c:	200000cc 	.word	0x200000cc
 8001620:	20001658 	.word	0x20001658
 8001624:	200016a8 	.word	0x200016a8
 8001628:	200001a8 	.word	0x200001a8
 800162c:	200000d0 	.word	0x200000d0
 8001630:	20000090 	.word	0x20000090

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	4770      	bx	lr
	...

08001638 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_MspInit+0x3c>)
{
 800163a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800163c:	699a      	ldr	r2, [r3, #24]
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	619a      	str	r2, [r3, #24]
 8001644:	699a      	ldr	r2, [r3, #24]
 8001646:	f002 0201 	and.w	r2, r2, #1
 800164a:	9200      	str	r2, [sp, #0]
 800164c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	69da      	ldr	r2, [r3, #28]
 8001650:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001654:	61da      	str	r2, [r3, #28]
 8001656:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001662:	6853      	ldr	r3, [r2, #4]
 8001664:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001668:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800166c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	b002      	add	sp, #8
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	40010000 	.word	0x40010000

0800167c <NMI_Handler>:
 800167c:	4770      	bx	lr

0800167e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167e:	e7fe      	b.n	800167e <HardFault_Handler>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	e7fe      	b.n	8001680 <MemManage_Handler>

08001682 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001682:	e7fe      	b.n	8001682 <BusFault_Handler>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	e7fe      	b.n	8001684 <UsageFault_Handler>

08001686 <SVC_Handler>:
 8001686:	4770      	bx	lr

08001688 <DebugMon_Handler>:
 8001688:	4770      	bx	lr

0800168a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168a:	4770      	bx	lr

0800168c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168c:	f000 b8b6 	b.w	80017fc <HAL_IncTick>

08001690 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <SystemInit+0x40>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	f042 0201 	orr.w	r2, r2, #1
 8001698:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <SystemInit+0x44>)
 800169e:	400a      	ands	r2, r1
 80016a0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80016a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016ac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016b4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80016bc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80016be:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80016c2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80016c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <SystemInit+0x48>)
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	f8ff0000 	.word	0xf8ff0000
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016dc:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_EVEN;
 80016de:	f44f 6280 	mov.w	r2, #1024	; 0x400
  huart1.Init.BaudRate = 115200;
 80016e2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 80016e6:	480a      	ldr	r0, [pc, #40]	; (8001710 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <MX_USART1_UART_Init+0x38>)
  huart1.Init.Parity = UART_PARITY_EVEN;
 80016ea:	6102      	str	r2, [r0, #16]
  huart1.Init.BaudRate = 115200;
 80016ec:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016f0:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016f4:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016f8:	60c3      	str	r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016fe:	f001 f8ef 	bl	80028e0 <HAL_UART_Init>
 8001702:	b118      	cbz	r0, 800170c <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8001704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001708:	f7ff bf94 	b.w	8001634 <Error_Handler>
 800170c:	bd08      	pop	{r3, pc}
 800170e:	bf00      	nop
 8001710:	200016fc 	.word	0x200016fc
 8001714:	40013800 	.word	0x40013800

08001718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001718:	b510      	push	{r4, lr}
 800171a:	4604      	mov	r4, r0
 800171c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	2210      	movs	r2, #16
 8001720:	2100      	movs	r1, #0
 8001722:	a802      	add	r0, sp, #8
 8001724:	f001 f954 	bl	80029d0 <memset>
  if(uartHandle->Instance==USART1)
 8001728:	6822      	ldr	r2, [r4, #0]
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_UART_MspInit+0x70>)
 800172c:	429a      	cmp	r2, r3
 800172e:	d128      	bne.n	8001782 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001730:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001734:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001738:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800173c:	619a      	str	r2, [r3, #24]
 800173e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	4812      	ldr	r0, [pc, #72]	; (800178c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001742:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001746:	9200      	str	r2, [sp, #0]
 8001748:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	699a      	ldr	r2, [r3, #24]
 800174c:	f042 0204 	orr.w	r2, r2, #4
 8001750:	619a      	str	r2, [r3, #24]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800175c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001760:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f000 f8c7 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800176e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001772:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001774:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	a902      	add	r1, sp, #8
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f000 f8bd 	bl	80018fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001782:	b006      	add	sp, #24
 8001784:	bd10      	pop	{r4, pc}
 8001786:	bf00      	nop
 8001788:	40013800 	.word	0x40013800
 800178c:	40010800 	.word	0x40010800

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_InitTick+0x3c>)
{
 8001794:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001796:	7818      	ldrb	r0, [r3, #0]
 8001798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179c:	fbb3 f3f0 	udiv	r3, r3, r0
 80017a0:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <HAL_InitTick+0x40>)
 80017a2:	6810      	ldr	r0, [r2, #0]
 80017a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80017a8:	f000 f892 	bl	80018d0 <HAL_SYSTICK_Config>
 80017ac:	4604      	mov	r4, r0
 80017ae:	b958      	cbnz	r0, 80017c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b0:	2d0f      	cmp	r5, #15
 80017b2:	d809      	bhi.n	80017c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	4602      	mov	r2, r0
 80017b6:	4629      	mov	r1, r5
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 f854 	bl	8001868 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <HAL_InitTick+0x44>)
 80017c2:	4620      	mov	r0, r4
 80017c4:	601d      	str	r5, [r3, #0]
 80017c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80017c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80017ca:	bd38      	pop	{r3, r4, r5, pc}
 80017cc:	20000004 	.word	0x20000004
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000008 	.word	0x20000008

080017d8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d8:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <HAL_Init+0x20>)
{
 80017da:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017dc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017de:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e0:	f043 0310 	orr.w	r3, r3, #16
 80017e4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e6:	f000 f82d 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff ffd0 	bl	8001790 <HAL_InitTick>
  HAL_MspInit();
 80017f0:	f7ff ff22 	bl	8001638 <HAL_MspInit>
}
 80017f4:	2000      	movs	r0, #0
 80017f6:	bd08      	pop	{r3, pc}
 80017f8:	40022000 	.word	0x40022000

080017fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80017fc:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_IncTick+0x10>)
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <HAL_IncTick+0x14>)
 8001800:	6811      	ldr	r1, [r2, #0]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	440b      	add	r3, r1
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000173c 	.word	0x2000173c
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001814:	4b01      	ldr	r3, [pc, #4]	; (800181c <HAL_GetTick+0x8>)
 8001816:	6818      	ldr	r0, [r3, #0]
}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	2000173c 	.word	0x2000173c

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b538      	push	{r3, r4, r5, lr}
 8001822:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff fff6 	bl	8001814 <HAL_GetTick>
 8001828:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800182c:	bf1e      	ittt	ne
 800182e:	4b04      	ldrne	r3, [pc, #16]	; (8001840 <HAL_Delay+0x20>)
 8001830:	781b      	ldrbne	r3, [r3, #0]
 8001832:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	1b40      	subs	r0, r0, r5
 800183a:	4284      	cmp	r4, r0
 800183c:	d8fa      	bhi.n	8001834 <HAL_Delay+0x14>
  {
  }
}
 800183e:	bd38      	pop	{r3, r4, r5, pc}
 8001840:	20000004 	.word	0x20000004

08001844 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001846:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800184a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	0c1b      	lsrs	r3, r3, #16
 8001856:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800185a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800185e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001860:	60d3      	str	r3, [r2, #12]
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186a:	b530      	push	{r4, r5, lr}
 800186c:	68dc      	ldr	r4, [r3, #12]
 800186e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001872:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	2b04      	cmp	r3, #4
 800187a:	bf28      	it	cs
 800187c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001884:	bf98      	it	ls
 8001886:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	fa05 f303 	lsl.w	r3, r5, r3
 800188c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001890:	bf88      	it	hi
 8001892:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4019      	ands	r1, r3
 8001896:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	fa05 f404 	lsl.w	r4, r5, r4
 800189c:	3c01      	subs	r4, #1
 800189e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80018a0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a2:	ea42 0201 	orr.w	r2, r2, r1
 80018a6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018aa:	bfaf      	iteee	ge
 80018ac:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	4b06      	ldrlt	r3, [pc, #24]	; (80018cc <HAL_NVIC_SetPriority+0x64>)
 80018b2:	f000 000f 	andlt.w	r0, r0, #15
 80018b6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	bfa5      	ittet	ge
 80018ba:	b2d2      	uxtbge	r2, r2
 80018bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80018c6:	bd30      	pop	{r4, r5, pc}
 80018c8:	e000ed00 	.word	0xe000ed00
 80018cc:	e000ed14 	.word	0xe000ed14

080018d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	3801      	subs	r0, #1
 80018d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80018d6:	d20a      	bcs.n	80018ee <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001900:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001902:	4616      	mov	r6, r2
 8001904:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001906:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001aac <HAL_GPIO_Init+0x1b0>
 800190a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001ab0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800190e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001914:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001918:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800191c:	45a0      	cmp	r8, r4
 800191e:	d17f      	bne.n	8001a20 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001920:	684d      	ldr	r5, [r1, #4]
 8001922:	2d12      	cmp	r5, #18
 8001924:	f000 80af 	beq.w	8001a86 <HAL_GPIO_Init+0x18a>
 8001928:	f200 8088 	bhi.w	8001a3c <HAL_GPIO_Init+0x140>
 800192c:	2d02      	cmp	r5, #2
 800192e:	f000 80a7 	beq.w	8001a80 <HAL_GPIO_Init+0x184>
 8001932:	d87c      	bhi.n	8001a2e <HAL_GPIO_Init+0x132>
 8001934:	2d00      	cmp	r5, #0
 8001936:	f000 808e 	beq.w	8001a56 <HAL_GPIO_Init+0x15a>
 800193a:	2d01      	cmp	r5, #1
 800193c:	f000 809e 	beq.w	8001a7c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001940:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001944:	2cff      	cmp	r4, #255	; 0xff
 8001946:	bf93      	iteet	ls
 8001948:	4682      	movls	sl, r0
 800194a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800194e:	3d08      	subhi	r5, #8
 8001950:	f8d0 b000 	ldrls.w	fp, [r0]
 8001954:	bf92      	itee	ls
 8001956:	00b5      	lslls	r5, r6, #2
 8001958:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800195c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800195e:	fa09 f805 	lsl.w	r8, r9, r5
 8001962:	ea2b 0808 	bic.w	r8, fp, r8
 8001966:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800196a:	bf88      	it	hi
 800196c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001970:	ea48 0505 	orr.w	r5, r8, r5
 8001974:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001978:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800197c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001980:	d04e      	beq.n	8001a20 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001982:	4d47      	ldr	r5, [pc, #284]	; (8001aa0 <HAL_GPIO_Init+0x1a4>)
 8001984:	4f46      	ldr	r7, [pc, #280]	; (8001aa0 <HAL_GPIO_Init+0x1a4>)
 8001986:	69ad      	ldr	r5, [r5, #24]
 8001988:	f026 0803 	bic.w	r8, r6, #3
 800198c:	f045 0501 	orr.w	r5, r5, #1
 8001990:	61bd      	str	r5, [r7, #24]
 8001992:	69bd      	ldr	r5, [r7, #24]
 8001994:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001998:	f005 0501 	and.w	r5, r5, #1
 800199c:	9501      	str	r5, [sp, #4]
 800199e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80019a2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019a6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80019a8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80019ac:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80019b0:	fa09 f90b 	lsl.w	r9, r9, fp
 80019b4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019b8:	4d3a      	ldr	r5, [pc, #232]	; (8001aa4 <HAL_GPIO_Init+0x1a8>)
 80019ba:	42a8      	cmp	r0, r5
 80019bc:	d068      	beq.n	8001a90 <HAL_GPIO_Init+0x194>
 80019be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019c2:	42a8      	cmp	r0, r5
 80019c4:	d066      	beq.n	8001a94 <HAL_GPIO_Init+0x198>
 80019c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019ca:	42a8      	cmp	r0, r5
 80019cc:	d064      	beq.n	8001a98 <HAL_GPIO_Init+0x19c>
 80019ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019d2:	42a8      	cmp	r0, r5
 80019d4:	bf0c      	ite	eq
 80019d6:	2503      	moveq	r5, #3
 80019d8:	2504      	movne	r5, #4
 80019da:	fa05 f50b 	lsl.w	r5, r5, fp
 80019de:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80019e2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019e6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80019ec:	bf14      	ite	ne
 80019ee:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019f0:	43a5      	biceq	r5, r4
 80019f2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80019fa:	bf14      	ite	ne
 80019fc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019fe:	43a5      	biceq	r5, r4
 8001a00:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a02:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a04:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a08:	bf14      	ite	ne
 8001a0a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a0c:	43a5      	biceq	r5, r4
 8001a0e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a10:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a12:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a16:	bf14      	ite	ne
 8001a18:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a1a:	ea25 0404 	biceq.w	r4, r5, r4
 8001a1e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001a20:	3601      	adds	r6, #1
 8001a22:	2e10      	cmp	r6, #16
 8001a24:	f47f af73 	bne.w	800190e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001a28:	b003      	add	sp, #12
 8001a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001a2e:	2d03      	cmp	r5, #3
 8001a30:	d022      	beq.n	8001a78 <HAL_GPIO_Init+0x17c>
 8001a32:	2d11      	cmp	r5, #17
 8001a34:	d184      	bne.n	8001940 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a36:	68ca      	ldr	r2, [r1, #12]
 8001a38:	3204      	adds	r2, #4
          break;
 8001a3a:	e781      	b.n	8001940 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001a3c:	4f1a      	ldr	r7, [pc, #104]	; (8001aa8 <HAL_GPIO_Init+0x1ac>)
 8001a3e:	42bd      	cmp	r5, r7
 8001a40:	d009      	beq.n	8001a56 <HAL_GPIO_Init+0x15a>
 8001a42:	d812      	bhi.n	8001a6a <HAL_GPIO_Init+0x16e>
 8001a44:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001ab4 <HAL_GPIO_Init+0x1b8>
 8001a48:	454d      	cmp	r5, r9
 8001a4a:	d004      	beq.n	8001a56 <HAL_GPIO_Init+0x15a>
 8001a4c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001a50:	454d      	cmp	r5, r9
 8001a52:	f47f af75 	bne.w	8001940 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a56:	688a      	ldr	r2, [r1, #8]
 8001a58:	b1c2      	cbz	r2, 8001a8c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a5a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001a5c:	bf0c      	ite	eq
 8001a5e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001a62:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a66:	2208      	movs	r2, #8
 8001a68:	e76a      	b.n	8001940 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001a6a:	4575      	cmp	r5, lr
 8001a6c:	d0f3      	beq.n	8001a56 <HAL_GPIO_Init+0x15a>
 8001a6e:	4565      	cmp	r5, ip
 8001a70:	d0f1      	beq.n	8001a56 <HAL_GPIO_Init+0x15a>
 8001a72:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001ab8 <HAL_GPIO_Init+0x1bc>
 8001a76:	e7eb      	b.n	8001a50 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a78:	2200      	movs	r2, #0
 8001a7a:	e761      	b.n	8001940 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a7c:	68ca      	ldr	r2, [r1, #12]
          break;
 8001a7e:	e75f      	b.n	8001940 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a80:	68ca      	ldr	r2, [r1, #12]
 8001a82:	3208      	adds	r2, #8
          break;
 8001a84:	e75c      	b.n	8001940 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a86:	68ca      	ldr	r2, [r1, #12]
 8001a88:	320c      	adds	r2, #12
          break;
 8001a8a:	e759      	b.n	8001940 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	e757      	b.n	8001940 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a90:	2500      	movs	r5, #0
 8001a92:	e7a2      	b.n	80019da <HAL_GPIO_Init+0xde>
 8001a94:	2501      	movs	r5, #1
 8001a96:	e7a0      	b.n	80019da <HAL_GPIO_Init+0xde>
 8001a98:	2502      	movs	r5, #2
 8001a9a:	e79e      	b.n	80019da <HAL_GPIO_Init+0xde>
 8001a9c:	40010400 	.word	0x40010400
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010800 	.word	0x40010800
 8001aa8:	10210000 	.word	0x10210000
 8001aac:	10310000 	.word	0x10310000
 8001ab0:	10320000 	.word	0x10320000
 8001ab4:	10110000 	.word	0x10110000
 8001ab8:	10220000 	.word	0x10220000

08001abc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001abc:	b10a      	cbz	r2, 8001ac2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001abe:	6101      	str	r1, [r0, #16]
 8001ac0:	4770      	bx	lr
 8001ac2:	0409      	lsls	r1, r1, #16
 8001ac4:	e7fb      	b.n	8001abe <HAL_GPIO_WritePin+0x2>

08001ac6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ac6:	6802      	ldr	r2, [r0, #0]
 8001ac8:	6953      	ldr	r3, [r2, #20]
 8001aca:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001ace:	d00d      	beq.n	8001aec <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001ad4:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001ad6:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001ad8:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001ada:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001ae4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001ae8:	2001      	movs	r0, #1
 8001aea:	4770      	bx	lr
  }
  return HAL_OK;
 8001aec:	4618      	mov	r0, r3
}
 8001aee:	4770      	bx	lr

08001af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001af4:	4604      	mov	r4, r0
 8001af6:	4617      	mov	r7, r2
 8001af8:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001afa:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001afe:	b28e      	uxth	r6, r1
 8001b00:	6825      	ldr	r5, [r4, #0]
 8001b02:	f1b8 0f01 	cmp.w	r8, #1
 8001b06:	bf0c      	ite	eq
 8001b08:	696b      	ldreq	r3, [r5, #20]
 8001b0a:	69ab      	ldrne	r3, [r5, #24]
 8001b0c:	ea36 0303 	bics.w	r3, r6, r3
 8001b10:	bf14      	ite	ne
 8001b12:	2001      	movne	r0, #1
 8001b14:	2000      	moveq	r0, #0
 8001b16:	b908      	cbnz	r0, 8001b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b1c:	696b      	ldr	r3, [r5, #20]
 8001b1e:	055a      	lsls	r2, r3, #21
 8001b20:	d512      	bpl.n	8001b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b22:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001b24:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b2c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001b30:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001b32:	2304      	movs	r3, #4
 8001b34:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b36:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001b38:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b3a:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001b3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001b40:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001b48:	1c7b      	adds	r3, r7, #1
 8001b4a:	d0d9      	beq.n	8001b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001b4c:	b94f      	cbnz	r7, 8001b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b4e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001b50:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b52:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001b54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001b58:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001b62:	f7ff fe57 	bl	8001814 <HAL_GetTick>
 8001b66:	eba0 0009 	sub.w	r0, r0, r9
 8001b6a:	4287      	cmp	r7, r0
 8001b6c:	d2c8      	bcs.n	8001b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001b6e:	e7ee      	b.n	8001b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001b70 <I2C_WaitOnFlagUntilTimeout>:
{
 8001b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b74:	4604      	mov	r4, r0
 8001b76:	4690      	mov	r8, r2
 8001b78:	461f      	mov	r7, r3
 8001b7a:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001b7c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001b80:	b28d      	uxth	r5, r1
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	f1b9 0f01 	cmp.w	r9, #1
 8001b88:	bf0c      	ite	eq
 8001b8a:	695b      	ldreq	r3, [r3, #20]
 8001b8c:	699b      	ldrne	r3, [r3, #24]
 8001b8e:	ea35 0303 	bics.w	r3, r5, r3
 8001b92:	bf0c      	ite	eq
 8001b94:	2301      	moveq	r3, #1
 8001b96:	2300      	movne	r3, #0
 8001b98:	4543      	cmp	r3, r8
 8001b9a:	d002      	beq.n	8001ba2 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001b9c:	2000      	movs	r0, #0
}
 8001b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001ba2:	1c7b      	adds	r3, r7, #1
 8001ba4:	d0ed      	beq.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001ba6:	b95f      	cbnz	r7, 8001bc0 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ba8:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001baa:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bac:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001bae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001bb2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001bb6:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001bc0:	f7ff fe28 	bl	8001814 <HAL_GetTick>
 8001bc4:	1b80      	subs	r0, r0, r6
 8001bc6:	4287      	cmp	r7, r0
 8001bc8:	d2db      	bcs.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001bca:	e7ed      	b.n	8001ba8 <I2C_WaitOnFlagUntilTimeout+0x38>

08001bcc <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001bcc:	b570      	push	{r4, r5, r6, lr}
 8001bce:	4604      	mov	r4, r0
 8001bd0:	460d      	mov	r5, r1
 8001bd2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	061b      	lsls	r3, r3, #24
 8001bda:	d501      	bpl.n	8001be0 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001bdc:	2000      	movs	r0, #0
 8001bde:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001be0:	4620      	mov	r0, r4
 8001be2:	f7ff ff70 	bl	8001ac6 <I2C_IsAcknowledgeFailed>
 8001be6:	b9a8      	cbnz	r0, 8001c14 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001be8:	1c6a      	adds	r2, r5, #1
 8001bea:	d0f3      	beq.n	8001bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001bec:	b965      	cbnz	r5, 8001c08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bee:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001bf0:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bf2:	f043 0320 	orr.w	r3, r3, #32
 8001bf6:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bf8:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001bfa:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bfc:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001bfe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001c02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001c06:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c08:	f7ff fe04 	bl	8001814 <HAL_GetTick>
 8001c0c:	1b80      	subs	r0, r0, r6
 8001c0e:	4285      	cmp	r5, r0
 8001c10:	d2e0      	bcs.n	8001bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001c12:	e7ec      	b.n	8001bee <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001c14:	2001      	movs	r0, #1
}
 8001c16:	bd70      	pop	{r4, r5, r6, pc}

08001c18 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001c18:	b570      	push	{r4, r5, r6, lr}
 8001c1a:	4604      	mov	r4, r0
 8001c1c:	460d      	mov	r5, r1
 8001c1e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c20:	6820      	ldr	r0, [r4, #0]
 8001c22:	6943      	ldr	r3, [r0, #20]
 8001c24:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001c28:	d001      	beq.n	8001c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001c2a:	2000      	movs	r0, #0
}
 8001c2c:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c2e:	6942      	ldr	r2, [r0, #20]
 8001c30:	06d2      	lsls	r2, r2, #27
 8001c32:	d50b      	bpl.n	8001c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c34:	f06f 0210 	mvn.w	r2, #16
 8001c38:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001c3a:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c3c:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c42:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001c44:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001c46:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001c4a:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c4c:	b95d      	cbnz	r5, 8001c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c50:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c52:	f043 0320 	orr.w	r3, r3, #32
 8001c56:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001c64:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c66:	f7ff fdd5 	bl	8001814 <HAL_GetTick>
 8001c6a:	1b80      	subs	r0, r0, r6
 8001c6c:	4285      	cmp	r5, r0
 8001c6e:	d2d7      	bcs.n	8001c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001c70:	e7ed      	b.n	8001c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001c72 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001c72:	b570      	push	{r4, r5, r6, lr}
 8001c74:	4604      	mov	r4, r0
 8001c76:	460d      	mov	r5, r1
 8001c78:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	075b      	lsls	r3, r3, #29
 8001c80:	d501      	bpl.n	8001c86 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001c82:	2000      	movs	r0, #0
 8001c84:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c86:	4620      	mov	r0, r4
 8001c88:	f7ff ff1d 	bl	8001ac6 <I2C_IsAcknowledgeFailed>
 8001c8c:	b9a8      	cbnz	r0, 8001cba <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001c8e:	1c6a      	adds	r2, r5, #1
 8001c90:	d0f3      	beq.n	8001c7a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c92:	b965      	cbnz	r5, 8001cae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c94:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001c96:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c98:	f043 0320 	orr.w	r3, r3, #32
 8001c9c:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c9e:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001ca0:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ca2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001ca4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001ca8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001cac:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001cae:	f7ff fdb1 	bl	8001814 <HAL_GetTick>
 8001cb2:	1b80      	subs	r0, r0, r6
 8001cb4:	4285      	cmp	r5, r0
 8001cb6:	d2e0      	bcs.n	8001c7a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001cb8:	e7ec      	b.n	8001c94 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001cba:	2001      	movs	r0, #1
}
 8001cbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001cc0 <HAL_I2C_Init>:
{
 8001cc0:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	b908      	cbnz	r0, 8001cca <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001cca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cd2:	b91b      	cbnz	r3, 8001cdc <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001cd4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001cd8:	f7ff fb96 	bl	8001408 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cdc:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001cde:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001ce4:	6813      	ldr	r3, [r2, #0]
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cec:	f000 fd3a 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cf0:	6863      	ldr	r3, [r4, #4]
 8001cf2:	4a2f      	ldr	r2, [pc, #188]	; (8001db0 <HAL_I2C_Init+0xf0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d830      	bhi.n	8001d5a <HAL_I2C_Init+0x9a>
 8001cf8:	4a2e      	ldr	r2, [pc, #184]	; (8001db4 <HAL_I2C_Init+0xf4>)
 8001cfa:	4290      	cmp	r0, r2
 8001cfc:	d9e3      	bls.n	8001cc6 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001cfe:	4a2e      	ldr	r2, [pc, #184]	; (8001db8 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001d00:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001d02:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8001d06:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d08:	3201      	adds	r2, #1
 8001d0a:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d0c:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <HAL_I2C_Init+0xf0>)
 8001d0e:	3801      	subs	r0, #1
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d832      	bhi.n	8001d7a <HAL_I2C_Init+0xba>
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d1a:	1c43      	adds	r3, r0, #1
 8001d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	bf38      	it	cc
 8001d24:	2304      	movcc	r3, #4
 8001d26:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d28:	6a22      	ldr	r2, [r4, #32]
 8001d2a:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d2c:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001d32:	68e2      	ldr	r2, [r4, #12]
 8001d34:	6923      	ldr	r3, [r4, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001d3a:	69a2      	ldr	r2, [r4, #24]
 8001d3c:	6963      	ldr	r3, [r4, #20]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001d42:	680b      	ldr	r3, [r1, #0]
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001d4a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d4c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d52:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001d58:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d5a:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <HAL_I2C_Init+0xfc>)
 8001d5c:	4290      	cmp	r0, r2
 8001d5e:	d9b2      	bls.n	8001cc6 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001d60:	4d15      	ldr	r5, [pc, #84]	; (8001db8 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d62:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001d66:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8001d6a:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d6c:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8001d6e:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d70:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001d74:	fbb2 f2f5 	udiv	r2, r2, r5
 8001d78:	e7c6      	b.n	8001d08 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d7a:	68a2      	ldr	r2, [r4, #8]
 8001d7c:	b952      	cbnz	r2, 8001d94 <HAL_I2C_Init+0xd4>
 8001d7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d82:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d86:	1c43      	adds	r3, r0, #1
 8001d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8c:	b16b      	cbz	r3, 8001daa <HAL_I2C_Init+0xea>
 8001d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d92:	e7c8      	b.n	8001d26 <HAL_I2C_Init+0x66>
 8001d94:	2219      	movs	r2, #25
 8001d96:	4353      	muls	r3, r2
 8001d98:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d9c:	1c43      	adds	r3, r0, #1
 8001d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da2:	b113      	cbz	r3, 8001daa <HAL_I2C_Init+0xea>
 8001da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001da8:	e7bd      	b.n	8001d26 <HAL_I2C_Init+0x66>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e7bb      	b.n	8001d26 <HAL_I2C_Init+0x66>
 8001dae:	bf00      	nop
 8001db0:	000186a0 	.word	0x000186a0
 8001db4:	001e847f 	.word	0x001e847f
 8001db8:	000f4240 	.word	0x000f4240
 8001dbc:	003d08ff 	.word	0x003d08ff

08001dc0 <HAL_I2C_Master_Transmit>:
{
 8001dc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001dc4:	4604      	mov	r4, r0
 8001dc6:	461f      	mov	r7, r3
 8001dc8:	460d      	mov	r5, r1
 8001dca:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001dcc:	f7ff fd22 	bl	8001814 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001dd0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001dd4:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001dd6:	2b20      	cmp	r3, #32
 8001dd8:	d004      	beq.n	8001de4 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001dda:	2502      	movs	r5, #2
}
 8001ddc:	4628      	mov	r0, r5
 8001dde:	b004      	add	sp, #16
 8001de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de4:	9000      	str	r0, [sp, #0]
 8001de6:	2319      	movs	r3, #25
 8001de8:	2201      	movs	r2, #1
 8001dea:	495d      	ldr	r1, [pc, #372]	; (8001f60 <HAL_I2C_Master_Transmit+0x1a0>)
 8001dec:	4620      	mov	r0, r4
 8001dee:	f7ff febf 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d1f1      	bne.n	8001dda <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001df6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d0ed      	beq.n	8001dda <HAL_I2C_Master_Transmit+0x1a>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001e0a:	bf5e      	ittt	pl
 8001e0c:	681a      	ldrpl	r2, [r3, #0]
 8001e0e:	f042 0201 	orrpl.w	r2, r2, #1
 8001e12:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e1a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e1c:	2221      	movs	r2, #33	; 0x21
 8001e1e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e22:	2210      	movs	r2, #16
 8001e24:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e28:	2200      	movs	r2, #0
 8001e2a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e2c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001e30:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e32:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001e34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001e36:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001e3a:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e3e:	2a04      	cmp	r2, #4
 8001e40:	d004      	beq.n	8001e4c <HAL_I2C_Master_Transmit+0x8c>
 8001e42:	2a01      	cmp	r2, #1
 8001e44:	d002      	beq.n	8001e4c <HAL_I2C_Master_Transmit+0x8c>
 8001e46:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001e4a:	d104      	bne.n	8001e56 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e002      	b.n	8001e5c <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e56:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e58:	2a12      	cmp	r2, #18
 8001e5a:	d0f7      	beq.n	8001e4c <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e5c:	9600      	str	r6, [sp, #0]
 8001e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e60:	2200      	movs	r2, #0
 8001e62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e66:	4620      	mov	r0, r4
 8001e68:	f7ff fe82 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 8001e6c:	bb28      	cbnz	r0, 8001eba <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e6e:	6923      	ldr	r3, [r4, #16]
 8001e70:	6822      	ldr	r2, [r4, #0]
 8001e72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e76:	d112      	bne.n	8001e9e <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e78:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001e7c:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e7e:	4633      	mov	r3, r6
 8001e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e82:	4938      	ldr	r1, [pc, #224]	; (8001f64 <HAL_I2C_Master_Transmit+0x1a4>)
 8001e84:	4620      	mov	r0, r4
 8001e86:	f7ff fe33 	bl	8001af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e8a:	4605      	mov	r5, r0
 8001e8c:	b9a0      	cbnz	r0, 8001eb8 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	9003      	str	r0, [sp, #12]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	9203      	str	r2, [sp, #12]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	9303      	str	r3, [sp, #12]
 8001e9a:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001e9c:	e050      	b.n	8001f40 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e9e:	11eb      	asrs	r3, r5, #7
 8001ea0:	f003 0306 	and.w	r3, r3, #6
 8001ea4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001ea8:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001eaa:	492f      	ldr	r1, [pc, #188]	; (8001f68 <HAL_I2C_Master_Transmit+0x1a8>)
 8001eac:	4633      	mov	r3, r6
 8001eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f7ff fe1d 	bl	8001af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eb6:	b148      	cbz	r0, 8001ecc <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001ec4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001ec8:	2501      	movs	r5, #1
 8001eca:	e787      	b.n	8001ddc <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	b2ed      	uxtb	r5, r5
 8001ed0:	611d      	str	r5, [r3, #16]
 8001ed2:	e7d4      	b.n	8001e7e <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001ed4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001ed8:	2503      	movs	r5, #3
 8001eda:	e77f      	b.n	8001ddc <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001edc:	4632      	mov	r2, r6
 8001ede:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f7ff fe73 	bl	8001bcc <I2C_WaitOnTXEFlagUntilTimeout>
 8001ee6:	b140      	cbz	r0, 8001efa <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d1f4      	bne.n	8001ed8 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001eee:	6822      	ldr	r2, [r4, #0]
 8001ef0:	6813      	ldr	r3, [r2, #0]
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e7e6      	b.n	8001ec8 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001efa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001efc:	6820      	ldr	r0, [r4, #0]
 8001efe:	1c4b      	adds	r3, r1, #1
 8001f00:	6263      	str	r3, [r4, #36]	; 0x24
 8001f02:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001f04:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001f06:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001f08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f10:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001f12:	1e53      	subs	r3, r2, #1
 8001f14:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f16:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001f18:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f1a:	d50a      	bpl.n	8001f32 <HAL_I2C_Master_Transmit+0x172>
 8001f1c:	b14b      	cbz	r3, 8001f32 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001f1e:	1c8b      	adds	r3, r1, #2
 8001f20:	6263      	str	r3, [r4, #36]	; 0x24
 8001f22:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001f24:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001f26:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8001f28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001f2a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f32:	4632      	mov	r2, r6
 8001f34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001f36:	4620      	mov	r0, r4
 8001f38:	f7ff fe9b 	bl	8001c72 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	d1d3      	bne.n	8001ee8 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8001f40:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ca      	bne.n	8001edc <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f46:	6821      	ldr	r1, [r4, #0]
 8001f48:	680a      	ldr	r2, [r1, #0]
 8001f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f50:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001f52:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001f56:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001f5e:	e73d      	b.n	8001ddc <HAL_I2C_Master_Transmit+0x1c>
 8001f60:	00100002 	.word	0x00100002
 8001f64:	00010002 	.word	0x00010002
 8001f68:	00010008 	.word	0x00010008

08001f6c <HAL_I2C_Master_Receive>:
{
 8001f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f70:	4604      	mov	r4, r0
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	4698      	mov	r8, r3
 8001f76:	460d      	mov	r5, r1
 8001f78:	4691      	mov	r9, r2
 8001f7a:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001f7c:	f7ff fc4a 	bl	8001814 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001f80:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001f84:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	d004      	beq.n	8001f94 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001f8a:	2502      	movs	r5, #2
}
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	b009      	add	sp, #36	; 0x24
 8001f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f94:	9000      	str	r0, [sp, #0]
 8001f96:	2319      	movs	r3, #25
 8001f98:	2201      	movs	r2, #1
 8001f9a:	49a2      	ldr	r1, [pc, #648]	; (8002224 <HAL_I2C_Master_Receive+0x2b8>)
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f7ff fde7 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 8001fa2:	2800      	cmp	r0, #0
 8001fa4:	d1f1      	bne.n	8001f8a <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001fa6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d0ed      	beq.n	8001f8a <HAL_I2C_Master_Receive+0x1e>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001fba:	bf5e      	ittt	pl
 8001fbc:	681a      	ldrpl	r2, [r3, #0]
 8001fbe:	f042 0201 	orrpl.w	r2, r2, #1
 8001fc2:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fca:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001fcc:	2222      	movs	r2, #34	; 0x22
 8001fce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fd8:	2200      	movs	r2, #0
 8001fda:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fdc:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001fe0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fe4:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001fe6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001fe8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001fec:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001ff0:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ff2:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001ff4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001ff8:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ffa:	d004      	beq.n	8002006 <HAL_I2C_Master_Receive+0x9a>
 8001ffc:	2a01      	cmp	r2, #1
 8001ffe:	d002      	beq.n	8002006 <HAL_I2C_Master_Receive+0x9a>
 8002000:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002004:	d104      	bne.n	8002010 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e002      	b.n	8002016 <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002010:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002012:	2a11      	cmp	r2, #17
 8002014:	d0f7      	beq.n	8002006 <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002016:	9600      	str	r6, [sp, #0]
 8002018:	463b      	mov	r3, r7
 800201a:	2200      	movs	r2, #0
 800201c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002020:	4620      	mov	r0, r4
 8002022:	f7ff fda5 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 8002026:	2800      	cmp	r0, #0
 8002028:	d14d      	bne.n	80020c6 <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800202a:	6923      	ldr	r3, [r4, #16]
 800202c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	d139      	bne.n	80020a8 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002034:	f045 0501 	orr.w	r5, r5, #1
 8002038:	b2ed      	uxtb	r5, r5
 800203a:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800203c:	4633      	mov	r3, r6
 800203e:	463a      	mov	r2, r7
 8002040:	4979      	ldr	r1, [pc, #484]	; (8002228 <HAL_I2C_Master_Receive+0x2bc>)
 8002042:	4620      	mov	r0, r4
 8002044:	f7ff fd54 	bl	8001af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002048:	4605      	mov	r5, r0
 800204a:	2800      	cmp	r0, #0
 800204c:	d13a      	bne.n	80020c4 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 800204e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	2a00      	cmp	r2, #0
 8002054:	d069      	beq.n	800212a <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 8002056:	2a01      	cmp	r2, #1
 8002058:	d17a      	bne.n	8002150 <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002060:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002062:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	9504      	str	r5, [sp, #16]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	9204      	str	r2, [sp, #16]
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	9204      	str	r2, [sp, #16]
 8002070:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002078:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800207a:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800207c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002230 <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 8002080:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002082:	2b00      	cmp	r3, #0
 8002084:	d05b      	beq.n	800213e <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 8002086:	2b03      	cmp	r3, #3
 8002088:	f200 80d4 	bhi.w	8002234 <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 800208c:	2b01      	cmp	r3, #1
 800208e:	d17b      	bne.n	8002188 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002090:	4632      	mov	r2, r6
 8002092:	4639      	mov	r1, r7
 8002094:	4620      	mov	r0, r4
 8002096:	f7ff fdbf 	bl	8001c18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800209a:	2800      	cmp	r0, #0
 800209c:	f000 8093 	beq.w	80021c6 <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80020a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d116      	bne.n	80020d4 <HAL_I2C_Master_Receive+0x168>
 80020a6:	e03e      	b.n	8002126 <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020a8:	ea4f 18e5 	mov.w	r8, r5, asr #7
 80020ac:	f008 0806 	and.w	r8, r8, #6
 80020b0:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80020b4:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020b6:	495d      	ldr	r1, [pc, #372]	; (800222c <HAL_I2C_Master_Receive+0x2c0>)
 80020b8:	4633      	mov	r3, r6
 80020ba:	463a      	mov	r2, r7
 80020bc:	4620      	mov	r0, r4
 80020be:	f7ff fd17 	bl	8001af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c2:	b148      	cbz	r0, 80020d8 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	d128      	bne.n	8002122 <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 80020d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 80020d4:	2501      	movs	r5, #1
 80020d6:	e759      	b.n	8001f8c <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	b2ed      	uxtb	r5, r5
 80020dc:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020de:	463a      	mov	r2, r7
 80020e0:	4633      	mov	r3, r6
 80020e2:	4951      	ldr	r1, [pc, #324]	; (8002228 <HAL_I2C_Master_Receive+0x2bc>)
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff fd03 	bl	8001af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020ea:	4602      	mov	r2, r0
 80020ec:	2800      	cmp	r0, #0
 80020ee:	d1e9      	bne.n	80020c4 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	9007      	str	r0, [sp, #28]
 80020f4:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020f6:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f8:	9107      	str	r1, [sp, #28]
 80020fa:	6999      	ldr	r1, [r3, #24]
 80020fc:	9107      	str	r1, [sp, #28]
 80020fe:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002100:	6819      	ldr	r1, [r3, #0]
 8002102:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002106:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002108:	9600      	str	r6, [sp, #0]
 800210a:	463b      	mov	r3, r7
 800210c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002110:	f7ff fd2e 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 8002114:	2800      	cmp	r0, #0
 8002116:	d1d6      	bne.n	80020c6 <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002118:	6822      	ldr	r2, [r4, #0]
 800211a:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800211e:	6113      	str	r3, [r2, #16]
 8002120:	e78c      	b.n	800203c <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 8002122:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 8002126:	2503      	movs	r5, #3
 8002128:	e730      	b.n	8001f8c <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212a:	9503      	str	r5, [sp, #12]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	9203      	str	r2, [sp, #12]
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	9203      	str	r2, [sp, #12]
 8002134:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800213e:	2320      	movs	r3, #32
 8002140:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002144:	2300      	movs	r3, #0
 8002146:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800214a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800214e:	e71d      	b.n	8001f8c <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8002150:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002152:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8002154:	d10e      	bne.n	8002174 <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800215a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800215c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	9505      	str	r5, [sp, #20]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	9205      	str	r2, [sp, #20]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	9205      	str	r2, [sp, #20]
 800216a:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002172:	e781      	b.n	8002078 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002174:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002178:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217a:	9506      	str	r5, [sp, #24]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	9206      	str	r2, [sp, #24]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	9306      	str	r3, [sp, #24]
 8002184:	9b06      	ldr	r3, [sp, #24]
 8002186:	e779      	b.n	800207c <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8002188:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800218a:	9600      	str	r6, [sp, #0]
 800218c:	463b      	mov	r3, r7
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	4641      	mov	r1, r8
 8002194:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8002196:	d124      	bne.n	80021e2 <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002198:	f7ff fcea 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 800219c:	2800      	cmp	r0, #0
 800219e:	d1c2      	bne.n	8002126 <HAL_I2C_Master_Receive+0x1ba>
 80021a0:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021aa:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	1c51      	adds	r1, r2, #1
 80021b2:	6261      	str	r1, [r4, #36]	; 0x24
 80021b4:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 80021b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80021b8:	3b01      	subs	r3, #1
 80021ba:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80021bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021c4:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	6262      	str	r2, [r4, #36]	; 0x24
 80021cc:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021ce:	6912      	ldr	r2, [r2, #16]
 80021d0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80021d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80021d4:	3b01      	subs	r3, #1
 80021d6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80021d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29b      	uxth	r3, r3
 80021de:	8563      	strh	r3, [r4, #42]	; 0x2a
 80021e0:	e74e      	b.n	8002080 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021e2:	f7ff fcc5 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 80021e6:	4602      	mov	r2, r0
 80021e8:	2800      	cmp	r0, #0
 80021ea:	d19c      	bne.n	8002126 <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80021ec:	6821      	ldr	r1, [r4, #0]
 80021ee:	680b      	ldr	r3, [r1, #0]
 80021f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021f4:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021f6:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021fa:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021fc:	1c59      	adds	r1, r3, #1
 80021fe:	6261      	str	r1, [r4, #36]	; 0x24
 8002200:	6821      	ldr	r1, [r4, #0]
 8002202:	6909      	ldr	r1, [r1, #16]
 8002204:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8002206:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002208:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 800220a:	3b01      	subs	r3, #1
 800220c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800220e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002210:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8002212:	3b01      	subs	r3, #1
 8002214:	b29b      	uxth	r3, r3
 8002216:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002218:	463b      	mov	r3, r7
 800221a:	f7ff fca9 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 800221e:	2800      	cmp	r0, #0
 8002220:	d0bf      	beq.n	80021a2 <HAL_I2C_Master_Receive+0x236>
 8002222:	e780      	b.n	8002126 <HAL_I2C_Master_Receive+0x1ba>
 8002224:	00100002 	.word	0x00100002
 8002228:	00010002 	.word	0x00010002
 800222c:	00010008 	.word	0x00010008
 8002230:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002234:	4632      	mov	r2, r6
 8002236:	4639      	mov	r1, r7
 8002238:	4620      	mov	r0, r4
 800223a:	f7ff fced 	bl	8001c18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800223e:	2800      	cmp	r0, #0
 8002240:	f47f af2e 	bne.w	80020a0 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002244:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	6262      	str	r2, [r4, #36]	; 0x24
 800224a:	6822      	ldr	r2, [r4, #0]
 800224c:	6912      	ldr	r2, [r2, #16]
 800224e:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002250:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002252:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8002254:	3b01      	subs	r3, #1
 8002256:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002258:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800225a:	3b01      	subs	r3, #1
 800225c:	b29b      	uxth	r3, r3
 800225e:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002260:	6953      	ldr	r3, [r2, #20]
 8002262:	075b      	lsls	r3, r3, #29
 8002264:	f57f af0c 	bpl.w	8002080 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800226a:	1c59      	adds	r1, r3, #1
 800226c:	6261      	str	r1, [r4, #36]	; 0x24
 800226e:	e7ae      	b.n	80021ce <HAL_I2C_Master_Receive+0x262>

08002270 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002270:	6803      	ldr	r3, [r0, #0]
{
 8002272:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	07db      	lsls	r3, r3, #31
{
 8002278:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227a:	d410      	bmi.n	800229e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227c:	682b      	ldr	r3, [r5, #0]
 800227e:	079f      	lsls	r7, r3, #30
 8002280:	d45e      	bmi.n	8002340 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002282:	682b      	ldr	r3, [r5, #0]
 8002284:	0719      	lsls	r1, r3, #28
 8002286:	f100 8095 	bmi.w	80023b4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228a:	682b      	ldr	r3, [r5, #0]
 800228c:	075a      	lsls	r2, r3, #29
 800228e:	f100 80bf 	bmi.w	8002410 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002292:	69ea      	ldr	r2, [r5, #28]
 8002294:	2a00      	cmp	r2, #0
 8002296:	f040 812d 	bne.w	80024f4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800229a:	2000      	movs	r0, #0
 800229c:	e014      	b.n	80022c8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800229e:	4c90      	ldr	r4, [pc, #576]	; (80024e0 <HAL_RCC_OscConfig+0x270>)
 80022a0:	6863      	ldr	r3, [r4, #4]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d007      	beq.n	80022ba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022aa:	6863      	ldr	r3, [r4, #4]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0x5e>
 80022b4:	6863      	ldr	r3, [r4, #4]
 80022b6:	03de      	lsls	r6, r3, #15
 80022b8:	d509      	bpl.n	80022ce <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	039c      	lsls	r4, r3, #14
 80022be:	d5dd      	bpl.n	800227c <HAL_RCC_OscConfig+0xc>
 80022c0:	686b      	ldr	r3, [r5, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1da      	bne.n	800227c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80022c6:	2001      	movs	r0, #1
}
 80022c8:	b002      	add	sp, #8
 80022ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ce:	686b      	ldr	r3, [r5, #4]
 80022d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d4:	d110      	bne.n	80022f8 <HAL_RCC_OscConfig+0x88>
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80022de:	f7ff fa99 	bl	8001814 <HAL_GetTick>
 80022e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	0398      	lsls	r0, r3, #14
 80022e8:	d4c8      	bmi.n	800227c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ea:	f7ff fa93 	bl	8001814 <HAL_GetTick>
 80022ee:	1b80      	subs	r0, r0, r6
 80022f0:	2864      	cmp	r0, #100	; 0x64
 80022f2:	d9f7      	bls.n	80022e4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80022f4:	2003      	movs	r0, #3
 80022f6:	e7e7      	b.n	80022c8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f8:	b99b      	cbnz	r3, 8002322 <HAL_RCC_OscConfig+0xb2>
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002300:	6023      	str	r3, [r4, #0]
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002308:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800230a:	f7ff fa83 	bl	8001814 <HAL_GetTick>
 800230e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	0399      	lsls	r1, r3, #14
 8002314:	d5b2      	bpl.n	800227c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002316:	f7ff fa7d 	bl	8001814 <HAL_GetTick>
 800231a:	1b80      	subs	r0, r0, r6
 800231c:	2864      	cmp	r0, #100	; 0x64
 800231e:	d9f7      	bls.n	8002310 <HAL_RCC_OscConfig+0xa0>
 8002320:	e7e8      	b.n	80022f4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002322:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	d103      	bne.n	8002332 <HAL_RCC_OscConfig+0xc2>
 800232a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232e:	6023      	str	r3, [r4, #0]
 8002330:	e7d1      	b.n	80022d6 <HAL_RCC_OscConfig+0x66>
 8002332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002336:	6023      	str	r3, [r4, #0]
 8002338:	6823      	ldr	r3, [r4, #0]
 800233a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233e:	e7cd      	b.n	80022dc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002340:	4c67      	ldr	r4, [pc, #412]	; (80024e0 <HAL_RCC_OscConfig+0x270>)
 8002342:	6863      	ldr	r3, [r4, #4]
 8002344:	f013 0f0c 	tst.w	r3, #12
 8002348:	d007      	beq.n	800235a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800234a:	6863      	ldr	r3, [r4, #4]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b08      	cmp	r3, #8
 8002352:	d110      	bne.n	8002376 <HAL_RCC_OscConfig+0x106>
 8002354:	6863      	ldr	r3, [r4, #4]
 8002356:	03da      	lsls	r2, r3, #15
 8002358:	d40d      	bmi.n	8002376 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	6823      	ldr	r3, [r4, #0]
 800235c:	079b      	lsls	r3, r3, #30
 800235e:	d502      	bpl.n	8002366 <HAL_RCC_OscConfig+0xf6>
 8002360:	692b      	ldr	r3, [r5, #16]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d1af      	bne.n	80022c6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	696a      	ldr	r2, [r5, #20]
 800236a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800236e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002372:	6023      	str	r3, [r4, #0]
 8002374:	e785      	b.n	8002282 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002376:	692a      	ldr	r2, [r5, #16]
 8002378:	4b5a      	ldr	r3, [pc, #360]	; (80024e4 <HAL_RCC_OscConfig+0x274>)
 800237a:	b16a      	cbz	r2, 8002398 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002380:	f7ff fa48 	bl	8001814 <HAL_GetTick>
 8002384:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	079f      	lsls	r7, r3, #30
 800238a:	d4ec      	bmi.n	8002366 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800238c:	f7ff fa42 	bl	8001814 <HAL_GetTick>
 8002390:	1b80      	subs	r0, r0, r6
 8002392:	2802      	cmp	r0, #2
 8002394:	d9f7      	bls.n	8002386 <HAL_RCC_OscConfig+0x116>
 8002396:	e7ad      	b.n	80022f4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002398:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800239a:	f7ff fa3b 	bl	8001814 <HAL_GetTick>
 800239e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	0798      	lsls	r0, r3, #30
 80023a4:	f57f af6d 	bpl.w	8002282 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a8:	f7ff fa34 	bl	8001814 <HAL_GetTick>
 80023ac:	1b80      	subs	r0, r0, r6
 80023ae:	2802      	cmp	r0, #2
 80023b0:	d9f6      	bls.n	80023a0 <HAL_RCC_OscConfig+0x130>
 80023b2:	e79f      	b.n	80022f4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b4:	69aa      	ldr	r2, [r5, #24]
 80023b6:	4c4a      	ldr	r4, [pc, #296]	; (80024e0 <HAL_RCC_OscConfig+0x270>)
 80023b8:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <HAL_RCC_OscConfig+0x278>)
 80023ba:	b1da      	cbz	r2, 80023f4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80023bc:	2201      	movs	r2, #1
 80023be:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80023c0:	f7ff fa28 	bl	8001814 <HAL_GetTick>
 80023c4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023c8:	079b      	lsls	r3, r3, #30
 80023ca:	d50d      	bpl.n	80023e8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023cc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80023d0:	4b46      	ldr	r3, [pc, #280]	; (80024ec <HAL_RCC_OscConfig+0x27c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80023d8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80023da:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80023dc:	9b01      	ldr	r3, [sp, #4]
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	9201      	str	r2, [sp, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f9      	bne.n	80023da <HAL_RCC_OscConfig+0x16a>
 80023e6:	e750      	b.n	800228a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e8:	f7ff fa14 	bl	8001814 <HAL_GetTick>
 80023ec:	1b80      	subs	r0, r0, r6
 80023ee:	2802      	cmp	r0, #2
 80023f0:	d9e9      	bls.n	80023c6 <HAL_RCC_OscConfig+0x156>
 80023f2:	e77f      	b.n	80022f4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80023f4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80023f6:	f7ff fa0d 	bl	8001814 <HAL_GetTick>
 80023fa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023fe:	079f      	lsls	r7, r3, #30
 8002400:	f57f af43 	bpl.w	800228a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002404:	f7ff fa06 	bl	8001814 <HAL_GetTick>
 8002408:	1b80      	subs	r0, r0, r6
 800240a:	2802      	cmp	r0, #2
 800240c:	d9f6      	bls.n	80023fc <HAL_RCC_OscConfig+0x18c>
 800240e:	e771      	b.n	80022f4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002410:	4c33      	ldr	r4, [pc, #204]	; (80024e0 <HAL_RCC_OscConfig+0x270>)
 8002412:	69e3      	ldr	r3, [r4, #28]
 8002414:	00d8      	lsls	r0, r3, #3
 8002416:	d424      	bmi.n	8002462 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8002418:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	69e3      	ldr	r3, [r4, #28]
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002420:	61e3      	str	r3, [r4, #28]
 8002422:	69e3      	ldr	r3, [r4, #28]
 8002424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242c:	4e30      	ldr	r6, [pc, #192]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 800242e:	6833      	ldr	r3, [r6, #0]
 8002430:	05d9      	lsls	r1, r3, #23
 8002432:	d518      	bpl.n	8002466 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002434:	68eb      	ldr	r3, [r5, #12]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d126      	bne.n	8002488 <HAL_RCC_OscConfig+0x218>
 800243a:	6a23      	ldr	r3, [r4, #32]
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002442:	f7ff f9e7 	bl	8001814 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002446:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800244a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	6a23      	ldr	r3, [r4, #32]
 800244e:	079b      	lsls	r3, r3, #30
 8002450:	d53f      	bpl.n	80024d2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002452:	2f00      	cmp	r7, #0
 8002454:	f43f af1d 	beq.w	8002292 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002458:	69e3      	ldr	r3, [r4, #28]
 800245a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245e:	61e3      	str	r3, [r4, #28]
 8002460:	e717      	b.n	8002292 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002462:	2700      	movs	r7, #0
 8002464:	e7e2      	b.n	800242c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002466:	6833      	ldr	r3, [r6, #0]
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800246e:	f7ff f9d1 	bl	8001814 <HAL_GetTick>
 8002472:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	6833      	ldr	r3, [r6, #0]
 8002476:	05da      	lsls	r2, r3, #23
 8002478:	d4dc      	bmi.n	8002434 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247a:	f7ff f9cb 	bl	8001814 <HAL_GetTick>
 800247e:	eba0 0008 	sub.w	r0, r0, r8
 8002482:	2864      	cmp	r0, #100	; 0x64
 8002484:	d9f6      	bls.n	8002474 <HAL_RCC_OscConfig+0x204>
 8002486:	e735      	b.n	80022f4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002488:	b9ab      	cbnz	r3, 80024b6 <HAL_RCC_OscConfig+0x246>
 800248a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6223      	str	r3, [r4, #32]
 8002496:	6a23      	ldr	r3, [r4, #32]
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800249e:	f7ff f9b9 	bl	8001814 <HAL_GetTick>
 80024a2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a4:	6a23      	ldr	r3, [r4, #32]
 80024a6:	0798      	lsls	r0, r3, #30
 80024a8:	d5d3      	bpl.n	8002452 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7ff f9b3 	bl	8001814 <HAL_GetTick>
 80024ae:	1b80      	subs	r0, r0, r6
 80024b0:	4540      	cmp	r0, r8
 80024b2:	d9f7      	bls.n	80024a4 <HAL_RCC_OscConfig+0x234>
 80024b4:	e71e      	b.n	80022f4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b6:	2b05      	cmp	r3, #5
 80024b8:	6a23      	ldr	r3, [r4, #32]
 80024ba:	d103      	bne.n	80024c4 <HAL_RCC_OscConfig+0x254>
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	6223      	str	r3, [r4, #32]
 80024c2:	e7ba      	b.n	800243a <HAL_RCC_OscConfig+0x1ca>
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6223      	str	r3, [r4, #32]
 80024ca:	6a23      	ldr	r3, [r4, #32]
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	e7b6      	b.n	8002440 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7ff f99f 	bl	8001814 <HAL_GetTick>
 80024d6:	eba0 0008 	sub.w	r0, r0, r8
 80024da:	42b0      	cmp	r0, r6
 80024dc:	d9b6      	bls.n	800244c <HAL_RCC_OscConfig+0x1dc>
 80024de:	e709      	b.n	80022f4 <HAL_RCC_OscConfig+0x84>
 80024e0:	40021000 	.word	0x40021000
 80024e4:	42420000 	.word	0x42420000
 80024e8:	42420480 	.word	0x42420480
 80024ec:	20000000 	.word	0x20000000
 80024f0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f4:	4c22      	ldr	r4, [pc, #136]	; (8002580 <HAL_RCC_OscConfig+0x310>)
 80024f6:	6863      	ldr	r3, [r4, #4]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	f43f aee2 	beq.w	80022c6 <HAL_RCC_OscConfig+0x56>
 8002502:	2300      	movs	r3, #0
 8002504:	4e1f      	ldr	r6, [pc, #124]	; (8002584 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002506:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002508:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250a:	d12b      	bne.n	8002564 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800250c:	f7ff f982 	bl	8001814 <HAL_GetTick>
 8002510:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	0199      	lsls	r1, r3, #6
 8002516:	d41f      	bmi.n	8002558 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002518:	6a2b      	ldr	r3, [r5, #32]
 800251a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251e:	d105      	bne.n	800252c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002520:	6862      	ldr	r2, [r4, #4]
 8002522:	68a9      	ldr	r1, [r5, #8]
 8002524:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002528:	430a      	orrs	r2, r1
 800252a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800252c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800252e:	6862      	ldr	r2, [r4, #4]
 8002530:	430b      	orrs	r3, r1
 8002532:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002536:	4313      	orrs	r3, r2
 8002538:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800253a:	2301      	movs	r3, #1
 800253c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800253e:	f7ff f969 	bl	8001814 <HAL_GetTick>
 8002542:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	019a      	lsls	r2, r3, #6
 8002548:	f53f aea7 	bmi.w	800229a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254c:	f7ff f962 	bl	8001814 <HAL_GetTick>
 8002550:	1b40      	subs	r0, r0, r5
 8002552:	2802      	cmp	r0, #2
 8002554:	d9f6      	bls.n	8002544 <HAL_RCC_OscConfig+0x2d4>
 8002556:	e6cd      	b.n	80022f4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002558:	f7ff f95c 	bl	8001814 <HAL_GetTick>
 800255c:	1bc0      	subs	r0, r0, r7
 800255e:	2802      	cmp	r0, #2
 8002560:	d9d7      	bls.n	8002512 <HAL_RCC_OscConfig+0x2a2>
 8002562:	e6c7      	b.n	80022f4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002564:	f7ff f956 	bl	8001814 <HAL_GetTick>
 8002568:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	019b      	lsls	r3, r3, #6
 800256e:	f57f ae94 	bpl.w	800229a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002572:	f7ff f94f 	bl	8001814 <HAL_GetTick>
 8002576:	1b40      	subs	r0, r0, r5
 8002578:	2802      	cmp	r0, #2
 800257a:	d9f6      	bls.n	800256a <HAL_RCC_OscConfig+0x2fa>
 800257c:	e6ba      	b.n	80022f4 <HAL_RCC_OscConfig+0x84>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	42420060 	.word	0x42420060

08002588 <HAL_RCC_GetSysClockFreq>:
{
 8002588:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800258c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800258e:	ac02      	add	r4, sp, #8
 8002590:	f103 0510 	add.w	r5, r3, #16
 8002594:	4622      	mov	r2, r4
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	3308      	adds	r3, #8
 800259c:	c203      	stmia	r2!, {r0, r1}
 800259e:	42ab      	cmp	r3, r5
 80025a0:	4614      	mov	r4, r2
 80025a2:	d1f7      	bne.n	8002594 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025a4:	2301      	movs	r3, #1
 80025a6:	f88d 3004 	strb.w	r3, [sp, #4]
 80025aa:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80025ac:	4911      	ldr	r1, [pc, #68]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025ae:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80025b2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80025b4:	f003 020c 	and.w	r2, r3, #12
 80025b8:	2a08      	cmp	r2, #8
 80025ba:	d117      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025bc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80025c0:	a806      	add	r0, sp, #24
 80025c2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025c4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025c6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025ca:	d50c      	bpl.n	80025e6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025cc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ce:	480a      	ldr	r0, [pc, #40]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025d0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025d4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025d6:	aa06      	add	r2, sp, #24
 80025d8:	4413      	add	r3, r2
 80025da:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025de:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80025e2:	b007      	add	sp, #28
 80025e4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025e6:	4805      	ldr	r0, [pc, #20]	; (80025fc <HAL_RCC_GetSysClockFreq+0x74>)
 80025e8:	4350      	muls	r0, r2
 80025ea:	e7fa      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80025ee:	e7f8      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x5a>
 80025f0:	08002c08 	.word	0x08002c08
 80025f4:	40021000 	.word	0x40021000
 80025f8:	007a1200 	.word	0x007a1200
 80025fc:	003d0900 	.word	0x003d0900

08002600 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002600:	4a54      	ldr	r2, [pc, #336]	; (8002754 <HAL_RCC_ClockConfig+0x154>)
{
 8002602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002606:	6813      	ldr	r3, [r2, #0]
{
 8002608:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	428b      	cmp	r3, r1
{
 8002610:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002612:	d32a      	bcc.n	800266a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	6829      	ldr	r1, [r5, #0]
 8002616:	078c      	lsls	r4, r1, #30
 8002618:	d434      	bmi.n	8002684 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261a:	07ca      	lsls	r2, r1, #31
 800261c:	d447      	bmi.n	80026ae <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800261e:	4a4d      	ldr	r2, [pc, #308]	; (8002754 <HAL_RCC_ClockConfig+0x154>)
 8002620:	6813      	ldr	r3, [r2, #0]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	429e      	cmp	r6, r3
 8002628:	f0c0 8082 	bcc.w	8002730 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	682a      	ldr	r2, [r5, #0]
 800262e:	4c4a      	ldr	r4, [pc, #296]	; (8002758 <HAL_RCC_ClockConfig+0x158>)
 8002630:	f012 0f04 	tst.w	r2, #4
 8002634:	f040 8087 	bne.w	8002746 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002638:	0713      	lsls	r3, r2, #28
 800263a:	d506      	bpl.n	800264a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800263c:	6863      	ldr	r3, [r4, #4]
 800263e:	692a      	ldr	r2, [r5, #16]
 8002640:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002644:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002648:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264a:	f7ff ff9d 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 800264e:	6863      	ldr	r3, [r4, #4]
 8002650:	4a42      	ldr	r2, [pc, #264]	; (800275c <HAL_RCC_ClockConfig+0x15c>)
 8002652:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	40d8      	lsrs	r0, r3
 800265a:	4b41      	ldr	r3, [pc, #260]	; (8002760 <HAL_RCC_ClockConfig+0x160>)
 800265c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800265e:	2000      	movs	r0, #0
 8002660:	f7ff f896 	bl	8001790 <HAL_InitTick>
  return HAL_OK;
 8002664:	2000      	movs	r0, #0
}
 8002666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	6813      	ldr	r3, [r2, #0]
 800266c:	f023 0307 	bic.w	r3, r3, #7
 8002670:	430b      	orrs	r3, r1
 8002672:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002674:	6813      	ldr	r3, [r2, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	4299      	cmp	r1, r3
 800267c:	d0ca      	beq.n	8002614 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800267e:	2001      	movs	r0, #1
 8002680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002684:	4b34      	ldr	r3, [pc, #208]	; (8002758 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002686:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800268a:	bf1e      	ittt	ne
 800268c:	685a      	ldrne	r2, [r3, #4]
 800268e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002692:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002694:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002696:	bf42      	ittt	mi
 8002698:	685a      	ldrmi	r2, [r3, #4]
 800269a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800269e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	68a8      	ldr	r0, [r5, #8]
 80026a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80026a8:	4302      	orrs	r2, r0
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	e7b5      	b.n	800261a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ae:	686a      	ldr	r2, [r5, #4]
 80026b0:	4c29      	ldr	r4, [pc, #164]	; (8002758 <HAL_RCC_ClockConfig+0x158>)
 80026b2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	d11c      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026bc:	d0df      	beq.n	800267e <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026be:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c4:	f023 0303 	bic.w	r3, r3, #3
 80026c8:	4313      	orrs	r3, r2
 80026ca:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80026cc:	f7ff f8a2 	bl	8001814 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d0:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80026d2:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d114      	bne.n	8002702 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d8:	6863      	ldr	r3, [r4, #4]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d09d      	beq.n	800261e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e2:	f7ff f897 	bl	8001814 <HAL_GetTick>
 80026e6:	1bc0      	subs	r0, r0, r7
 80026e8:	4540      	cmp	r0, r8
 80026ea:	d9f5      	bls.n	80026d8 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80026ec:	2003      	movs	r0, #3
 80026ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f2:	2a02      	cmp	r2, #2
 80026f4:	d102      	bne.n	80026fc <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80026fa:	e7df      	b.n	80026bc <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	f013 0f02 	tst.w	r3, #2
 8002700:	e7dc      	b.n	80026bc <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002702:	2b02      	cmp	r3, #2
 8002704:	d10f      	bne.n	8002726 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002706:	6863      	ldr	r3, [r4, #4]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b08      	cmp	r3, #8
 800270e:	d086      	beq.n	800261e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002710:	f7ff f880 	bl	8001814 <HAL_GetTick>
 8002714:	1bc0      	subs	r0, r0, r7
 8002716:	4540      	cmp	r0, r8
 8002718:	d9f5      	bls.n	8002706 <HAL_RCC_ClockConfig+0x106>
 800271a:	e7e7      	b.n	80026ec <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271c:	f7ff f87a 	bl	8001814 <HAL_GetTick>
 8002720:	1bc0      	subs	r0, r0, r7
 8002722:	4540      	cmp	r0, r8
 8002724:	d8e2      	bhi.n	80026ec <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002726:	6863      	ldr	r3, [r4, #4]
 8002728:	f013 0f0c 	tst.w	r3, #12
 800272c:	d1f6      	bne.n	800271c <HAL_RCC_ClockConfig+0x11c>
 800272e:	e776      	b.n	800261e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002730:	6813      	ldr	r3, [r2, #0]
 8002732:	f023 0307 	bic.w	r3, r3, #7
 8002736:	4333      	orrs	r3, r6
 8002738:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800273a:	6813      	ldr	r3, [r2, #0]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	429e      	cmp	r6, r3
 8002742:	d19c      	bne.n	800267e <HAL_RCC_ClockConfig+0x7e>
 8002744:	e772      	b.n	800262c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002746:	6863      	ldr	r3, [r4, #4]
 8002748:	68e9      	ldr	r1, [r5, #12]
 800274a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800274e:	430b      	orrs	r3, r1
 8002750:	6063      	str	r3, [r4, #4]
 8002752:	e771      	b.n	8002638 <HAL_RCC_ClockConfig+0x38>
 8002754:	40022000 	.word	0x40022000
 8002758:	40021000 	.word	0x40021000
 800275c:	08002c18 	.word	0x08002c18
 8002760:	20000000 	.word	0x20000000

08002764 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002766:	4a05      	ldr	r2, [pc, #20]	; (800277c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800276e:	5cd3      	ldrb	r3, [r2, r3]
 8002770:	4a03      	ldr	r2, [pc, #12]	; (8002780 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002772:	6810      	ldr	r0, [r2, #0]
}    
 8002774:	40d8      	lsrs	r0, r3
 8002776:	4770      	bx	lr
 8002778:	40021000 	.word	0x40021000
 800277c:	08002c28 	.word	0x08002c28
 8002780:	20000000 	.word	0x20000000

08002784 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	4a03      	ldr	r2, [pc, #12]	; (80027a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002792:	6810      	ldr	r0, [r2, #0]
} 
 8002794:	40d8      	lsrs	r0, r3
 8002796:	4770      	bx	lr
 8002798:	40021000 	.word	0x40021000
 800279c:	08002c28 	.word	0x08002c28
 80027a0:	20000000 	.word	0x20000000

080027a4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a8:	6805      	ldr	r5, [r0, #0]
 80027aa:	68c2      	ldr	r2, [r0, #12]
 80027ac:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027ae:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027b4:	4313      	orrs	r3, r2
 80027b6:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027b8:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80027ba:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027bc:	430b      	orrs	r3, r1
 80027be:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80027c0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80027c4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027c8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ce:	696b      	ldr	r3, [r5, #20]
 80027d0:	6982      	ldr	r2, [r0, #24]
 80027d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d6:	4313      	orrs	r3, r2
 80027d8:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80027da:	4b40      	ldr	r3, [pc, #256]	; (80028dc <UART_SetConfig+0x138>)
{
 80027dc:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80027de:	429d      	cmp	r5, r3
 80027e0:	f04f 0419 	mov.w	r4, #25
 80027e4:	d146      	bne.n	8002874 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027e6:	f7ff ffcd 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 80027ea:	fb04 f300 	mul.w	r3, r4, r0
 80027ee:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80027f2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80027f6:	00b6      	lsls	r6, r6, #2
 80027f8:	fbb3 f3f6 	udiv	r3, r3, r6
 80027fc:	fbb3 f3f8 	udiv	r3, r3, r8
 8002800:	011e      	lsls	r6, r3, #4
 8002802:	f7ff ffbf 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 8002806:	4360      	muls	r0, r4
 8002808:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002812:	f7ff ffb7 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 8002816:	4360      	muls	r0, r4
 8002818:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002822:	fbb3 f3f8 	udiv	r3, r3, r8
 8002826:	fb08 7313 	mls	r3, r8, r3, r7
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	3332      	adds	r3, #50	; 0x32
 800282e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002832:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002836:	f7ff ffa5 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 800283a:	4360      	muls	r0, r4
 800283c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002840:	0092      	lsls	r2, r2, #2
 8002842:	fbb0 faf2 	udiv	sl, r0, r2
 8002846:	f7ff ff9d 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800284a:	4360      	muls	r0, r4
 800284c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	fbb0 f3f3 	udiv	r3, r0, r3
 8002856:	fbb3 f3f8 	udiv	r3, r3, r8
 800285a:	fb08 a313 	mls	r3, r8, r3, sl
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	3332      	adds	r3, #50	; 0x32
 8002862:	fbb3 f3f8 	udiv	r3, r3, r8
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	433b      	orrs	r3, r7
 800286c:	4433      	add	r3, r6
 800286e:	60ab      	str	r3, [r5, #8]
 8002870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002874:	f7ff ff76 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 8002878:	fb04 f300 	mul.w	r3, r4, r0
 800287c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002880:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002884:	00b6      	lsls	r6, r6, #2
 8002886:	fbb3 f3f6 	udiv	r3, r3, r6
 800288a:	fbb3 f3f8 	udiv	r3, r3, r8
 800288e:	011e      	lsls	r6, r3, #4
 8002890:	f7ff ff68 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 8002894:	4360      	muls	r0, r4
 8002896:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	fbb0 f7f3 	udiv	r7, r0, r3
 80028a0:	f7ff ff60 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 80028a4:	4360      	muls	r0, r4
 80028a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b0:	fbb3 f3f8 	udiv	r3, r3, r8
 80028b4:	fb08 7313 	mls	r3, r8, r3, r7
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	3332      	adds	r3, #50	; 0x32
 80028bc:	fbb3 f3f8 	udiv	r3, r3, r8
 80028c0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80028c4:	f7ff ff4e 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 80028c8:	4360      	muls	r0, r4
 80028ca:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80028ce:	0092      	lsls	r2, r2, #2
 80028d0:	fbb0 faf2 	udiv	sl, r0, r2
 80028d4:	f7ff ff46 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 80028d8:	e7b7      	b.n	800284a <UART_SetConfig+0xa6>
 80028da:	bf00      	nop
 80028dc:	40013800 	.word	0x40013800

080028e0 <HAL_UART_Init>:
{
 80028e0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80028e2:	4604      	mov	r4, r0
 80028e4:	b340      	cbz	r0, 8002938 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80028e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80028ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028ee:	b91b      	cbnz	r3, 80028f8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80028f0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80028f4:	f7fe ff10 	bl	8001718 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80028f8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80028fa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80028fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002900:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002902:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002904:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002908:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800290a:	f7ff ff4b 	bl	80027a4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002910:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002920:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002928:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800292a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800292e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002932:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002936:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002938:	2001      	movs	r0, #1
}
 800293a:	bd10      	pop	{r4, pc}

0800293c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800293c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800293e:	e003      	b.n	8002948 <LoopCopyDataInit>

08002940 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002942:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002944:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002946:	3104      	adds	r1, #4

08002948 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002948:	480a      	ldr	r0, [pc, #40]	; (8002974 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800294a:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800294c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800294e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002950:	d3f6      	bcc.n	8002940 <CopyDataInit>
  ldr r2, =_sbss
 8002952:	4a0a      	ldr	r2, [pc, #40]	; (800297c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002954:	e002      	b.n	800295c <LoopFillZerobss>

08002956 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002958:	f842 3b04 	str.w	r3, [r2], #4

0800295c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800295e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002960:	d3f9      	bcc.n	8002956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002962:	f7fe fe95 	bl	8001690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002966:	f000 f80f 	bl	8002988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800296a:	f7fe fdcd 	bl	8001508 <main>
  bx lr
 800296e:	4770      	bx	lr
  ldr r3, =_sidata
 8002970:	08002c40 	.word	0x08002c40
  ldr r0, =_sdata
 8002974:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002978:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800297c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8002980:	20001740 	.word	0x20001740

08002984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002984:	e7fe      	b.n	8002984 <ADC1_2_IRQHandler>
	...

08002988 <__libc_init_array>:
 8002988:	b570      	push	{r4, r5, r6, lr}
 800298a:	2500      	movs	r5, #0
 800298c:	4e0c      	ldr	r6, [pc, #48]	; (80029c0 <__libc_init_array+0x38>)
 800298e:	4c0d      	ldr	r4, [pc, #52]	; (80029c4 <__libc_init_array+0x3c>)
 8002990:	1ba4      	subs	r4, r4, r6
 8002992:	10a4      	asrs	r4, r4, #2
 8002994:	42a5      	cmp	r5, r4
 8002996:	d109      	bne.n	80029ac <__libc_init_array+0x24>
 8002998:	f000 f92a 	bl	8002bf0 <_init>
 800299c:	2500      	movs	r5, #0
 800299e:	4e0a      	ldr	r6, [pc, #40]	; (80029c8 <__libc_init_array+0x40>)
 80029a0:	4c0a      	ldr	r4, [pc, #40]	; (80029cc <__libc_init_array+0x44>)
 80029a2:	1ba4      	subs	r4, r4, r6
 80029a4:	10a4      	asrs	r4, r4, #2
 80029a6:	42a5      	cmp	r5, r4
 80029a8:	d105      	bne.n	80029b6 <__libc_init_array+0x2e>
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
 80029ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029b0:	4798      	blx	r3
 80029b2:	3501      	adds	r5, #1
 80029b4:	e7ee      	b.n	8002994 <__libc_init_array+0xc>
 80029b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029ba:	4798      	blx	r3
 80029bc:	3501      	adds	r5, #1
 80029be:	e7f2      	b.n	80029a6 <__libc_init_array+0x1e>
 80029c0:	08002c38 	.word	0x08002c38
 80029c4:	08002c38 	.word	0x08002c38
 80029c8:	08002c38 	.word	0x08002c38
 80029cc:	08002c3c 	.word	0x08002c3c

080029d0 <memset>:
 80029d0:	4603      	mov	r3, r0
 80029d2:	4402      	add	r2, r0
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d100      	bne.n	80029da <memset+0xa>
 80029d8:	4770      	bx	lr
 80029da:	f803 1b01 	strb.w	r1, [r3], #1
 80029de:	e7f9      	b.n	80029d4 <memset+0x4>

080029e0 <sqrt>:
 80029e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e4:	b08b      	sub	sp, #44	; 0x2c
 80029e6:	4604      	mov	r4, r0
 80029e8:	460d      	mov	r5, r1
 80029ea:	f000 f84d 	bl	8002a88 <__ieee754_sqrt>
 80029ee:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <sqrt+0xa0>)
 80029f0:	4680      	mov	r8, r0
 80029f2:	f993 a000 	ldrsb.w	sl, [r3]
 80029f6:	4689      	mov	r9, r1
 80029f8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80029fc:	d02b      	beq.n	8002a56 <sqrt+0x76>
 80029fe:	4622      	mov	r2, r4
 8002a00:	462b      	mov	r3, r5
 8002a02:	4620      	mov	r0, r4
 8002a04:	4629      	mov	r1, r5
 8002a06:	f7fd fff3 	bl	80009f0 <__aeabi_dcmpun>
 8002a0a:	4683      	mov	fp, r0
 8002a0c:	bb18      	cbnz	r0, 8002a56 <sqrt+0x76>
 8002a0e:	2600      	movs	r6, #0
 8002a10:	2700      	movs	r7, #0
 8002a12:	4632      	mov	r2, r6
 8002a14:	463b      	mov	r3, r7
 8002a16:	4620      	mov	r0, r4
 8002a18:	4629      	mov	r1, r5
 8002a1a:	f7fd ffc1 	bl	80009a0 <__aeabi_dcmplt>
 8002a1e:	b1d0      	cbz	r0, 8002a56 <sqrt+0x76>
 8002a20:	2301      	movs	r3, #1
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <sqrt+0xa4>)
 8002a26:	f8cd b020 	str.w	fp, [sp, #32]
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002a30:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002a34:	f1ba 0f00 	cmp.w	sl, #0
 8002a38:	d112      	bne.n	8002a60 <sqrt+0x80>
 8002a3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002a3e:	4668      	mov	r0, sp
 8002a40:	f000 f8ce 	bl	8002be0 <matherr>
 8002a44:	b1b8      	cbz	r0, 8002a76 <sqrt+0x96>
 8002a46:	9b08      	ldr	r3, [sp, #32]
 8002a48:	b11b      	cbz	r3, 8002a52 <sqrt+0x72>
 8002a4a:	f000 f8cb 	bl	8002be4 <__errno>
 8002a4e:	9b08      	ldr	r3, [sp, #32]
 8002a50:	6003      	str	r3, [r0, #0]
 8002a52:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8002a56:	4640      	mov	r0, r8
 8002a58:	4649      	mov	r1, r9
 8002a5a:	b00b      	add	sp, #44	; 0x2c
 8002a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a60:	4632      	mov	r2, r6
 8002a62:	463b      	mov	r3, r7
 8002a64:	4630      	mov	r0, r6
 8002a66:	4639      	mov	r1, r7
 8002a68:	f7fd fe52 	bl	8000710 <__aeabi_ddiv>
 8002a6c:	f1ba 0f02 	cmp.w	sl, #2
 8002a70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002a74:	d1e3      	bne.n	8002a3e <sqrt+0x5e>
 8002a76:	f000 f8b5 	bl	8002be4 <__errno>
 8002a7a:	2321      	movs	r3, #33	; 0x21
 8002a7c:	6003      	str	r3, [r0, #0]
 8002a7e:	e7e2      	b.n	8002a46 <sqrt+0x66>
 8002a80:	20000070 	.word	0x20000070
 8002a84:	08002c30 	.word	0x08002c30

08002a88 <__ieee754_sqrt>:
 8002a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a8c:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8002bdc <__ieee754_sqrt+0x154>
 8002a90:	4606      	mov	r6, r0
 8002a92:	ea3e 0e01 	bics.w	lr, lr, r1
 8002a96:	460d      	mov	r5, r1
 8002a98:	4607      	mov	r7, r0
 8002a9a:	460a      	mov	r2, r1
 8002a9c:	460c      	mov	r4, r1
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	d10f      	bne.n	8002ac2 <__ieee754_sqrt+0x3a>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	f7fd fd09 	bl	80004bc <__aeabi_dmul>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4630      	mov	r0, r6
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	f7fd fb51 	bl	8000158 <__adddf3>
 8002ab6:	4606      	mov	r6, r0
 8002ab8:	460d      	mov	r5, r1
 8002aba:	4630      	mov	r0, r6
 8002abc:	4629      	mov	r1, r5
 8002abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ac2:	2900      	cmp	r1, #0
 8002ac4:	dc0e      	bgt.n	8002ae4 <__ieee754_sqrt+0x5c>
 8002ac6:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8002aca:	ea5e 0707 	orrs.w	r7, lr, r7
 8002ace:	d0f4      	beq.n	8002aba <__ieee754_sqrt+0x32>
 8002ad0:	b141      	cbz	r1, 8002ae4 <__ieee754_sqrt+0x5c>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	f7fd fb3d 	bl	8000154 <__aeabi_dsub>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	f7fd fe17 	bl	8000710 <__aeabi_ddiv>
 8002ae2:	e7e8      	b.n	8002ab6 <__ieee754_sqrt+0x2e>
 8002ae4:	1512      	asrs	r2, r2, #20
 8002ae6:	d10c      	bne.n	8002b02 <__ieee754_sqrt+0x7a>
 8002ae8:	2c00      	cmp	r4, #0
 8002aea:	d06e      	beq.n	8002bca <__ieee754_sqrt+0x142>
 8002aec:	2100      	movs	r1, #0
 8002aee:	02e6      	lsls	r6, r4, #11
 8002af0:	d56f      	bpl.n	8002bd2 <__ieee754_sqrt+0x14a>
 8002af2:	1e48      	subs	r0, r1, #1
 8002af4:	1a12      	subs	r2, r2, r0
 8002af6:	f1c1 0020 	rsb	r0, r1, #32
 8002afa:	fa23 f000 	lsr.w	r0, r3, r0
 8002afe:	4304      	orrs	r4, r0
 8002b00:	408b      	lsls	r3, r1
 8002b02:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002b06:	07d5      	lsls	r5, r2, #31
 8002b08:	f04f 0500 	mov.w	r5, #0
 8002b0c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002b10:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8002b14:	bf42      	ittt	mi
 8002b16:	0064      	lslmi	r4, r4, #1
 8002b18:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8002b1c:	005b      	lslmi	r3, r3, #1
 8002b1e:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8002b22:	1050      	asrs	r0, r2, #1
 8002b24:	4421      	add	r1, r4
 8002b26:	2216      	movs	r2, #22
 8002b28:	462c      	mov	r4, r5
 8002b2a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	19a7      	adds	r7, r4, r6
 8002b32:	428f      	cmp	r7, r1
 8002b34:	bfde      	ittt	le
 8002b36:	1bc9      	suble	r1, r1, r7
 8002b38:	19bc      	addle	r4, r7, r6
 8002b3a:	19ad      	addle	r5, r5, r6
 8002b3c:	0049      	lsls	r1, r1, #1
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8002b44:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8002b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002b4c:	d1f0      	bne.n	8002b30 <__ieee754_sqrt+0xa8>
 8002b4e:	f04f 0e20 	mov.w	lr, #32
 8002b52:	4694      	mov	ip, r2
 8002b54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8002b58:	42a1      	cmp	r1, r4
 8002b5a:	eb06 070c 	add.w	r7, r6, ip
 8002b5e:	dc02      	bgt.n	8002b66 <__ieee754_sqrt+0xde>
 8002b60:	d112      	bne.n	8002b88 <__ieee754_sqrt+0x100>
 8002b62:	429f      	cmp	r7, r3
 8002b64:	d810      	bhi.n	8002b88 <__ieee754_sqrt+0x100>
 8002b66:	2f00      	cmp	r7, #0
 8002b68:	eb07 0c06 	add.w	ip, r7, r6
 8002b6c:	da34      	bge.n	8002bd8 <__ieee754_sqrt+0x150>
 8002b6e:	f1bc 0f00 	cmp.w	ip, #0
 8002b72:	db31      	blt.n	8002bd8 <__ieee754_sqrt+0x150>
 8002b74:	f104 0801 	add.w	r8, r4, #1
 8002b78:	1b09      	subs	r1, r1, r4
 8002b7a:	4644      	mov	r4, r8
 8002b7c:	429f      	cmp	r7, r3
 8002b7e:	bf88      	it	hi
 8002b80:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8002b84:	1bdb      	subs	r3, r3, r7
 8002b86:	4432      	add	r2, r6
 8002b88:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8002b8c:	f1be 0e01 	subs.w	lr, lr, #1
 8002b90:	4439      	add	r1, r7
 8002b92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002b96:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8002b9a:	d1dd      	bne.n	8002b58 <__ieee754_sqrt+0xd0>
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	d006      	beq.n	8002bae <__ieee754_sqrt+0x126>
 8002ba0:	1c54      	adds	r4, r2, #1
 8002ba2:	bf0b      	itete	eq
 8002ba4:	4672      	moveq	r2, lr
 8002ba6:	3201      	addne	r2, #1
 8002ba8:	3501      	addeq	r5, #1
 8002baa:	f022 0201 	bicne.w	r2, r2, #1
 8002bae:	106b      	asrs	r3, r5, #1
 8002bb0:	0852      	lsrs	r2, r2, #1
 8002bb2:	07e9      	lsls	r1, r5, #31
 8002bb4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002bb8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002bbc:	bf48      	it	mi
 8002bbe:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8002bc2:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8002bc6:	4616      	mov	r6, r2
 8002bc8:	e777      	b.n	8002aba <__ieee754_sqrt+0x32>
 8002bca:	0adc      	lsrs	r4, r3, #11
 8002bcc:	3a15      	subs	r2, #21
 8002bce:	055b      	lsls	r3, r3, #21
 8002bd0:	e78a      	b.n	8002ae8 <__ieee754_sqrt+0x60>
 8002bd2:	0064      	lsls	r4, r4, #1
 8002bd4:	3101      	adds	r1, #1
 8002bd6:	e78a      	b.n	8002aee <__ieee754_sqrt+0x66>
 8002bd8:	46a0      	mov	r8, r4
 8002bda:	e7cd      	b.n	8002b78 <__ieee754_sqrt+0xf0>
 8002bdc:	7ff00000 	.word	0x7ff00000

08002be0 <matherr>:
 8002be0:	2000      	movs	r0, #0
 8002be2:	4770      	bx	lr

08002be4 <__errno>:
 8002be4:	4b01      	ldr	r3, [pc, #4]	; (8002bec <__errno+0x8>)
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	2000000c 	.word	0x2000000c

08002bf0 <_init>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	bf00      	nop
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr

08002bfc <_fini>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	bf00      	nop
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr
