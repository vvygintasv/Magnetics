
BluePillSensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003234  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003340  08003340  00013340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080033ec  080033ec  000133ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080033f0  080033f0  000133f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  080033f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000150  20000074  08003468  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001c4  08003468  000201c4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   000121b3  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026c4  00000000  00000000  00032250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000710  00000000  00000000  00034918  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ad0  00000000  00000000  00035028  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005671  00000000  00000000  00035af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002a15  00000000  00000000  0003b169  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003db7e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001d78  00000000  00000000  0003dbfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00005060  00000000  00000000  0003f974  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  000449d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  00044a70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003328 	.word	0x08003328

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003328 	.word	0x08003328

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	bf14      	ite	ne
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800044c:	e720      	b.n	8000290 <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_ul2d>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	b530      	push	{r4, r5, lr}
 800045a:	f04f 0500 	mov.w	r5, #0
 800045e:	e00a      	b.n	8000476 <__aeabi_l2d+0x16>

08000460 <__aeabi_l2d>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800046e:	d502      	bpl.n	8000476 <__aeabi_l2d+0x16>
 8000470:	4240      	negs	r0, r0
 8000472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000476:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000482:	f43f aedc 	beq.w	800023e <__adddf3+0xe6>
 8000486:	f04f 0203 	mov.w	r2, #3
 800048a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800048e:	bf18      	it	ne
 8000490:	3203      	addne	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800049e:	f1c2 0320 	rsb	r3, r2, #32
 80004a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ae:	ea40 000e 	orr.w	r0, r0, lr
 80004b2:	fa21 f102 	lsr.w	r1, r1, r2
 80004b6:	4414      	add	r4, r2
 80004b8:	e6c1      	b.n	800023e <__adddf3+0xe6>
 80004ba:	bf00      	nop

080004bc <__aeabi_dmul>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ca:	bf1d      	ittte	ne
 80004cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d0:	ea94 0f0c 	teqne	r4, ip
 80004d4:	ea95 0f0c 	teqne	r5, ip
 80004d8:	f000 f8de 	bleq	8000698 <__aeabi_dmul+0x1dc>
 80004dc:	442c      	add	r4, r5
 80004de:	ea81 0603 	eor.w	r6, r1, r3
 80004e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ee:	bf18      	it	ne
 80004f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004fc:	d038      	beq.n	8000570 <__aeabi_dmul+0xb4>
 80004fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800050e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000512:	f04f 0600 	mov.w	r6, #0
 8000516:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051a:	f09c 0f00 	teq	ip, #0
 800051e:	bf18      	it	ne
 8000520:	f04e 0e01 	orrne.w	lr, lr, #1
 8000524:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000528:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800052c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000530:	d204      	bcs.n	800053c <__aeabi_dmul+0x80>
 8000532:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000536:	416d      	adcs	r5, r5
 8000538:	eb46 0606 	adc.w	r6, r6, r6
 800053c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000540:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000544:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000548:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800054c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000550:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000554:	bf88      	it	hi
 8000556:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055a:	d81e      	bhi.n	800059a <__aeabi_dmul+0xde>
 800055c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000574:	ea46 0101 	orr.w	r1, r6, r1
 8000578:	ea40 0002 	orr.w	r0, r0, r2
 800057c:	ea81 0103 	eor.w	r1, r1, r3
 8000580:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000584:	bfc2      	ittt	gt
 8000586:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800058e:	bd70      	popgt	{r4, r5, r6, pc}
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f04f 0e00 	mov.w	lr, #0
 8000598:	3c01      	subs	r4, #1
 800059a:	f300 80ab 	bgt.w	80006f4 <__aeabi_dmul+0x238>
 800059e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a2:	bfde      	ittt	le
 80005a4:	2000      	movle	r0, #0
 80005a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd70      	pople	{r4, r5, r6, pc}
 80005ac:	f1c4 0400 	rsb	r4, r4, #0
 80005b0:	3c20      	subs	r4, #32
 80005b2:	da35      	bge.n	8000620 <__aeabi_dmul+0x164>
 80005b4:	340c      	adds	r4, #12
 80005b6:	dc1b      	bgt.n	80005f0 <__aeabi_dmul+0x134>
 80005b8:	f104 0414 	add.w	r4, r4, #20
 80005bc:	f1c4 0520 	rsb	r5, r4, #32
 80005c0:	fa00 f305 	lsl.w	r3, r0, r5
 80005c4:	fa20 f004 	lsr.w	r0, r0, r4
 80005c8:	fa01 f205 	lsl.w	r2, r1, r5
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	fa21 f604 	lsr.w	r6, r1, r4
 80005e0:	eb42 0106 	adc.w	r1, r2, r6
 80005e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e8:	bf08      	it	eq
 80005ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f1c4 040c 	rsb	r4, r4, #12
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f304 	lsl.w	r3, r0, r4
 80005fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000600:	fa01 f204 	lsl.w	r2, r1, r4
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	f141 0100 	adc.w	r1, r1, #0
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f205 	lsl.w	r2, r0, r5
 8000628:	ea4e 0e02 	orr.w	lr, lr, r2
 800062c:	fa20 f304 	lsr.w	r3, r0, r4
 8000630:	fa01 f205 	lsl.w	r2, r1, r5
 8000634:	ea43 0302 	orr.w	r3, r3, r2
 8000638:	fa21 f004 	lsr.w	r0, r1, r4
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	fa21 f204 	lsr.w	r2, r1, r4
 8000644:	ea20 0002 	bic.w	r0, r0, r2
 8000648:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f094 0f00 	teq	r4, #0
 800065c:	d10f      	bne.n	800067e <__aeabi_dmul+0x1c2>
 800065e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000662:	0040      	lsls	r0, r0, #1
 8000664:	eb41 0101 	adc.w	r1, r1, r1
 8000668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800066c:	bf08      	it	eq
 800066e:	3c01      	subeq	r4, #1
 8000670:	d0f7      	beq.n	8000662 <__aeabi_dmul+0x1a6>
 8000672:	ea41 0106 	orr.w	r1, r1, r6
 8000676:	f095 0f00 	teq	r5, #0
 800067a:	bf18      	it	ne
 800067c:	4770      	bxne	lr
 800067e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	eb43 0303 	adc.w	r3, r3, r3
 8000688:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3d01      	subeq	r5, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1c6>
 8000692:	ea43 0306 	orr.w	r3, r3, r6
 8000696:	4770      	bx	lr
 8000698:	ea94 0f0c 	teq	r4, ip
 800069c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a0:	bf18      	it	ne
 80006a2:	ea95 0f0c 	teqne	r5, ip
 80006a6:	d00c      	beq.n	80006c2 <__aeabi_dmul+0x206>
 80006a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ac:	bf18      	it	ne
 80006ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b2:	d1d1      	bne.n	8000658 <__aeabi_dmul+0x19c>
 80006b4:	ea81 0103 	eor.w	r1, r1, r3
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c6:	bf06      	itte	eq
 80006c8:	4610      	moveq	r0, r2
 80006ca:	4619      	moveq	r1, r3
 80006cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d0:	d019      	beq.n	8000706 <__aeabi_dmul+0x24a>
 80006d2:	ea94 0f0c 	teq	r4, ip
 80006d6:	d102      	bne.n	80006de <__aeabi_dmul+0x222>
 80006d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006dc:	d113      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006de:	ea95 0f0c 	teq	r5, ip
 80006e2:	d105      	bne.n	80006f0 <__aeabi_dmul+0x234>
 80006e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006e8:	bf1c      	itt	ne
 80006ea:	4610      	movne	r0, r2
 80006ec:	4619      	movne	r1, r3
 80006ee:	d10a      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800070e:	bd70      	pop	{r4, r5, r6, pc}

08000710 <__aeabi_ddiv>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800071e:	bf1d      	ittte	ne
 8000720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000724:	ea94 0f0c 	teqne	r4, ip
 8000728:	ea95 0f0c 	teqne	r5, ip
 800072c:	f000 f8a7 	bleq	800087e <__aeabi_ddiv+0x16e>
 8000730:	eba4 0405 	sub.w	r4, r4, r5
 8000734:	ea81 0e03 	eor.w	lr, r1, r3
 8000738:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800073c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000740:	f000 8088 	beq.w	8000854 <__aeabi_ddiv+0x144>
 8000744:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000748:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800074c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000750:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000754:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000758:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800075c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000760:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000764:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000768:	429d      	cmp	r5, r3
 800076a:	bf08      	it	eq
 800076c:	4296      	cmpeq	r6, r2
 800076e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000772:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000776:	d202      	bcs.n	800077e <__aeabi_ddiv+0x6e>
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	ea4f 0232 	mov.w	r2, r2, rrx
 800077e:	1ab6      	subs	r6, r6, r2
 8000780:	eb65 0503 	sbc.w	r5, r5, r3
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800078e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000792:	ebb6 0e02 	subs.w	lr, r6, r2
 8000796:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079a:	bf22      	ittt	cs
 800079c:	1ab6      	subcs	r6, r6, r2
 800079e:	4675      	movcs	r5, lr
 80007a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f0:	d018      	beq.n	8000824 <__aeabi_ddiv+0x114>
 80007f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000802:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000806:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800080e:	d1c0      	bne.n	8000792 <__aeabi_ddiv+0x82>
 8000810:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000814:	d10b      	bne.n	800082e <__aeabi_ddiv+0x11e>
 8000816:	ea41 0100 	orr.w	r1, r1, r0
 800081a:	f04f 0000 	mov.w	r0, #0
 800081e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000822:	e7b6      	b.n	8000792 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf04      	itt	eq
 800082a:	4301      	orreq	r1, r0
 800082c:	2000      	moveq	r0, #0
 800082e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000832:	bf88      	it	hi
 8000834:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000838:	f63f aeaf 	bhi.w	800059a <__aeabi_dmul+0xde>
 800083c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000840:	bf04      	itt	eq
 8000842:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000846:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084a:	f150 0000 	adcs.w	r0, r0, #0
 800084e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000858:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800085c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000860:	bfc2      	ittt	gt
 8000862:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086a:	bd70      	popgt	{r4, r5, r6, pc}
 800086c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000870:	f04f 0e00 	mov.w	lr, #0
 8000874:	3c01      	subs	r4, #1
 8000876:	e690      	b.n	800059a <__aeabi_dmul+0xde>
 8000878:	ea45 0e06 	orr.w	lr, r5, r6
 800087c:	e68d      	b.n	800059a <__aeabi_dmul+0xde>
 800087e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000882:	ea94 0f0c 	teq	r4, ip
 8000886:	bf08      	it	eq
 8000888:	ea95 0f0c 	teqeq	r5, ip
 800088c:	f43f af3b 	beq.w	8000706 <__aeabi_dmul+0x24a>
 8000890:	ea94 0f0c 	teq	r4, ip
 8000894:	d10a      	bne.n	80008ac <__aeabi_ddiv+0x19c>
 8000896:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089a:	f47f af34 	bne.w	8000706 <__aeabi_dmul+0x24a>
 800089e:	ea95 0f0c 	teq	r5, ip
 80008a2:	f47f af25 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008a6:	4610      	mov	r0, r2
 80008a8:	4619      	mov	r1, r3
 80008aa:	e72c      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008ac:	ea95 0f0c 	teq	r5, ip
 80008b0:	d106      	bne.n	80008c0 <__aeabi_ddiv+0x1b0>
 80008b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b6:	f43f aefd 	beq.w	80006b4 <__aeabi_dmul+0x1f8>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e722      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c4:	bf18      	it	ne
 80008c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ca:	f47f aec5 	bne.w	8000658 <__aeabi_dmul+0x19c>
 80008ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d2:	f47f af0d 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008da:	f47f aeeb 	bne.w	80006b4 <__aeabi_dmul+0x1f8>
 80008de:	e712      	b.n	8000706 <__aeabi_dmul+0x24a>

080008e0 <__gedf2>:
 80008e0:	f04f 3cff 	mov.w	ip, #4294967295
 80008e4:	e006      	b.n	80008f4 <__cmpdf2+0x4>
 80008e6:	bf00      	nop

080008e8 <__ledf2>:
 80008e8:	f04f 0c01 	mov.w	ip, #1
 80008ec:	e002      	b.n	80008f4 <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__cmpdf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000904:	bf18      	it	ne
 8000906:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090a:	d01b      	beq.n	8000944 <__cmpdf2+0x54>
 800090c:	b001      	add	sp, #4
 800090e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000912:	bf0c      	ite	eq
 8000914:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000918:	ea91 0f03 	teqne	r1, r3
 800091c:	bf02      	ittt	eq
 800091e:	ea90 0f02 	teqeq	r0, r2
 8000922:	2000      	moveq	r0, #0
 8000924:	4770      	bxeq	lr
 8000926:	f110 0f00 	cmn.w	r0, #0
 800092a:	ea91 0f03 	teq	r1, r3
 800092e:	bf58      	it	pl
 8000930:	4299      	cmppl	r1, r3
 8000932:	bf08      	it	eq
 8000934:	4290      	cmpeq	r0, r2
 8000936:	bf2c      	ite	cs
 8000938:	17d8      	asrcs	r0, r3, #31
 800093a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800093e:	f040 0001 	orr.w	r0, r0, #1
 8000942:	4770      	bx	lr
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	d102      	bne.n	8000954 <__cmpdf2+0x64>
 800094e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000952:	d107      	bne.n	8000964 <__cmpdf2+0x74>
 8000954:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800095c:	d1d6      	bne.n	800090c <__cmpdf2+0x1c>
 800095e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000962:	d0d3      	beq.n	800090c <__cmpdf2+0x1c>
 8000964:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <__aeabi_cdrcmple>:
 800096c:	4684      	mov	ip, r0
 800096e:	4610      	mov	r0, r2
 8000970:	4662      	mov	r2, ip
 8000972:	468c      	mov	ip, r1
 8000974:	4619      	mov	r1, r3
 8000976:	4663      	mov	r3, ip
 8000978:	e000      	b.n	800097c <__aeabi_cdcmpeq>
 800097a:	bf00      	nop

0800097c <__aeabi_cdcmpeq>:
 800097c:	b501      	push	{r0, lr}
 800097e:	f7ff ffb7 	bl	80008f0 <__cmpdf2>
 8000982:	2800      	cmp	r0, #0
 8000984:	bf48      	it	mi
 8000986:	f110 0f00 	cmnmi.w	r0, #0
 800098a:	bd01      	pop	{r0, pc}

0800098c <__aeabi_dcmpeq>:
 800098c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000990:	f7ff fff4 	bl	800097c <__aeabi_cdcmpeq>
 8000994:	bf0c      	ite	eq
 8000996:	2001      	moveq	r0, #1
 8000998:	2000      	movne	r0, #0
 800099a:	f85d fb08 	ldr.w	pc, [sp], #8
 800099e:	bf00      	nop

080009a0 <__aeabi_dcmplt>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff ffea 	bl	800097c <__aeabi_cdcmpeq>
 80009a8:	bf34      	ite	cc
 80009aa:	2001      	movcc	r0, #1
 80009ac:	2000      	movcs	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmple>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffe0 	bl	800097c <__aeabi_cdcmpeq>
 80009bc:	bf94      	ite	ls
 80009be:	2001      	movls	r0, #1
 80009c0:	2000      	movhi	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmpge>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffce 	bl	800096c <__aeabi_cdrcmple>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpgt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffc4 	bl	800096c <__aeabi_cdrcmple>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpun>:
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__aeabi_dcmpun+0x10>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d10a      	bne.n	8000a16 <__aeabi_dcmpun+0x26>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__aeabi_dcmpun+0x20>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d102      	bne.n	8000a16 <__aeabi_dcmpun+0x26>
 8000a10:	f04f 0000 	mov.w	r0, #0
 8000a14:	4770      	bx	lr
 8000a16:	f04f 0001 	mov.w	r0, #1
 8000a1a:	4770      	bx	lr

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_frsub>:
 8000abc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac0:	e002      	b.n	8000ac8 <__addsf3>
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_fsub>:
 8000ac4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac8 <__addsf3>:
 8000ac8:	0042      	lsls	r2, r0, #1
 8000aca:	bf1f      	itttt	ne
 8000acc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad0:	ea92 0f03 	teqne	r2, r3
 8000ad4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000adc:	d06a      	beq.n	8000bb4 <__addsf3+0xec>
 8000ade:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ae2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae6:	bfc1      	itttt	gt
 8000ae8:	18d2      	addgt	r2, r2, r3
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	4048      	eorgt	r0, r1
 8000aee:	4041      	eorgt	r1, r0
 8000af0:	bfb8      	it	lt
 8000af2:	425b      	neglt	r3, r3
 8000af4:	2b19      	cmp	r3, #25
 8000af6:	bf88      	it	hi
 8000af8:	4770      	bxhi	lr
 8000afa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b16:	bf18      	it	ne
 8000b18:	4249      	negne	r1, r1
 8000b1a:	ea92 0f03 	teq	r2, r3
 8000b1e:	d03f      	beq.n	8000ba0 <__addsf3+0xd8>
 8000b20:	f1a2 0201 	sub.w	r2, r2, #1
 8000b24:	fa41 fc03 	asr.w	ip, r1, r3
 8000b28:	eb10 000c 	adds.w	r0, r0, ip
 8000b2c:	f1c3 0320 	rsb	r3, r3, #32
 8000b30:	fa01 f103 	lsl.w	r1, r1, r3
 8000b34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__addsf3+0x78>
 8000b3a:	4249      	negs	r1, r1
 8000b3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b44:	d313      	bcc.n	8000b6e <__addsf3+0xa6>
 8000b46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b4a:	d306      	bcc.n	8000b5a <__addsf3+0x92>
 8000b4c:	0840      	lsrs	r0, r0, #1
 8000b4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b52:	f102 0201 	add.w	r2, r2, #1
 8000b56:	2afe      	cmp	r2, #254	; 0xfe
 8000b58:	d251      	bcs.n	8000bfe <__addsf3+0x136>
 8000b5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b62:	bf08      	it	eq
 8000b64:	f020 0001 	biceq.w	r0, r0, #1
 8000b68:	ea40 0003 	orr.w	r0, r0, r3
 8000b6c:	4770      	bx	lr
 8000b6e:	0049      	lsls	r1, r1, #1
 8000b70:	eb40 0000 	adc.w	r0, r0, r0
 8000b74:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	d1ed      	bne.n	8000b5a <__addsf3+0x92>
 8000b7e:	fab0 fc80 	clz	ip, r0
 8000b82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b86:	ebb2 020c 	subs.w	r2, r2, ip
 8000b8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8e:	bfaa      	itet	ge
 8000b90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b94:	4252      	neglt	r2, r2
 8000b96:	4318      	orrge	r0, r3
 8000b98:	bfbc      	itt	lt
 8000b9a:	40d0      	lsrlt	r0, r2
 8000b9c:	4318      	orrlt	r0, r3
 8000b9e:	4770      	bx	lr
 8000ba0:	f092 0f00 	teq	r2, #0
 8000ba4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba8:	bf06      	itte	eq
 8000baa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bae:	3201      	addeq	r2, #1
 8000bb0:	3b01      	subne	r3, #1
 8000bb2:	e7b5      	b.n	8000b20 <__addsf3+0x58>
 8000bb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	bf18      	it	ne
 8000bbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc2:	d021      	beq.n	8000c08 <__addsf3+0x140>
 8000bc4:	ea92 0f03 	teq	r2, r3
 8000bc8:	d004      	beq.n	8000bd4 <__addsf3+0x10c>
 8000bca:	f092 0f00 	teq	r2, #0
 8000bce:	bf08      	it	eq
 8000bd0:	4608      	moveq	r0, r1
 8000bd2:	4770      	bx	lr
 8000bd4:	ea90 0f01 	teq	r0, r1
 8000bd8:	bf1c      	itt	ne
 8000bda:	2000      	movne	r0, #0
 8000bdc:	4770      	bxne	lr
 8000bde:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000be2:	d104      	bne.n	8000bee <__addsf3+0x126>
 8000be4:	0040      	lsls	r0, r0, #1
 8000be6:	bf28      	it	cs
 8000be8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	4770      	bx	lr
 8000bee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bf2:	bf3c      	itt	cc
 8000bf4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bxcc	lr
 8000bfa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c06:	4770      	bx	lr
 8000c08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c0c:	bf16      	itet	ne
 8000c0e:	4608      	movne	r0, r1
 8000c10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c14:	4601      	movne	r1, r0
 8000c16:	0242      	lsls	r2, r0, #9
 8000c18:	bf06      	itte	eq
 8000c1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1e:	ea90 0f01 	teqeq	r0, r1
 8000c22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_ui2f>:
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e004      	b.n	8000c38 <__aeabi_i2f+0x8>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_i2f>:
 8000c30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c34:	bf48      	it	mi
 8000c36:	4240      	negmi	r0, r0
 8000c38:	ea5f 0c00 	movs.w	ip, r0
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c44:	4601      	mov	r1, r0
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	e01c      	b.n	8000c86 <__aeabi_l2f+0x2a>

08000c4c <__aeabi_ul2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e00a      	b.n	8000c70 <__aeabi_l2f+0x14>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_l2f>:
 8000c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c60:	bf08      	it	eq
 8000c62:	4770      	bxeq	lr
 8000c64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c68:	d502      	bpl.n	8000c70 <__aeabi_l2f+0x14>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	ea5f 0c01 	movs.w	ip, r1
 8000c74:	bf02      	ittt	eq
 8000c76:	4684      	moveq	ip, r0
 8000c78:	4601      	moveq	r1, r0
 8000c7a:	2000      	moveq	r0, #0
 8000c7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c80:	bf08      	it	eq
 8000c82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c8a:	fabc f28c 	clz	r2, ip
 8000c8e:	3a08      	subs	r2, #8
 8000c90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c94:	db10      	blt.n	8000cb8 <__aeabi_l2f+0x5c>
 8000c96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f102 0220 	add.w	r2, r2, #32
 8000cbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_fmul>:
 8000cd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cdc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce0:	bf1e      	ittt	ne
 8000ce2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce6:	ea92 0f0c 	teqne	r2, ip
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d06f      	beq.n	8000dd0 <__aeabi_fmul+0xf8>
 8000cf0:	441a      	add	r2, r3
 8000cf2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf6:	0240      	lsls	r0, r0, #9
 8000cf8:	bf18      	it	ne
 8000cfa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfe:	d01e      	beq.n	8000d3e <__aeabi_fmul+0x66>
 8000d00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d18:	bf3e      	ittt	cc
 8000d1a:	0049      	lslcc	r1, r1, #1
 8000d1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d20:	005b      	lslcc	r3, r3, #1
 8000d22:	ea40 0001 	orr.w	r0, r0, r1
 8000d26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d2a:	2afd      	cmp	r2, #253	; 0xfd
 8000d2c:	d81d      	bhi.n	8000d6a <__aeabi_fmul+0x92>
 8000d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	4770      	bx	lr
 8000d3e:	f090 0f00 	teq	r0, #0
 8000d42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d46:	bf08      	it	eq
 8000d48:	0249      	lsleq	r1, r1, #9
 8000d4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d52:	3a7f      	subs	r2, #127	; 0x7f
 8000d54:	bfc2      	ittt	gt
 8000d56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5e:	4770      	bxgt	lr
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	3a01      	subs	r2, #1
 8000d6a:	dc5d      	bgt.n	8000e28 <__aeabi_fmul+0x150>
 8000d6c:	f112 0f19 	cmn.w	r2, #25
 8000d70:	bfdc      	itt	le
 8000d72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d76:	4770      	bxle	lr
 8000d78:	f1c2 0200 	rsb	r2, r2, #0
 8000d7c:	0041      	lsls	r1, r0, #1
 8000d7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d82:	f1c2 0220 	rsb	r2, r2, #32
 8000d86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8e:	f140 0000 	adc.w	r0, r0, #0
 8000d92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d96:	bf08      	it	eq
 8000d98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d9c:	4770      	bx	lr
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da6:	bf02      	ittt	eq
 8000da8:	0040      	lsleq	r0, r0, #1
 8000daa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dae:	3a01      	subeq	r2, #1
 8000db0:	d0f9      	beq.n	8000da6 <__aeabi_fmul+0xce>
 8000db2:	ea40 000c 	orr.w	r0, r0, ip
 8000db6:	f093 0f00 	teq	r3, #0
 8000dba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dbe:	bf02      	ittt	eq
 8000dc0:	0049      	lsleq	r1, r1, #1
 8000dc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc6:	3b01      	subeq	r3, #1
 8000dc8:	d0f9      	beq.n	8000dbe <__aeabi_fmul+0xe6>
 8000dca:	ea41 010c 	orr.w	r1, r1, ip
 8000dce:	e78f      	b.n	8000cf0 <__aeabi_fmul+0x18>
 8000dd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd4:	ea92 0f0c 	teq	r2, ip
 8000dd8:	bf18      	it	ne
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d00a      	beq.n	8000df6 <__aeabi_fmul+0x11e>
 8000de0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de4:	bf18      	it	ne
 8000de6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	d1d8      	bne.n	8000d9e <__aeabi_fmul+0xc6>
 8000dec:	ea80 0001 	eor.w	r0, r0, r1
 8000df0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df4:	4770      	bx	lr
 8000df6:	f090 0f00 	teq	r0, #0
 8000dfa:	bf17      	itett	ne
 8000dfc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e00:	4608      	moveq	r0, r1
 8000e02:	f091 0f00 	teqne	r1, #0
 8000e06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e0a:	d014      	beq.n	8000e36 <__aeabi_fmul+0x15e>
 8000e0c:	ea92 0f0c 	teq	r2, ip
 8000e10:	d101      	bne.n	8000e16 <__aeabi_fmul+0x13e>
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	d10f      	bne.n	8000e36 <__aeabi_fmul+0x15e>
 8000e16:	ea93 0f0c 	teq	r3, ip
 8000e1a:	d103      	bne.n	8000e24 <__aeabi_fmul+0x14c>
 8000e1c:	024b      	lsls	r3, r1, #9
 8000e1e:	bf18      	it	ne
 8000e20:	4608      	movne	r0, r1
 8000e22:	d108      	bne.n	8000e36 <__aeabi_fmul+0x15e>
 8000e24:	ea80 0001 	eor.w	r0, r0, r1
 8000e28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e34:	4770      	bx	lr
 8000e36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3e:	4770      	bx	lr

08000e40 <__aeabi_fdiv>:
 8000e40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e48:	bf1e      	ittt	ne
 8000e4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4e:	ea92 0f0c 	teqne	r2, ip
 8000e52:	ea93 0f0c 	teqne	r3, ip
 8000e56:	d069      	beq.n	8000f2c <__aeabi_fdiv+0xec>
 8000e58:	eba2 0203 	sub.w	r2, r2, r3
 8000e5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e60:	0249      	lsls	r1, r1, #9
 8000e62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e66:	d037      	beq.n	8000ed8 <__aeabi_fdiv+0x98>
 8000e68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	bf38      	it	cc
 8000e7c:	005b      	lslcc	r3, r3, #1
 8000e7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e86:	428b      	cmp	r3, r1
 8000e88:	bf24      	itt	cs
 8000e8a:	1a5b      	subcs	r3, r3, r1
 8000e8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e94:	bf24      	itt	cs
 8000e96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ea2:	bf24      	itt	cs
 8000ea4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	bf18      	it	ne
 8000ebe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ec2:	d1e0      	bne.n	8000e86 <__aeabi_fdiv+0x46>
 8000ec4:	2afd      	cmp	r2, #253	; 0xfd
 8000ec6:	f63f af50 	bhi.w	8000d6a <__aeabi_fmul+0x92>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed0:	bf08      	it	eq
 8000ed2:	f020 0001 	biceq.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000edc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee0:	327f      	adds	r2, #127	; 0x7f
 8000ee2:	bfc2      	ittt	gt
 8000ee4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eec:	4770      	bxgt	lr
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	3a01      	subs	r2, #1
 8000ef8:	e737      	b.n	8000d6a <__aeabi_fmul+0x92>
 8000efa:	f092 0f00 	teq	r2, #0
 8000efe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0040      	lsleq	r0, r0, #1
 8000f06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f0a:	3a01      	subeq	r2, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fdiv+0xc2>
 8000f0e:	ea40 000c 	orr.w	r0, r0, ip
 8000f12:	f093 0f00 	teq	r3, #0
 8000f16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f1a:	bf02      	ittt	eq
 8000f1c:	0049      	lsleq	r1, r1, #1
 8000f1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f22:	3b01      	subeq	r3, #1
 8000f24:	d0f9      	beq.n	8000f1a <__aeabi_fdiv+0xda>
 8000f26:	ea41 010c 	orr.w	r1, r1, ip
 8000f2a:	e795      	b.n	8000e58 <__aeabi_fdiv+0x18>
 8000f2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f30:	ea92 0f0c 	teq	r2, ip
 8000f34:	d108      	bne.n	8000f48 <__aeabi_fdiv+0x108>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	f47f af7d 	bne.w	8000e36 <__aeabi_fmul+0x15e>
 8000f3c:	ea93 0f0c 	teq	r3, ip
 8000f40:	f47f af70 	bne.w	8000e24 <__aeabi_fmul+0x14c>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e776      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	d104      	bne.n	8000f58 <__aeabi_fdiv+0x118>
 8000f4e:	024b      	lsls	r3, r1, #9
 8000f50:	f43f af4c 	beq.w	8000dec <__aeabi_fmul+0x114>
 8000f54:	4608      	mov	r0, r1
 8000f56:	e76e      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f5c:	bf18      	it	ne
 8000f5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f62:	d1ca      	bne.n	8000efa <__aeabi_fdiv+0xba>
 8000f64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f68:	f47f af5c 	bne.w	8000e24 <__aeabi_fmul+0x14c>
 8000f6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f70:	f47f af3c 	bne.w	8000dec <__aeabi_fmul+0x114>
 8000f74:	e75f      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f76:	bf00      	nop

08000f78 <config>:
 *      Author: Caustic_Zinc
 */
#include "MagConfig.h"
#include "i2c.h"
unsigned char buffer[6];
void config() {
 8000f78:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	/* SetUp measurement mode -------------------------------------------*/
	buffer[0] = 0x11; // Select mode register
	buffer[1] = 0x40; //Continuous measurement mode
	HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, buffer, 2, 100);
 8000f7c:	2564      	movs	r5, #100	; 0x64
	buffer[0] = 0x11; // Select mode register
 8000f7e:	f04f 0911 	mov.w	r9, #17
	buffer[1] = 0x40; //Continuous measurement mode
 8000f82:	2640      	movs	r6, #64	; 0x40

	HAL_Delay(15);
	buffer[0] = 0x10; // Select mode register
 8000f84:	f04f 0810 	mov.w	r8, #16
	buffer[1] = 1; //Continuous measurement mode
 8000f88:	2701      	movs	r7, #1
	buffer[0] = 0x11; // Select mode register
 8000f8a:	4c1a      	ldr	r4, [pc, #104]	; (8000ff4 <config+0x7c>)
	HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, buffer, 2, 100);
 8000f8c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8000ffc <config+0x84>
 8000f90:	4622      	mov	r2, r4
 8000f92:	2302      	movs	r3, #2
 8000f94:	210e      	movs	r1, #14
 8000f96:	9500      	str	r5, [sp, #0]
 8000f98:	4650      	mov	r0, sl
	buffer[1] = 0x40; //Continuous measurement mode
 8000f9a:	7066      	strb	r6, [r4, #1]
	buffer[0] = 0x11; // Select mode register
 8000f9c:	f884 9000 	strb.w	r9, [r4]
	HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, buffer, 2, 100);
 8000fa0:	f000 fe00 	bl	8001ba4 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 8000fa4:	200f      	movs	r0, #15
 8000fa6:	f000 fb2d 	bl	8001604 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, buffer, 2, 100);
 8000faa:	4622      	mov	r2, r4
 8000fac:	9500      	str	r5, [sp, #0]
 8000fae:	2302      	movs	r3, #2
 8000fb0:	210e      	movs	r1, #14
 8000fb2:	4650      	mov	r0, sl
	buffer[0] = 0x10; // Select mode register
 8000fb4:	f884 8000 	strb.w	r8, [r4]
	buffer[1] = 1; //Continuous measurement mode
 8000fb8:	7067      	strb	r7, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, buffer, 2, 100);
 8000fba:	f000 fdf3 	bl	8001ba4 <HAL_I2C_Master_Transmit>

	buffer[0] = 0x11; // Select mode register
	buffer[1] = 0x40; //Continuous measurement mode
 8000fbe:	7066      	strb	r6, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, buffer, 2, 100);
 8000fc0:	4e0d      	ldr	r6, [pc, #52]	; (8000ff8 <config+0x80>)
 8000fc2:	4622      	mov	r2, r4
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	210e      	movs	r1, #14
 8000fc8:	9500      	str	r5, [sp, #0]
 8000fca:	4630      	mov	r0, r6
	buffer[0] = 0x11; // Select mode register
 8000fcc:	f884 9000 	strb.w	r9, [r4]
	HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, buffer, 2, 100);
 8000fd0:	f000 fde8 	bl	8001ba4 <HAL_I2C_Master_Transmit>

	HAL_Delay(15);
 8000fd4:	200f      	movs	r0, #15
 8000fd6:	f000 fb15 	bl	8001604 <HAL_Delay>
	buffer[0] = 0x10; // Select mode register
	buffer[1] = 1; //Continuous measurement mode
	HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, buffer, 2, 100);
 8000fda:	9500      	str	r5, [sp, #0]
 8000fdc:	2302      	movs	r3, #2
 8000fde:	4622      	mov	r2, r4
 8000fe0:	210e      	movs	r1, #14
 8000fe2:	4630      	mov	r0, r6
	buffer[0] = 0x10; // Select mode register
 8000fe4:	f884 8000 	strb.w	r8, [r4]
	buffer[1] = 1; //Continuous measurement mode
 8000fe8:	7067      	strb	r7, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, buffer, 2, 100);
 8000fea:	f000 fddb 	bl	8001ba4 <HAL_I2C_Master_Transmit>

}
 8000fee:	b002      	add	sp, #8
 8000ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff4:	2000009c 	.word	0x2000009c
 8000ff8:	20000128 	.word	0x20000128
 8000ffc:	200000d4 	.word	0x200000d4

08001000 <make_unit_vectors>:
	koord_R[2] = read_zR();
	*/
}

void make_unit_vectors(int coord[], float unit_vect[])
{
 8001000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001004:	1f04      	subs	r4, r0, #4
 8001006:	460e      	mov	r6, r1
 8001008:	4625      	mov	r5, r4
	float sum = 0;
 800100a:	f04f 0a00 	mov.w	sl, #0
 800100e:	f100 0708 	add.w	r7, r0, #8
	for(int i = 0; i < 3; i++) sum += pow(coord[i], 2);
 8001012:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8001016:	f7ff f9eb 	bl	80003f0 <__aeabi_i2d>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	f7ff fa4d 	bl	80004bc <__aeabi_dmul>
 8001022:	4680      	mov	r8, r0
 8001024:	4650      	mov	r0, sl
 8001026:	4689      	mov	r9, r1
 8001028:	f7ff f9f4 	bl	8000414 <__aeabi_f2d>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4640      	mov	r0, r8
 8001032:	4649      	mov	r1, r9
 8001034:	f7ff f890 	bl	8000158 <__adddf3>
 8001038:	f7ff fcf0 	bl	8000a1c <__aeabi_d2f>
 800103c:	42bd      	cmp	r5, r7
 800103e:	4682      	mov	sl, r0
 8001040:	d1e7      	bne.n	8001012 <make_unit_vectors+0x12>

	sum = sqrt(sum);
 8001042:	f7ff f9e7 	bl	8000414 <__aeabi_f2d>
 8001046:	f002 f829 	bl	800309c <sqrt>
 800104a:	f7ff fce7 	bl	8000a1c <__aeabi_d2f>
 800104e:	4607      	mov	r7, r0
 8001050:	3e04      	subs	r6, #4

	for(int i = 0; i < 3; i++) unit_vect[i] = coord[i] / sum;
 8001052:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8001056:	f7ff fdeb 	bl	8000c30 <__aeabi_i2f>
 800105a:	4639      	mov	r1, r7
 800105c:	f7ff fef0 	bl	8000e40 <__aeabi_fdiv>
 8001060:	42a5      	cmp	r5, r4
 8001062:	f846 0f04 	str.w	r0, [r6, #4]!
 8001066:	d1f4      	bne.n	8001052 <make_unit_vectors+0x52>
}
 8001068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800106c <mag_read_register_all_L>:

void mag_read_register_all_L(uint8_t receive_buffer[6])
{
 800106c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // first set the register pointer to the register wanted to be read
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, 0x01, 1, 100);  // note the & operator which gives us the address of the register_pointer variable
 800106e:	2664      	movs	r6, #100	; 0x64
 8001070:	2301      	movs	r3, #1
 8001072:	4d09      	ldr	r5, [pc, #36]	; (8001098 <mag_read_register_all_L+0x2c>)
{
 8001074:	ac04      	add	r4, sp, #16
 8001076:	f844 0d04 	str.w	r0, [r4, #-4]!
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, 0x01, 1, 100);  // note the & operator which gives us the address of the register_pointer variable
 800107a:	461a      	mov	r2, r3
 800107c:	9600      	str	r6, [sp, #0]
 800107e:	210e      	movs	r1, #14
 8001080:	4628      	mov	r0, r5
 8001082:	f000 fd8f 	bl	8001ba4 <HAL_I2C_Master_Transmit>

    // receive the 2 x 8bit data into the receive buffer
    HAL_I2C_Master_Receive(&hi2c1, MAG_ADDR, (uint8_t*)&receive_buffer, 6, 100);
 8001086:	9600      	str	r6, [sp, #0]
 8001088:	2306      	movs	r3, #6
 800108a:	4622      	mov	r2, r4
 800108c:	210e      	movs	r1, #14
 800108e:	4628      	mov	r0, r5
 8001090:	f000 fe5e 	bl	8001d50 <HAL_I2C_Master_Receive>
}
 8001094:	b004      	add	sp, #16
 8001096:	bd70      	pop	{r4, r5, r6, pc}
 8001098:	200000d4 	.word	0x200000d4

0800109c <mag_read_register_all_R>:

void mag_read_register_all_R(uint8_t receive_buffer[6])
{
 800109c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // first set the register pointer to the register wanted to be read
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, 0x01, 1, 100);  // note the & operator which gives us the address of the register_pointer variable
 800109e:	2664      	movs	r6, #100	; 0x64
 80010a0:	2301      	movs	r3, #1
 80010a2:	4d09      	ldr	r5, [pc, #36]	; (80010c8 <mag_read_register_all_R+0x2c>)
{
 80010a4:	ac04      	add	r4, sp, #16
 80010a6:	f844 0d04 	str.w	r0, [r4, #-4]!
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, 0x01, 1, 100);  // note the & operator which gives us the address of the register_pointer variable
 80010aa:	461a      	mov	r2, r3
 80010ac:	9600      	str	r6, [sp, #0]
 80010ae:	210e      	movs	r1, #14
 80010b0:	4628      	mov	r0, r5
 80010b2:	f000 fd77 	bl	8001ba4 <HAL_I2C_Master_Transmit>

    // receive the 2 x 8bit data into the receive buffer
    HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, (uint8_t*)&receive_buffer, 1, 100);
 80010b6:	9600      	str	r6, [sp, #0]
 80010b8:	2301      	movs	r3, #1
 80010ba:	4622      	mov	r2, r4
 80010bc:	210e      	movs	r1, #14
 80010be:	4628      	mov	r0, r5
 80010c0:	f000 fe46 	bl	8001d50 <HAL_I2C_Master_Receive>
}
 80010c4:	b004      	add	sp, #16
 80010c6:	bd70      	pop	{r4, r5, r6, pc}
 80010c8:	20000128 	.word	0x20000128

080010cc <mag_read_valueL>:
}
*/
void mag_read_valueL(int koord_L[], int koord_R[])
{
  uint8_t reg_value[6];
  reg_value[0] = 0;
 80010cc:	2300      	movs	r3, #0
{
 80010ce:	b513      	push	{r0, r1, r4, lr}
 80010d0:	4604      	mov	r4, r0
  reg_value[1] = 0;
  reg_value[2] = 0;
  reg_value[3] = 0;
  reg_value[4] = 0;
  reg_value[5] = 0;
  mag_read_register_all_L(reg_value);
 80010d2:	4668      	mov	r0, sp
  reg_value[0] = 0;
 80010d4:	f88d 3000 	strb.w	r3, [sp]
  reg_value[1] = 0;
 80010d8:	f88d 3001 	strb.w	r3, [sp, #1]
  reg_value[2] = 0;
 80010dc:	f88d 3002 	strb.w	r3, [sp, #2]
  reg_value[3] = 0;
 80010e0:	f88d 3003 	strb.w	r3, [sp, #3]
  reg_value[4] = 0;
 80010e4:	f88d 3004 	strb.w	r3, [sp, #4]
  reg_value[5] = 0;
 80010e8:	f88d 3005 	strb.w	r3, [sp, #5]
  mag_read_register_all_L(reg_value);
 80010ec:	f7ff ffbe 	bl	800106c <mag_read_register_all_L>



  koord_L[0] = (reg_value[1]|(reg_value[0] << 8));
 80010f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80010f4:	ba5b      	rev16	r3, r3
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	6023      	str	r3, [r4, #0]
  koord_L[1] = (reg_value[3]|(reg_value[2] << 8));
 80010fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80010fe:	ba5b      	rev16	r3, r3
 8001100:	b29b      	uxth	r3, r3
 8001102:	6063      	str	r3, [r4, #4]
  koord_L[2] = (reg_value[5]|(reg_value[4] << 8));
 8001104:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001108:	ba5b      	rev16	r3, r3
 800110a:	b29b      	uxth	r3, r3
 800110c:	60a3      	str	r3, [r4, #8]
  //val_high = mag_read_registerL(msb_reg);
  //HAL_Delay(2);
  //val_low = mag_read_registerL(lsb_reg);
  //unsigned int out = (val_low|(val_high << 8)); //concatenate the MSB and LSB
  //return out;
}
 800110e:	b002      	add	sp, #8
 8001110:	bd10      	pop	{r4, pc}

08001112 <mag_read_valueR>:
void mag_read_valueR(int koord_L[], int koord_R[])
{
 8001112:	b513      	push	{r0, r1, r4, lr}
 8001114:	460c      	mov	r4, r1
	uint8_t reg_value[6];
	mag_read_register_all_R(reg_value);
 8001116:	4668      	mov	r0, sp
 8001118:	f7ff ffc0 	bl	800109c <mag_read_register_all_R>

	koord_R[0] = (reg_value[1]|(reg_value[0] << 8));
 800111c:	f8bd 3000 	ldrh.w	r3, [sp]
 8001120:	ba5b      	rev16	r3, r3
 8001122:	b29b      	uxth	r3, r3
 8001124:	6023      	str	r3, [r4, #0]
	koord_R[1] = (reg_value[3]|(reg_value[2] << 8));
 8001126:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800112a:	ba5b      	rev16	r3, r3
 800112c:	b29b      	uxth	r3, r3
 800112e:	6063      	str	r3, [r4, #4]
	koord_R[2] = (reg_value[5]|(reg_value[4] << 8));
 8001130:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001134:	ba5b      	rev16	r3, r3
 8001136:	b29b      	uxth	r3, r3
 8001138:	60a3      	str	r3, [r4, #8]
	//val_high = mag_read_registerL(msb_reg);
	//HAL_Delay(2);
	//val_low = mag_read_registerL(lsb_reg);
	//unsigned int out = (val_low|(val_high << 8)); //concatenate the MSB and LSB
	//return out;
}
 800113a:	b002      	add	sp, #8
 800113c:	bd10      	pop	{r4, pc}

0800113e <read_values_to_arrays>:
{
 800113e:	b538      	push	{r3, r4, r5, lr}
 8001140:	4604      	mov	r4, r0
 8001142:	460d      	mov	r5, r1
	mag_read_valueL(koord_L, koord_R);
 8001144:	f7ff ffc2 	bl	80010cc <mag_read_valueL>
	mag_read_valueR(koord_L, koord_R);
 8001148:	4629      	mov	r1, r5
 800114a:	4620      	mov	r0, r4
}
 800114c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mag_read_valueR(koord_L, koord_R);
 8001150:	f7ff bfdf 	b.w	8001112 <mag_read_valueR>

08001154 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	2210      	movs	r2, #16
{
 8001156:	b510      	push	{r4, lr}
 8001158:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	eb0d 0002 	add.w	r0, sp, r2
 800115e:	2100      	movs	r1, #0
 8001160:	f001 fb28 	bl	80027b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_GPIO_Init+0x88>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001166:	4c1e      	ldr	r4, [pc, #120]	; (80011e0 <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001168:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800116a:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116c:	f042 0210 	orr.w	r2, r2, #16
 8001170:	619a      	str	r2, [r3, #24]
 8001172:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001178:	f002 0210 	and.w	r2, r2, #16
 800117c:	9200      	str	r2, [sp, #0]
 800117e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001180:	699a      	ldr	r2, [r3, #24]
 8001182:	f042 0220 	orr.w	r2, r2, #32
 8001186:	619a      	str	r2, [r3, #24]
 8001188:	699a      	ldr	r2, [r3, #24]
 800118a:	f002 0220 	and.w	r2, r2, #32
 800118e:	9201      	str	r2, [sp, #4]
 8001190:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	699a      	ldr	r2, [r3, #24]
 8001194:	f042 0208 	orr.w	r2, r2, #8
 8001198:	619a      	str	r2, [r3, #24]
 800119a:	699a      	ldr	r2, [r3, #24]
 800119c:	f002 0208 	and.w	r2, r2, #8
 80011a0:	9202      	str	r2, [sp, #8]
 80011a2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	699a      	ldr	r2, [r3, #24]
 80011a6:	f042 0204 	orr.w	r2, r2, #4
 80011aa:	619a      	str	r2, [r3, #24]
 80011ac:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	9303      	str	r3, [sp, #12]
 80011b6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011b8:	f000 fb72 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011cc:	a904      	add	r1, sp, #16
 80011ce:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f000 fa85 	bl	80016e0 <HAL_GPIO_Init>

}
 80011d6:	b008      	add	sp, #32
 80011d8:	bd10      	pop	{r4, pc}
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40011000 	.word	0x40011000

080011e4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011e4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80011e6:	480c      	ldr	r0, [pc, #48]	; (8001218 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_I2C1_Init+0x38>)
 80011ea:	f8df e034 	ldr.w	lr, [pc, #52]	; 8001220 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 80011f2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f6:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f8:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011fa:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011fc:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fe:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001200:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001202:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001204:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001206:	f000 fc4d 	bl	8001aa4 <HAL_I2C_Init>
 800120a:	b118      	cbz	r0, 8001214 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 800120c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001210:	f000 b87e 	b.w	8001310 <Error_Handler>
 8001214:	bd08      	pop	{r3, pc}
 8001216:	bf00      	nop
 8001218:	200000d4 	.word	0x200000d4
 800121c:	40005400 	.word	0x40005400
 8001220:	00061a80 	.word	0x00061a80

08001224 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001224:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8001226:	480c      	ldr	r0, [pc, #48]	; (8001258 <MX_I2C2_Init+0x34>)
  hi2c2.Init.ClockSpeed = 400000;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_I2C2_Init+0x38>)
 800122a:	f8df e034 	ldr.w	lr, [pc, #52]	; 8001260 <MX_I2C2_Init+0x3c>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 400000;
 8001232:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001236:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001238:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800123a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800123c:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800123e:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001240:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001242:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001244:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001246:	f000 fc2d 	bl	8001aa4 <HAL_I2C_Init>
 800124a:	b118      	cbz	r0, 8001254 <MX_I2C2_Init+0x30>
  {
    Error_Handler();
  }

}
 800124c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001250:	f000 b85e 	b.w	8001310 <Error_Handler>
 8001254:	bd08      	pop	{r3, pc}
 8001256:	bf00      	nop
 8001258:	20000128 	.word	0x20000128
 800125c:	40005800 	.word	0x40005800
 8001260:	00061a80 	.word	0x00061a80

08001264 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	2210      	movs	r2, #16
{
 8001266:	b510      	push	{r4, lr}
 8001268:	4604      	mov	r4, r0
 800126a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	eb0d 0002 	add.w	r0, sp, r2
 8001270:	2100      	movs	r1, #0
 8001272:	f001 fa9f 	bl	80027b4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	4a21      	ldr	r2, [pc, #132]	; (8001300 <HAL_I2C_MspInit+0x9c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d11e      	bne.n	80012bc <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4c21      	ldr	r4, [pc, #132]	; (8001304 <HAL_I2C_MspInit+0xa0>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	4820      	ldr	r0, [pc, #128]	; (8001308 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	61a3      	str	r3, [r4, #24]
 800128c:	69a3      	ldr	r3, [r4, #24]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001296:	23c0      	movs	r3, #192	; 0xc0
 8001298:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129a:	2312      	movs	r3, #18
 800129c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f000 fa1d 	bl	80016e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a6:	69e3      	ldr	r3, [r4, #28]
 80012a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ac:	61e3      	str	r3, [r4, #28]
 80012ae:	69e3      	ldr	r3, [r4, #28]
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012b8:	b008      	add	sp, #32
 80012ba:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 80012bc:	4a13      	ldr	r2, [pc, #76]	; (800130c <HAL_I2C_MspInit+0xa8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d1fa      	bne.n	80012b8 <HAL_I2C_MspInit+0x54>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	4c10      	ldr	r4, [pc, #64]	; (8001304 <HAL_I2C_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	480f      	ldr	r0, [pc, #60]	; (8001308 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	61a3      	str	r3, [r4, #24]
 80012d0:	69a3      	ldr	r3, [r4, #24]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e0:	2312      	movs	r3, #18
 80012e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f000 f9fa 	bl	80016e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012ec:	69e3      	ldr	r3, [r4, #28]
 80012ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012f2:	61e3      	str	r3, [r4, #28]
 80012f4:	69e3      	ldr	r3, [r4, #28]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fa:	9303      	str	r3, [sp, #12]
 80012fc:	9b03      	ldr	r3, [sp, #12]
}
 80012fe:	e7db      	b.n	80012b8 <HAL_I2C_MspInit+0x54>
 8001300:	40005400 	.word	0x40005400
 8001304:	40021000 	.word	0x40021000
 8001308:	40010c00 	.word	0x40010c00
 800130c:	40005800 	.word	0x40005800

08001310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001310:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("Error Handler Activated\n");
 8001312:	4809      	ldr	r0, [pc, #36]	; (8001338 <Error_Handler+0x28>)
 8001314:	f001 fab2 	bl	800287c <puts>
	HAL_Init();
 8001318:	f000 f950 	bl	80015bc <HAL_Init>
	SystemClock_Config();
 800131c:	f000 f80e 	bl	800133c <SystemClock_Config>
	MX_GPIO_Init();
 8001320:	f7ff ff18 	bl	8001154 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001324:	f7ff ff5e 	bl	80011e4 <MX_I2C1_Init>
	MX_I2C2_Init();
 8001328:	f7ff ff7c 	bl	8001224 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 800132c:	f000 f8c8 	bl	80014c0 <MX_USART1_UART_Init>
	config();
  /* USER CODE END Error_Handler_Debug */
}
 8001330:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	config();
 8001334:	f7ff be20 	b.w	8000f78 <config>
 8001338:	08003350 	.word	0x08003350

0800133c <SystemClock_Config>:
{
 800133c:	b510      	push	{r4, lr}
 800133e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001340:	2228      	movs	r2, #40	; 0x28
 8001342:	2100      	movs	r1, #0
 8001344:	a806      	add	r0, sp, #24
 8001346:	f001 fa35 	bl	80027b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134a:	2214      	movs	r2, #20
 800134c:	2100      	movs	r1, #0
 800134e:	a801      	add	r0, sp, #4
 8001350:	f001 fa30 	bl	80027b4 <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001358:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135a:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800135e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001360:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001364:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001366:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001368:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800136c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	f000 fe71 	bl	8002054 <HAL_RCC_OscConfig>
 8001372:	b108      	cbz	r0, 8001378 <SystemClock_Config+0x3c>
    Error_Handler();
 8001374:	f7ff ffcc 	bl	8001310 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001378:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800137a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001380:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001382:	2102      	movs	r1, #2
 8001384:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001386:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001388:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138a:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800138e:	f001 f829 	bl	80023e4 <HAL_RCC_ClockConfig>
 8001392:	b108      	cbz	r0, 8001398 <SystemClock_Config+0x5c>
    Error_Handler();
 8001394:	f7ff ffbc 	bl	8001310 <Error_Handler>
}
 8001398:	b010      	add	sp, #64	; 0x40
 800139a:	bd10      	pop	{r4, pc}

0800139c <main>:
{
 800139c:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 800139e:	f000 f90d 	bl	80015bc <HAL_Init>
  SystemClock_Config();
 80013a2:	f7ff ffcb 	bl	800133c <SystemClock_Config>
  MX_GPIO_Init();
 80013a6:	f7ff fed5 	bl	8001154 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013aa:	f7ff ff1b 	bl	80011e4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80013ae:	f7ff ff39 	bl	8001224 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80013b2:	f000 f885 	bl	80014c0 <MX_USART1_UART_Init>
config();
 80013b6:	f7ff fddf 	bl	8000f78 <config>
	read_values_to_arrays(coord_L, coord_R);
 80013ba:	4c14      	ldr	r4, [pc, #80]	; (800140c <main+0x70>)
 80013bc:	4d14      	ldr	r5, [pc, #80]	; (8001410 <main+0x74>)
	make_unit_vectors(coord_L, unit_vect_L);
 80013be:	4e15      	ldr	r6, [pc, #84]	; (8001414 <main+0x78>)
	read_values_to_arrays(coord_L, coord_R);
 80013c0:	4621      	mov	r1, r4
 80013c2:	4628      	mov	r0, r5
 80013c4:	f7ff febb 	bl	800113e <read_values_to_arrays>
	for(int i = 0; i < 3; i++)
 80013c8:	2300      	movs	r3, #0
	  if(coord_L[i] > 65536 / 2) coord_L[i] = coord_L[i] - 65536;
 80013ca:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80013ce:	0099      	lsls	r1, r3, #2
 80013d0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80013d4:	bfc4      	itt	gt
 80013d6:	f5a2 3280 	subgt.w	r2, r2, #65536	; 0x10000
 80013da:	f845 2023 	strgt.w	r2, [r5, r3, lsl #2]
	  if(coord_R[i] > 65536 / 2) coord_R[i] = coord_R[i] - 65536;
 80013de:	590a      	ldr	r2, [r1, r4]
	for(int i = 0; i < 3; i++)
 80013e0:	3301      	adds	r3, #1
	  if(coord_R[i] > 65536 / 2) coord_R[i] = coord_R[i] - 65536;
 80013e2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80013e6:	bfc4      	itt	gt
 80013e8:	f5a2 3280 	subgt.w	r2, r2, #65536	; 0x10000
 80013ec:	510a      	strgt	r2, [r1, r4]
	for(int i = 0; i < 3; i++)
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d1eb      	bne.n	80013ca <main+0x2e>
	make_unit_vectors(coord_L, unit_vect_L);
 80013f2:	4631      	mov	r1, r6
 80013f4:	4628      	mov	r0, r5
 80013f6:	f7ff fe03 	bl	8001000 <make_unit_vectors>
	make_unit_vectors(coord_R, unit_vect_R);
 80013fa:	4620      	mov	r0, r4
 80013fc:	4906      	ldr	r1, [pc, #24]	; (8001418 <main+0x7c>)
 80013fe:	f7ff fdff 	bl	8001000 <make_unit_vectors>
	HAL_Delay(5);
 8001402:	2005      	movs	r0, #5
 8001404:	f000 f8fe 	bl	8001604 <HAL_Delay>
	read_values_to_arrays(coord_L, coord_R);
 8001408:	e7da      	b.n	80013c0 <main+0x24>
 800140a:	bf00      	nop
 800140c:	200000a4 	.word	0x200000a4
 8001410:	200000c8 	.word	0x200000c8
 8001414:	200000bc 	.word	0x200000bc
 8001418:	200000b0 	.word	0x200000b0

0800141c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_MspInit+0x3c>)
{
 800141e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001420:	699a      	ldr	r2, [r3, #24]
 8001422:	f042 0201 	orr.w	r2, r2, #1
 8001426:	619a      	str	r2, [r3, #24]
 8001428:	699a      	ldr	r2, [r3, #24]
 800142a:	f002 0201 	and.w	r2, r2, #1
 800142e:	9200      	str	r2, [sp, #0]
 8001430:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	69da      	ldr	r2, [r3, #28]
 8001434:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001438:	61da      	str	r2, [r3, #28]
 800143a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001446:	6853      	ldr	r3, [r2, #4]
 8001448:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800144c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001450:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	b002      	add	sp, #8
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000
 800145c:	40010000 	.word	0x40010000

08001460 <NMI_Handler>:
 8001460:	4770      	bx	lr

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	e7fe      	b.n	8001462 <HardFault_Handler>

08001464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001464:	e7fe      	b.n	8001464 <MemManage_Handler>

08001466 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	e7fe      	b.n	8001468 <UsageFault_Handler>

0800146a <SVC_Handler>:
 800146a:	4770      	bx	lr

0800146c <DebugMon_Handler>:
 800146c:	4770      	bx	lr

0800146e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146e:	4770      	bx	lr

08001470 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 b8b6 	b.w	80015e0 <HAL_IncTick>

08001474 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <SystemInit+0x40>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	f042 0201 	orr.w	r2, r2, #1
 800147c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <SystemInit+0x44>)
 8001482:	400a      	ands	r2, r1
 8001484:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800148c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001490:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001498:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80014a0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80014a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014a6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80014a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <SystemInit+0x48>)
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	f8ff0000 	.word	0xf8ff0000
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014c0:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_EVEN;
 80014c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  huart1.Init.BaudRate = 115200;
 80014c6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 80014ca:	480a      	ldr	r0, [pc, #40]	; (80014f4 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <MX_USART1_UART_Init+0x38>)
  huart1.Init.Parity = UART_PARITY_EVEN;
 80014ce:	6102      	str	r2, [r0, #16]
  huart1.Init.BaudRate = 115200;
 80014d0:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d4:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d8:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014dc:	60c3      	str	r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e2:	f001 f8ef 	bl	80026c4 <HAL_UART_Init>
 80014e6:	b118      	cbz	r0, 80014f0 <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 80014e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80014ec:	f7ff bf10 	b.w	8001310 <Error_Handler>
 80014f0:	bd08      	pop	{r3, pc}
 80014f2:	bf00      	nop
 80014f4:	2000017c 	.word	0x2000017c
 80014f8:	40013800 	.word	0x40013800

080014fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014fc:	b510      	push	{r4, lr}
 80014fe:	4604      	mov	r4, r0
 8001500:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	2210      	movs	r2, #16
 8001504:	2100      	movs	r1, #0
 8001506:	a802      	add	r0, sp, #8
 8001508:	f001 f954 	bl	80027b4 <memset>
  if(uartHandle->Instance==USART1)
 800150c:	6822      	ldr	r2, [r4, #0]
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_UART_MspInit+0x70>)
 8001510:	429a      	cmp	r2, r3
 8001512:	d128      	bne.n	8001566 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001514:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001518:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800151c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001520:	619a      	str	r2, [r3, #24]
 8001522:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	4812      	ldr	r0, [pc, #72]	; (8001570 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001526:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800152a:	9200      	str	r2, [sp, #0]
 800152c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	699a      	ldr	r2, [r3, #24]
 8001530:	f042 0204 	orr.w	r2, r2, #4
 8001534:	619a      	str	r2, [r3, #24]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001544:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f000 f8c7 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001556:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	a902      	add	r1, sp, #8
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f000 f8bd 	bl	80016e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001566:	b006      	add	sp, #24
 8001568:	bd10      	pop	{r4, pc}
 800156a:	bf00      	nop
 800156c:	40013800 	.word	0x40013800
 8001570:	40010800 	.word	0x40010800

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_InitTick+0x3c>)
{
 8001578:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157a:	7818      	ldrb	r0, [r3, #0]
 800157c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001580:	fbb3 f3f0 	udiv	r3, r3, r0
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <HAL_InitTick+0x40>)
 8001586:	6810      	ldr	r0, [r2, #0]
 8001588:	fbb0 f0f3 	udiv	r0, r0, r3
 800158c:	f000 f892 	bl	80016b4 <HAL_SYSTICK_Config>
 8001590:	4604      	mov	r4, r0
 8001592:	b958      	cbnz	r0, 80015ac <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001594:	2d0f      	cmp	r5, #15
 8001596:	d809      	bhi.n	80015ac <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	4602      	mov	r2, r0
 800159a:	4629      	mov	r1, r5
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f000 f854 	bl	800164c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <HAL_InitTick+0x44>)
 80015a6:	4620      	mov	r0, r4
 80015a8:	601d      	str	r5, [r3, #0]
 80015aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80015ac:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80015ae:	bd38      	pop	{r3, r4, r5, pc}
 80015b0:	20000004 	.word	0x20000004
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000008 	.word	0x20000008

080015bc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_Init+0x20>)
{
 80015be:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	f043 0310 	orr.w	r3, r3, #16
 80015c8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ca:	f000 f82d 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff ffd0 	bl	8001574 <HAL_InitTick>
  HAL_MspInit();
 80015d4:	f7ff ff22 	bl	800141c <HAL_MspInit>
}
 80015d8:	2000      	movs	r0, #0
 80015da:	bd08      	pop	{r3, pc}
 80015dc:	40022000 	.word	0x40022000

080015e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015e0:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <HAL_IncTick+0x10>)
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <HAL_IncTick+0x14>)
 80015e4:	6811      	ldr	r1, [r2, #0]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	440b      	add	r3, r1
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200001bc 	.word	0x200001bc
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015f8:	4b01      	ldr	r3, [pc, #4]	; (8001600 <HAL_GetTick+0x8>)
 80015fa:	6818      	ldr	r0, [r3, #0]
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200001bc 	.word	0x200001bc

08001604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001604:	b538      	push	{r3, r4, r5, lr}
 8001606:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001608:	f7ff fff6 	bl	80015f8 <HAL_GetTick>
 800160c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001610:	bf1e      	ittt	ne
 8001612:	4b04      	ldrne	r3, [pc, #16]	; (8001624 <HAL_Delay+0x20>)
 8001614:	781b      	ldrbne	r3, [r3, #0]
 8001616:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001618:	f7ff ffee 	bl	80015f8 <HAL_GetTick>
 800161c:	1b40      	subs	r0, r0, r5
 800161e:	4284      	cmp	r4, r0
 8001620:	d8fa      	bhi.n	8001618 <HAL_Delay+0x14>
  {
  }
}
 8001622:	bd38      	pop	{r3, r4, r5, pc}
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800162a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800162e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001636:	041b      	lsls	r3, r3, #16
 8001638:	0c1b      	lsrs	r3, r3, #16
 800163a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800163e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001642:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001644:	60d3      	str	r3, [r2, #12]
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164e:	b530      	push	{r4, r5, lr}
 8001650:	68dc      	ldr	r4, [r3, #12]
 8001652:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001656:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	2b04      	cmp	r3, #4
 800165e:	bf28      	it	cs
 8001660:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001668:	bf98      	it	ls
 800166a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	fa05 f303 	lsl.w	r3, r5, r3
 8001670:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001674:	bf88      	it	hi
 8001676:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	4019      	ands	r1, r3
 800167a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	fa05 f404 	lsl.w	r4, r5, r4
 8001680:	3c01      	subs	r4, #1
 8001682:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001684:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001686:	ea42 0201 	orr.w	r2, r2, r1
 800168a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168e:	bfaf      	iteee	ge
 8001690:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	4b06      	ldrlt	r3, [pc, #24]	; (80016b0 <HAL_NVIC_SetPriority+0x64>)
 8001696:	f000 000f 	andlt.w	r0, r0, #15
 800169a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	bfa5      	ittet	ge
 800169e:	b2d2      	uxtbge	r2, r2
 80016a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80016aa:	bd30      	pop	{r4, r5, pc}
 80016ac:	e000ed00 	.word	0xe000ed00
 80016b0:	e000ed14 	.word	0xe000ed14

080016b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b4:	3801      	subs	r0, #1
 80016b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80016ba:	d20a      	bcs.n	80016d2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80016d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e010 	.word	0xe000e010
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80016e4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	4616      	mov	r6, r2
 80016e8:	4b65      	ldr	r3, [pc, #404]	; (8001880 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ea:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001890 <HAL_GPIO_Init+0x1b0>
 80016ee:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001894 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80016f2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80016f8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001700:	45a0      	cmp	r8, r4
 8001702:	d17f      	bne.n	8001804 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001704:	684d      	ldr	r5, [r1, #4]
 8001706:	2d12      	cmp	r5, #18
 8001708:	f000 80af 	beq.w	800186a <HAL_GPIO_Init+0x18a>
 800170c:	f200 8088 	bhi.w	8001820 <HAL_GPIO_Init+0x140>
 8001710:	2d02      	cmp	r5, #2
 8001712:	f000 80a7 	beq.w	8001864 <HAL_GPIO_Init+0x184>
 8001716:	d87c      	bhi.n	8001812 <HAL_GPIO_Init+0x132>
 8001718:	2d00      	cmp	r5, #0
 800171a:	f000 808e 	beq.w	800183a <HAL_GPIO_Init+0x15a>
 800171e:	2d01      	cmp	r5, #1
 8001720:	f000 809e 	beq.w	8001860 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001724:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001728:	2cff      	cmp	r4, #255	; 0xff
 800172a:	bf93      	iteet	ls
 800172c:	4682      	movls	sl, r0
 800172e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001732:	3d08      	subhi	r5, #8
 8001734:	f8d0 b000 	ldrls.w	fp, [r0]
 8001738:	bf92      	itee	ls
 800173a:	00b5      	lslls	r5, r6, #2
 800173c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001740:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001742:	fa09 f805 	lsl.w	r8, r9, r5
 8001746:	ea2b 0808 	bic.w	r8, fp, r8
 800174a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800174e:	bf88      	it	hi
 8001750:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001754:	ea48 0505 	orr.w	r5, r8, r5
 8001758:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001760:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001764:	d04e      	beq.n	8001804 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001766:	4d47      	ldr	r5, [pc, #284]	; (8001884 <HAL_GPIO_Init+0x1a4>)
 8001768:	4f46      	ldr	r7, [pc, #280]	; (8001884 <HAL_GPIO_Init+0x1a4>)
 800176a:	69ad      	ldr	r5, [r5, #24]
 800176c:	f026 0803 	bic.w	r8, r6, #3
 8001770:	f045 0501 	orr.w	r5, r5, #1
 8001774:	61bd      	str	r5, [r7, #24]
 8001776:	69bd      	ldr	r5, [r7, #24]
 8001778:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800177c:	f005 0501 	and.w	r5, r5, #1
 8001780:	9501      	str	r5, [sp, #4]
 8001782:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001786:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800178a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800178c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001790:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001794:	fa09 f90b 	lsl.w	r9, r9, fp
 8001798:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179c:	4d3a      	ldr	r5, [pc, #232]	; (8001888 <HAL_GPIO_Init+0x1a8>)
 800179e:	42a8      	cmp	r0, r5
 80017a0:	d068      	beq.n	8001874 <HAL_GPIO_Init+0x194>
 80017a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017a6:	42a8      	cmp	r0, r5
 80017a8:	d066      	beq.n	8001878 <HAL_GPIO_Init+0x198>
 80017aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017ae:	42a8      	cmp	r0, r5
 80017b0:	d064      	beq.n	800187c <HAL_GPIO_Init+0x19c>
 80017b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017b6:	42a8      	cmp	r0, r5
 80017b8:	bf0c      	ite	eq
 80017ba:	2503      	moveq	r5, #3
 80017bc:	2504      	movne	r5, #4
 80017be:	fa05 f50b 	lsl.w	r5, r5, fp
 80017c2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80017c6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ca:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017cc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80017d0:	bf14      	ite	ne
 80017d2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017d4:	43a5      	biceq	r5, r4
 80017d6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017d8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017da:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80017de:	bf14      	ite	ne
 80017e0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017e2:	43a5      	biceq	r5, r4
 80017e4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017e6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017e8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80017ec:	bf14      	ite	ne
 80017ee:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017f0:	43a5      	biceq	r5, r4
 80017f2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017f4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017f6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80017fa:	bf14      	ite	ne
 80017fc:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017fe:	ea25 0404 	biceq.w	r4, r5, r4
 8001802:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001804:	3601      	adds	r6, #1
 8001806:	2e10      	cmp	r6, #16
 8001808:	f47f af73 	bne.w	80016f2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800180c:	b003      	add	sp, #12
 800180e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001812:	2d03      	cmp	r5, #3
 8001814:	d022      	beq.n	800185c <HAL_GPIO_Init+0x17c>
 8001816:	2d11      	cmp	r5, #17
 8001818:	d184      	bne.n	8001724 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800181a:	68ca      	ldr	r2, [r1, #12]
 800181c:	3204      	adds	r2, #4
          break;
 800181e:	e781      	b.n	8001724 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001820:	4f1a      	ldr	r7, [pc, #104]	; (800188c <HAL_GPIO_Init+0x1ac>)
 8001822:	42bd      	cmp	r5, r7
 8001824:	d009      	beq.n	800183a <HAL_GPIO_Init+0x15a>
 8001826:	d812      	bhi.n	800184e <HAL_GPIO_Init+0x16e>
 8001828:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001898 <HAL_GPIO_Init+0x1b8>
 800182c:	454d      	cmp	r5, r9
 800182e:	d004      	beq.n	800183a <HAL_GPIO_Init+0x15a>
 8001830:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001834:	454d      	cmp	r5, r9
 8001836:	f47f af75 	bne.w	8001724 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800183a:	688a      	ldr	r2, [r1, #8]
 800183c:	b1c2      	cbz	r2, 8001870 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800183e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001840:	bf0c      	ite	eq
 8001842:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001846:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800184a:	2208      	movs	r2, #8
 800184c:	e76a      	b.n	8001724 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800184e:	4575      	cmp	r5, lr
 8001850:	d0f3      	beq.n	800183a <HAL_GPIO_Init+0x15a>
 8001852:	4565      	cmp	r5, ip
 8001854:	d0f1      	beq.n	800183a <HAL_GPIO_Init+0x15a>
 8001856:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800189c <HAL_GPIO_Init+0x1bc>
 800185a:	e7eb      	b.n	8001834 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800185c:	2200      	movs	r2, #0
 800185e:	e761      	b.n	8001724 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001860:	68ca      	ldr	r2, [r1, #12]
          break;
 8001862:	e75f      	b.n	8001724 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001864:	68ca      	ldr	r2, [r1, #12]
 8001866:	3208      	adds	r2, #8
          break;
 8001868:	e75c      	b.n	8001724 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800186a:	68ca      	ldr	r2, [r1, #12]
 800186c:	320c      	adds	r2, #12
          break;
 800186e:	e759      	b.n	8001724 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001870:	2204      	movs	r2, #4
 8001872:	e757      	b.n	8001724 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001874:	2500      	movs	r5, #0
 8001876:	e7a2      	b.n	80017be <HAL_GPIO_Init+0xde>
 8001878:	2501      	movs	r5, #1
 800187a:	e7a0      	b.n	80017be <HAL_GPIO_Init+0xde>
 800187c:	2502      	movs	r5, #2
 800187e:	e79e      	b.n	80017be <HAL_GPIO_Init+0xde>
 8001880:	40010400 	.word	0x40010400
 8001884:	40021000 	.word	0x40021000
 8001888:	40010800 	.word	0x40010800
 800188c:	10210000 	.word	0x10210000
 8001890:	10310000 	.word	0x10310000
 8001894:	10320000 	.word	0x10320000
 8001898:	10110000 	.word	0x10110000
 800189c:	10220000 	.word	0x10220000

080018a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a0:	b10a      	cbz	r2, 80018a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a2:	6101      	str	r1, [r0, #16]
 80018a4:	4770      	bx	lr
 80018a6:	0409      	lsls	r1, r1, #16
 80018a8:	e7fb      	b.n	80018a2 <HAL_GPIO_WritePin+0x2>

080018aa <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018aa:	6802      	ldr	r2, [r0, #0]
 80018ac:	6953      	ldr	r3, [r2, #20]
 80018ae:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80018b2:	d00d      	beq.n	80018d0 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018b4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80018b8:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80018ba:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80018bc:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80018be:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80018c8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80018cc:	2001      	movs	r0, #1
 80018ce:	4770      	bx	lr
  }
  return HAL_OK;
 80018d0:	4618      	mov	r0, r3
}
 80018d2:	4770      	bx	lr

080018d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80018d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018d8:	4604      	mov	r4, r0
 80018da:	4617      	mov	r7, r2
 80018dc:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018de:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80018e2:	b28e      	uxth	r6, r1
 80018e4:	6825      	ldr	r5, [r4, #0]
 80018e6:	f1b8 0f01 	cmp.w	r8, #1
 80018ea:	bf0c      	ite	eq
 80018ec:	696b      	ldreq	r3, [r5, #20]
 80018ee:	69ab      	ldrne	r3, [r5, #24]
 80018f0:	ea36 0303 	bics.w	r3, r6, r3
 80018f4:	bf14      	ite	ne
 80018f6:	2001      	movne	r0, #1
 80018f8:	2000      	moveq	r0, #0
 80018fa:	b908      	cbnz	r0, 8001900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80018fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001900:	696b      	ldr	r3, [r5, #20]
 8001902:	055a      	lsls	r2, r3, #21
 8001904:	d512      	bpl.n	800192c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001906:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001908:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800190a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001910:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001914:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001916:	2304      	movs	r3, #4
 8001918:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800191a:	2300      	movs	r3, #0
      return HAL_ERROR;
 800191c:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 800191e:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001920:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001924:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800192c:	1c7b      	adds	r3, r7, #1
 800192e:	d0d9      	beq.n	80018e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001930:	b94f      	cbnz	r7, 8001946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001932:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001934:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001936:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001938:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800193c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001940:	2003      	movs	r0, #3
 8001942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001946:	f7ff fe57 	bl	80015f8 <HAL_GetTick>
 800194a:	eba0 0009 	sub.w	r0, r0, r9
 800194e:	4287      	cmp	r7, r0
 8001950:	d2c8      	bcs.n	80018e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001952:	e7ee      	b.n	8001932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001954 <I2C_WaitOnFlagUntilTimeout>:
{
 8001954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001958:	4604      	mov	r4, r0
 800195a:	4690      	mov	r8, r2
 800195c:	461f      	mov	r7, r3
 800195e:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001960:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001964:	b28d      	uxth	r5, r1
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	f1b9 0f01 	cmp.w	r9, #1
 800196c:	bf0c      	ite	eq
 800196e:	695b      	ldreq	r3, [r3, #20]
 8001970:	699b      	ldrne	r3, [r3, #24]
 8001972:	ea35 0303 	bics.w	r3, r5, r3
 8001976:	bf0c      	ite	eq
 8001978:	2301      	moveq	r3, #1
 800197a:	2300      	movne	r3, #0
 800197c:	4543      	cmp	r3, r8
 800197e:	d002      	beq.n	8001986 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001980:	2000      	movs	r0, #0
}
 8001982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001986:	1c7b      	adds	r3, r7, #1
 8001988:	d0ed      	beq.n	8001966 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800198a:	b95f      	cbnz	r7, 80019a4 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800198c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800198e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001990:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001992:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001996:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800199a:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800199c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80019a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80019a4:	f7ff fe28 	bl	80015f8 <HAL_GetTick>
 80019a8:	1b80      	subs	r0, r0, r6
 80019aa:	4287      	cmp	r7, r0
 80019ac:	d2db      	bcs.n	8001966 <I2C_WaitOnFlagUntilTimeout+0x12>
 80019ae:	e7ed      	b.n	800198c <I2C_WaitOnFlagUntilTimeout+0x38>

080019b0 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80019b0:	b570      	push	{r4, r5, r6, lr}
 80019b2:	4604      	mov	r4, r0
 80019b4:	460d      	mov	r5, r1
 80019b6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	061b      	lsls	r3, r3, #24
 80019be:	d501      	bpl.n	80019c4 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80019c0:	2000      	movs	r0, #0
 80019c2:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019c4:	4620      	mov	r0, r4
 80019c6:	f7ff ff70 	bl	80018aa <I2C_IsAcknowledgeFailed>
 80019ca:	b9a8      	cbnz	r0, 80019f8 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80019cc:	1c6a      	adds	r2, r5, #1
 80019ce:	d0f3      	beq.n	80019b8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80019d0:	b965      	cbnz	r5, 80019ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80019d4:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d6:	f043 0320 	orr.w	r3, r3, #32
 80019da:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80019dc:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80019de:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80019e0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80019e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80019e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80019ea:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80019ec:	f7ff fe04 	bl	80015f8 <HAL_GetTick>
 80019f0:	1b80      	subs	r0, r0, r6
 80019f2:	4285      	cmp	r5, r0
 80019f4:	d2e0      	bcs.n	80019b8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80019f6:	e7ec      	b.n	80019d2 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80019f8:	2001      	movs	r0, #1
}
 80019fa:	bd70      	pop	{r4, r5, r6, pc}

080019fc <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80019fc:	b570      	push	{r4, r5, r6, lr}
 80019fe:	4604      	mov	r4, r0
 8001a00:	460d      	mov	r5, r1
 8001a02:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a04:	6820      	ldr	r0, [r4, #0]
 8001a06:	6943      	ldr	r3, [r0, #20]
 8001a08:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001a0c:	d001      	beq.n	8001a12 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001a0e:	2000      	movs	r0, #0
}
 8001a10:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a12:	6942      	ldr	r2, [r0, #20]
 8001a14:	06d2      	lsls	r2, r2, #27
 8001a16:	d50b      	bpl.n	8001a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a18:	f06f 0210 	mvn.w	r2, #16
 8001a1c:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001a1e:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a20:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001a22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a26:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001a28:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001a2a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001a2e:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a30:	b95d      	cbnz	r5, 8001a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a32:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001a34:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a36:	f043 0320 	orr.w	r3, r3, #32
 8001a3a:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001a3c:	2320      	movs	r3, #32
 8001a3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001a42:	2300      	movs	r3, #0
 8001a44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001a48:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a4a:	f7ff fdd5 	bl	80015f8 <HAL_GetTick>
 8001a4e:	1b80      	subs	r0, r0, r6
 8001a50:	4285      	cmp	r5, r0
 8001a52:	d2d7      	bcs.n	8001a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001a54:	e7ed      	b.n	8001a32 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001a56 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001a56:	b570      	push	{r4, r5, r6, lr}
 8001a58:	4604      	mov	r4, r0
 8001a5a:	460d      	mov	r5, r1
 8001a5c:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	075b      	lsls	r3, r3, #29
 8001a64:	d501      	bpl.n	8001a6a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001a66:	2000      	movs	r0, #0
 8001a68:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f7ff ff1d 	bl	80018aa <I2C_IsAcknowledgeFailed>
 8001a70:	b9a8      	cbnz	r0, 8001a9e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001a72:	1c6a      	adds	r2, r5, #1
 8001a74:	d0f3      	beq.n	8001a5e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a76:	b965      	cbnz	r5, 8001a92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a78:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001a7a:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a7c:	f043 0320 	orr.w	r3, r3, #32
 8001a80:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a82:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001a84:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a86:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001a88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001a8c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001a90:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a92:	f7ff fdb1 	bl	80015f8 <HAL_GetTick>
 8001a96:	1b80      	subs	r0, r0, r6
 8001a98:	4285      	cmp	r5, r0
 8001a9a:	d2e0      	bcs.n	8001a5e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001a9c:	e7ec      	b.n	8001a78 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001a9e:	2001      	movs	r0, #1
}
 8001aa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001aa4 <HAL_I2C_Init>:
{
 8001aa4:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	b908      	cbnz	r0, 8001aae <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001aaa:	2001      	movs	r0, #1
 8001aac:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001aae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ab2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ab6:	b91b      	cbnz	r3, 8001ac0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001ab8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001abc:	f7ff fbd2 	bl	8001264 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac0:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001ac2:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001ac8:	6813      	ldr	r3, [r2, #0]
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ad0:	f000 fd3a 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ad4:	6863      	ldr	r3, [r4, #4]
 8001ad6:	4a2f      	ldr	r2, [pc, #188]	; (8001b94 <HAL_I2C_Init+0xf0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d830      	bhi.n	8001b3e <HAL_I2C_Init+0x9a>
 8001adc:	4a2e      	ldr	r2, [pc, #184]	; (8001b98 <HAL_I2C_Init+0xf4>)
 8001ade:	4290      	cmp	r0, r2
 8001ae0:	d9e3      	bls.n	8001aaa <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001ae2:	4a2e      	ldr	r2, [pc, #184]	; (8001b9c <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001ae4:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001ae6:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8001aea:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001aec:	3201      	adds	r2, #1
 8001aee:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001af0:	4a28      	ldr	r2, [pc, #160]	; (8001b94 <HAL_I2C_Init+0xf0>)
 8001af2:	3801      	subs	r0, #1
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d832      	bhi.n	8001b5e <HAL_I2C_Init+0xba>
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fbb0 f0f3 	udiv	r0, r0, r3
 8001afe:	1c43      	adds	r3, r0, #1
 8001b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	bf38      	it	cc
 8001b08:	2304      	movcc	r3, #4
 8001b0a:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b0c:	6a22      	ldr	r2, [r4, #32]
 8001b0e:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b10:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001b16:	68e2      	ldr	r2, [r4, #12]
 8001b18:	6923      	ldr	r3, [r4, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001b1e:	69a2      	ldr	r2, [r4, #24]
 8001b20:	6963      	ldr	r3, [r4, #20]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001b26:	680b      	ldr	r3, [r1, #0]
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001b2e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b30:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b36:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b38:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001b3c:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b3e:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_I2C_Init+0xfc>)
 8001b40:	4290      	cmp	r0, r2
 8001b42:	d9b2      	bls.n	8001aaa <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001b44:	4d15      	ldr	r5, [pc, #84]	; (8001b9c <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001b46:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001b4a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8001b4e:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001b50:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8001b52:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001b54:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001b58:	fbb2 f2f5 	udiv	r2, r2, r5
 8001b5c:	e7c6      	b.n	8001aec <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001b5e:	68a2      	ldr	r2, [r4, #8]
 8001b60:	b952      	cbnz	r2, 8001b78 <HAL_I2C_Init+0xd4>
 8001b62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b66:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b6a:	1c43      	adds	r3, r0, #1
 8001b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b70:	b16b      	cbz	r3, 8001b8e <HAL_I2C_Init+0xea>
 8001b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b76:	e7c8      	b.n	8001b0a <HAL_I2C_Init+0x66>
 8001b78:	2219      	movs	r2, #25
 8001b7a:	4353      	muls	r3, r2
 8001b7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b80:	1c43      	adds	r3, r0, #1
 8001b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b86:	b113      	cbz	r3, 8001b8e <HAL_I2C_Init+0xea>
 8001b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b8c:	e7bd      	b.n	8001b0a <HAL_I2C_Init+0x66>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e7bb      	b.n	8001b0a <HAL_I2C_Init+0x66>
 8001b92:	bf00      	nop
 8001b94:	000186a0 	.word	0x000186a0
 8001b98:	001e847f 	.word	0x001e847f
 8001b9c:	000f4240 	.word	0x000f4240
 8001ba0:	003d08ff 	.word	0x003d08ff

08001ba4 <HAL_I2C_Master_Transmit>:
{
 8001ba4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001ba8:	4604      	mov	r4, r0
 8001baa:	461f      	mov	r7, r3
 8001bac:	460d      	mov	r5, r1
 8001bae:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001bb0:	f7ff fd22 	bl	80015f8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001bb4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001bb8:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001bba:	2b20      	cmp	r3, #32
 8001bbc:	d004      	beq.n	8001bc8 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001bbe:	2502      	movs	r5, #2
}
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	b004      	add	sp, #16
 8001bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bc8:	9000      	str	r0, [sp, #0]
 8001bca:	2319      	movs	r3, #25
 8001bcc:	2201      	movs	r2, #1
 8001bce:	495d      	ldr	r1, [pc, #372]	; (8001d44 <HAL_I2C_Master_Transmit+0x1a0>)
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f7ff febf 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 8001bd6:	2800      	cmp	r0, #0
 8001bd8:	d1f1      	bne.n	8001bbe <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001bda:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d0ed      	beq.n	8001bbe <HAL_I2C_Master_Transmit+0x1a>
 8001be2:	2301      	movs	r3, #1
 8001be4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001bee:	bf5e      	ittt	pl
 8001bf0:	681a      	ldrpl	r2, [r3, #0]
 8001bf2:	f042 0201 	orrpl.w	r2, r2, #1
 8001bf6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bfe:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c00:	2221      	movs	r2, #33	; 0x21
 8001c02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c06:	2210      	movs	r2, #16
 8001c08:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c10:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001c14:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c16:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001c18:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001c1a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001c1e:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c22:	2a04      	cmp	r2, #4
 8001c24:	d004      	beq.n	8001c30 <HAL_I2C_Master_Transmit+0x8c>
 8001c26:	2a01      	cmp	r2, #1
 8001c28:	d002      	beq.n	8001c30 <HAL_I2C_Master_Transmit+0x8c>
 8001c2a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001c2e:	d104      	bne.n	8001c3a <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e002      	b.n	8001c40 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c3c:	2a12      	cmp	r2, #18
 8001c3e:	d0f7      	beq.n	8001c30 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c40:	9600      	str	r6, [sp, #0]
 8001c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c44:	2200      	movs	r2, #0
 8001c46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7ff fe82 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 8001c50:	bb28      	cbnz	r0, 8001c9e <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c52:	6923      	ldr	r3, [r4, #16]
 8001c54:	6822      	ldr	r2, [r4, #0]
 8001c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c5a:	d112      	bne.n	8001c82 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c5c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001c60:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c62:	4633      	mov	r3, r6
 8001c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c66:	4938      	ldr	r1, [pc, #224]	; (8001d48 <HAL_I2C_Master_Transmit+0x1a4>)
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7ff fe33 	bl	80018d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c6e:	4605      	mov	r5, r0
 8001c70:	b9a0      	cbnz	r0, 8001c9c <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	9003      	str	r0, [sp, #12]
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	9203      	str	r2, [sp, #12]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	9303      	str	r3, [sp, #12]
 8001c7e:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001c80:	e050      	b.n	8001d24 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c82:	11eb      	asrs	r3, r5, #7
 8001c84:	f003 0306 	and.w	r3, r3, #6
 8001c88:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001c8c:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c8e:	492f      	ldr	r1, [pc, #188]	; (8001d4c <HAL_I2C_Master_Transmit+0x1a8>)
 8001c90:	4633      	mov	r3, r6
 8001c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c94:	4620      	mov	r0, r4
 8001c96:	f7ff fe1d 	bl	80018d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c9a:	b148      	cbz	r0, 8001cb0 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001ca8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001cac:	2501      	movs	r5, #1
 8001cae:	e787      	b.n	8001bc0 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	b2ed      	uxtb	r5, r5
 8001cb4:	611d      	str	r5, [r3, #16]
 8001cb6:	e7d4      	b.n	8001c62 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001cb8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001cbc:	2503      	movs	r5, #3
 8001cbe:	e77f      	b.n	8001bc0 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc0:	4632      	mov	r2, r6
 8001cc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f7ff fe73 	bl	80019b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cca:	b140      	cbz	r0, 8001cde <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ccc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d1f4      	bne.n	8001cbc <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cd2:	6822      	ldr	r2, [r4, #0]
 8001cd4:	6813      	ldr	r3, [r2, #0]
 8001cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	e7e6      	b.n	8001cac <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001cde:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ce0:	6820      	ldr	r0, [r4, #0]
 8001ce2:	1c4b      	adds	r3, r1, #1
 8001ce4:	6263      	str	r3, [r4, #36]	; 0x24
 8001ce6:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001ce8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001cea:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001cec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cf4:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001cf6:	1e53      	subs	r3, r2, #1
 8001cf8:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cfa:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001cfc:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cfe:	d50a      	bpl.n	8001d16 <HAL_I2C_Master_Transmit+0x172>
 8001d00:	b14b      	cbz	r3, 8001d16 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d02:	1c8b      	adds	r3, r1, #2
 8001d04:	6263      	str	r3, [r4, #36]	; 0x24
 8001d06:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001d08:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d0a:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8001d0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001d0e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001d10:	3b01      	subs	r3, #1
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d16:	4632      	mov	r2, r6
 8001d18:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff fe9b 	bl	8001a56 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d20:	2800      	cmp	r0, #0
 8001d22:	d1d3      	bne.n	8001ccc <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8001d24:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ca      	bne.n	8001cc0 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d2a:	6821      	ldr	r1, [r4, #0]
 8001d2c:	680a      	ldr	r2, [r1, #0]
 8001d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d32:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d34:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001d36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001d3a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001d42:	e73d      	b.n	8001bc0 <HAL_I2C_Master_Transmit+0x1c>
 8001d44:	00100002 	.word	0x00100002
 8001d48:	00010002 	.word	0x00010002
 8001d4c:	00010008 	.word	0x00010008

08001d50 <HAL_I2C_Master_Receive>:
{
 8001d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d54:	4604      	mov	r4, r0
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	4698      	mov	r8, r3
 8001d5a:	460d      	mov	r5, r1
 8001d5c:	4691      	mov	r9, r2
 8001d5e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001d60:	f7ff fc4a 	bl	80015f8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d64:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001d68:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	d004      	beq.n	8001d78 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001d6e:	2502      	movs	r5, #2
}
 8001d70:	4628      	mov	r0, r5
 8001d72:	b009      	add	sp, #36	; 0x24
 8001d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d78:	9000      	str	r0, [sp, #0]
 8001d7a:	2319      	movs	r3, #25
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	49a2      	ldr	r1, [pc, #648]	; (8002008 <HAL_I2C_Master_Receive+0x2b8>)
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff fde7 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 8001d86:	2800      	cmp	r0, #0
 8001d88:	d1f1      	bne.n	8001d6e <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001d8a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d0ed      	beq.n	8001d6e <HAL_I2C_Master_Receive+0x1e>
 8001d92:	2301      	movs	r3, #1
 8001d94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001d9e:	bf5e      	ittt	pl
 8001da0:	681a      	ldrpl	r2, [r3, #0]
 8001da2:	f042 0201 	orrpl.w	r2, r2, #1
 8001da6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dae:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001db0:	2222      	movs	r2, #34	; 0x22
 8001db2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001db6:	2210      	movs	r2, #16
 8001db8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dc0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001dc4:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dc8:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001dca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001dcc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001dd0:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001dd4:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dd6:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001dd8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001ddc:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dde:	d004      	beq.n	8001dea <HAL_I2C_Master_Receive+0x9a>
 8001de0:	2a01      	cmp	r2, #1
 8001de2:	d002      	beq.n	8001dea <HAL_I2C_Master_Receive+0x9a>
 8001de4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001de8:	d104      	bne.n	8001df4 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e002      	b.n	8001dfa <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001df4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001df6:	2a11      	cmp	r2, #17
 8001df8:	d0f7      	beq.n	8001dea <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dfa:	9600      	str	r6, [sp, #0]
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e04:	4620      	mov	r0, r4
 8001e06:	f7ff fda5 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	d14d      	bne.n	8001eaa <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e0e:	6923      	ldr	r3, [r4, #16]
 8001e10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	d139      	bne.n	8001e8c <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e18:	f045 0501 	orr.w	r5, r5, #1
 8001e1c:	b2ed      	uxtb	r5, r5
 8001e1e:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e20:	4633      	mov	r3, r6
 8001e22:	463a      	mov	r2, r7
 8001e24:	4979      	ldr	r1, [pc, #484]	; (800200c <HAL_I2C_Master_Receive+0x2bc>)
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff fd54 	bl	80018d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e2c:	4605      	mov	r5, r0
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d13a      	bne.n	8001ea8 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8001e32:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	2a00      	cmp	r2, #0
 8001e38:	d069      	beq.n	8001f0e <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 8001e3a:	2a01      	cmp	r2, #1
 8001e3c:	d17a      	bne.n	8001f34 <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e44:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e46:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	9504      	str	r5, [sp, #16]
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	9204      	str	r2, [sp, #16]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	9204      	str	r2, [sp, #16]
 8001e54:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e5e:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e60:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002014 <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 8001e64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d05b      	beq.n	8001f22 <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	f200 80d4 	bhi.w	8002018 <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d17b      	bne.n	8001f6c <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001e74:	4632      	mov	r2, r6
 8001e76:	4639      	mov	r1, r7
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7ff fdbf 	bl	80019fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e7e:	2800      	cmp	r0, #0
 8001e80:	f000 8093 	beq.w	8001faa <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001e84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d116      	bne.n	8001eb8 <HAL_I2C_Master_Receive+0x168>
 8001e8a:	e03e      	b.n	8001f0a <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e8c:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001e90:	f008 0806 	and.w	r8, r8, #6
 8001e94:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001e98:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e9a:	495d      	ldr	r1, [pc, #372]	; (8002010 <HAL_I2C_Master_Receive+0x2c0>)
 8001e9c:	4633      	mov	r3, r6
 8001e9e:	463a      	mov	r2, r7
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff fd17 	bl	80018d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ea6:	b148      	cbz	r0, 8001ebc <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	d128      	bne.n	8001f06 <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8001eb4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8001eb8:	2501      	movs	r5, #1
 8001eba:	e759      	b.n	8001d70 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	b2ed      	uxtb	r5, r5
 8001ec0:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ec2:	463a      	mov	r2, r7
 8001ec4:	4633      	mov	r3, r6
 8001ec6:	4951      	ldr	r1, [pc, #324]	; (800200c <HAL_I2C_Master_Receive+0x2bc>)
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7ff fd03 	bl	80018d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	d1e9      	bne.n	8001ea8 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	9007      	str	r0, [sp, #28]
 8001ed8:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eda:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001edc:	9107      	str	r1, [sp, #28]
 8001ede:	6999      	ldr	r1, [r3, #24]
 8001ee0:	9107      	str	r1, [sp, #28]
 8001ee2:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ee4:	6819      	ldr	r1, [r3, #0]
 8001ee6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001eea:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eec:	9600      	str	r6, [sp, #0]
 8001eee:	463b      	mov	r3, r7
 8001ef0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ef4:	f7ff fd2e 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	d1d6      	bne.n	8001eaa <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001efc:	6822      	ldr	r2, [r4, #0]
 8001efe:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001f02:	6113      	str	r3, [r2, #16]
 8001f04:	e78c      	b.n	8001e20 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 8001f06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 8001f0a:	2503      	movs	r5, #3
 8001f0c:	e730      	b.n	8001d70 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0e:	9503      	str	r5, [sp, #12]
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	9203      	str	r2, [sp, #12]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	9203      	str	r2, [sp, #12]
 8001f18:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f20:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f22:	2320      	movs	r3, #32
 8001f24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001f2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001f32:	e71d      	b.n	8001d70 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8001f34:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001f36:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001f38:	d10e      	bne.n	8001f58 <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f40:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	9505      	str	r5, [sp, #20]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	9205      	str	r2, [sp, #20]
 8001f4a:	699a      	ldr	r2, [r3, #24]
 8001f4c:	9205      	str	r2, [sp, #20]
 8001f4e:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f56:	e781      	b.n	8001e5c <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001f58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f5c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f5e:	9506      	str	r5, [sp, #24]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	9206      	str	r2, [sp, #24]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	9306      	str	r3, [sp, #24]
 8001f68:	9b06      	ldr	r3, [sp, #24]
 8001f6a:	e779      	b.n	8001e60 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8001f6c:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f6e:	9600      	str	r6, [sp, #0]
 8001f70:	463b      	mov	r3, r7
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4641      	mov	r1, r8
 8001f78:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001f7a:	d124      	bne.n	8001fc6 <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f7c:	f7ff fcea 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 8001f80:	2800      	cmp	r0, #0
 8001f82:	d1c2      	bne.n	8001f0a <HAL_I2C_Master_Receive+0x1ba>
 8001f84:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f8e:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	1c51      	adds	r1, r2, #1
 8001f96:	6261      	str	r1, [r4, #36]	; 0x24
 8001f98:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001f9a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001fa0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001fa8:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	6262      	str	r2, [r4, #36]	; 0x24
 8001fb0:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fb2:	6912      	ldr	r2, [r2, #16]
 8001fb4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001fb6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001fbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001fc4:	e74e      	b.n	8001e64 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fc6:	f7ff fcc5 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d19c      	bne.n	8001f0a <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001fd0:	6821      	ldr	r1, [r4, #0]
 8001fd2:	680b      	ldr	r3, [r1, #0]
 8001fd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fd8:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fda:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fde:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fe0:	1c59      	adds	r1, r3, #1
 8001fe2:	6261      	str	r1, [r4, #36]	; 0x24
 8001fe4:	6821      	ldr	r1, [r4, #0]
 8001fe6:	6909      	ldr	r1, [r1, #16]
 8001fe8:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8001fea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fec:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001ff2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ff4:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	f7ff fca9 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 8002002:	2800      	cmp	r0, #0
 8002004:	d0bf      	beq.n	8001f86 <HAL_I2C_Master_Receive+0x236>
 8002006:	e780      	b.n	8001f0a <HAL_I2C_Master_Receive+0x1ba>
 8002008:	00100002 	.word	0x00100002
 800200c:	00010002 	.word	0x00010002
 8002010:	00010008 	.word	0x00010008
 8002014:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002018:	4632      	mov	r2, r6
 800201a:	4639      	mov	r1, r7
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff fced 	bl	80019fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002022:	2800      	cmp	r0, #0
 8002024:	f47f af2e 	bne.w	8001e84 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	6262      	str	r2, [r4, #36]	; 0x24
 800202e:	6822      	ldr	r2, [r4, #0]
 8002030:	6912      	ldr	r2, [r2, #16]
 8002032:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002034:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002036:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8002038:	3b01      	subs	r3, #1
 800203a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800203c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800203e:	3b01      	subs	r3, #1
 8002040:	b29b      	uxth	r3, r3
 8002042:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002044:	6953      	ldr	r3, [r2, #20]
 8002046:	075b      	lsls	r3, r3, #29
 8002048:	f57f af0c 	bpl.w	8001e64 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800204c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800204e:	1c59      	adds	r1, r3, #1
 8002050:	6261      	str	r1, [r4, #36]	; 0x24
 8002052:	e7ae      	b.n	8001fb2 <HAL_I2C_Master_Receive+0x262>

08002054 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002054:	6803      	ldr	r3, [r0, #0]
{
 8002056:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205a:	07db      	lsls	r3, r3, #31
{
 800205c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205e:	d410      	bmi.n	8002082 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002060:	682b      	ldr	r3, [r5, #0]
 8002062:	079f      	lsls	r7, r3, #30
 8002064:	d45e      	bmi.n	8002124 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002066:	682b      	ldr	r3, [r5, #0]
 8002068:	0719      	lsls	r1, r3, #28
 800206a:	f100 8095 	bmi.w	8002198 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206e:	682b      	ldr	r3, [r5, #0]
 8002070:	075a      	lsls	r2, r3, #29
 8002072:	f100 80bf 	bmi.w	80021f4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002076:	69ea      	ldr	r2, [r5, #28]
 8002078:	2a00      	cmp	r2, #0
 800207a:	f040 812d 	bne.w	80022d8 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800207e:	2000      	movs	r0, #0
 8002080:	e014      	b.n	80020ac <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002082:	4c90      	ldr	r4, [pc, #576]	; (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002084:	6863      	ldr	r3, [r4, #4]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b04      	cmp	r3, #4
 800208c:	d007      	beq.n	800209e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800208e:	6863      	ldr	r3, [r4, #4]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b08      	cmp	r3, #8
 8002096:	d10c      	bne.n	80020b2 <HAL_RCC_OscConfig+0x5e>
 8002098:	6863      	ldr	r3, [r4, #4]
 800209a:	03de      	lsls	r6, r3, #15
 800209c:	d509      	bpl.n	80020b2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	039c      	lsls	r4, r3, #14
 80020a2:	d5dd      	bpl.n	8002060 <HAL_RCC_OscConfig+0xc>
 80020a4:	686b      	ldr	r3, [r5, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1da      	bne.n	8002060 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80020aa:	2001      	movs	r0, #1
}
 80020ac:	b002      	add	sp, #8
 80020ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b2:	686b      	ldr	r3, [r5, #4]
 80020b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b8:	d110      	bne.n	80020dc <HAL_RCC_OscConfig+0x88>
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80020c2:	f7ff fa99 	bl	80015f8 <HAL_GetTick>
 80020c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	0398      	lsls	r0, r3, #14
 80020cc:	d4c8      	bmi.n	8002060 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ce:	f7ff fa93 	bl	80015f8 <HAL_GetTick>
 80020d2:	1b80      	subs	r0, r0, r6
 80020d4:	2864      	cmp	r0, #100	; 0x64
 80020d6:	d9f7      	bls.n	80020c8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80020d8:	2003      	movs	r0, #3
 80020da:	e7e7      	b.n	80020ac <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020dc:	b99b      	cbnz	r3, 8002106 <HAL_RCC_OscConfig+0xb2>
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e4:	6023      	str	r3, [r4, #0]
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80020ee:	f7ff fa83 	bl	80015f8 <HAL_GetTick>
 80020f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	0399      	lsls	r1, r3, #14
 80020f8:	d5b2      	bpl.n	8002060 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fa:	f7ff fa7d 	bl	80015f8 <HAL_GetTick>
 80020fe:	1b80      	subs	r0, r0, r6
 8002100:	2864      	cmp	r0, #100	; 0x64
 8002102:	d9f7      	bls.n	80020f4 <HAL_RCC_OscConfig+0xa0>
 8002104:	e7e8      	b.n	80020d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002106:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	d103      	bne.n	8002116 <HAL_RCC_OscConfig+0xc2>
 800210e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002112:	6023      	str	r3, [r4, #0]
 8002114:	e7d1      	b.n	80020ba <HAL_RCC_OscConfig+0x66>
 8002116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211a:	6023      	str	r3, [r4, #0]
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002122:	e7cd      	b.n	80020c0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002124:	4c67      	ldr	r4, [pc, #412]	; (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002126:	6863      	ldr	r3, [r4, #4]
 8002128:	f013 0f0c 	tst.w	r3, #12
 800212c:	d007      	beq.n	800213e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800212e:	6863      	ldr	r3, [r4, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b08      	cmp	r3, #8
 8002136:	d110      	bne.n	800215a <HAL_RCC_OscConfig+0x106>
 8002138:	6863      	ldr	r3, [r4, #4]
 800213a:	03da      	lsls	r2, r3, #15
 800213c:	d40d      	bmi.n	800215a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	079b      	lsls	r3, r3, #30
 8002142:	d502      	bpl.n	800214a <HAL_RCC_OscConfig+0xf6>
 8002144:	692b      	ldr	r3, [r5, #16]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d1af      	bne.n	80020aa <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	696a      	ldr	r2, [r5, #20]
 800214e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002152:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002156:	6023      	str	r3, [r4, #0]
 8002158:	e785      	b.n	8002066 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800215a:	692a      	ldr	r2, [r5, #16]
 800215c:	4b5a      	ldr	r3, [pc, #360]	; (80022c8 <HAL_RCC_OscConfig+0x274>)
 800215e:	b16a      	cbz	r2, 800217c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002164:	f7ff fa48 	bl	80015f8 <HAL_GetTick>
 8002168:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	079f      	lsls	r7, r3, #30
 800216e:	d4ec      	bmi.n	800214a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002170:	f7ff fa42 	bl	80015f8 <HAL_GetTick>
 8002174:	1b80      	subs	r0, r0, r6
 8002176:	2802      	cmp	r0, #2
 8002178:	d9f7      	bls.n	800216a <HAL_RCC_OscConfig+0x116>
 800217a:	e7ad      	b.n	80020d8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800217c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800217e:	f7ff fa3b 	bl	80015f8 <HAL_GetTick>
 8002182:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	0798      	lsls	r0, r3, #30
 8002188:	f57f af6d 	bpl.w	8002066 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800218c:	f7ff fa34 	bl	80015f8 <HAL_GetTick>
 8002190:	1b80      	subs	r0, r0, r6
 8002192:	2802      	cmp	r0, #2
 8002194:	d9f6      	bls.n	8002184 <HAL_RCC_OscConfig+0x130>
 8002196:	e79f      	b.n	80020d8 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002198:	69aa      	ldr	r2, [r5, #24]
 800219a:	4c4a      	ldr	r4, [pc, #296]	; (80022c4 <HAL_RCC_OscConfig+0x270>)
 800219c:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <HAL_RCC_OscConfig+0x278>)
 800219e:	b1da      	cbz	r2, 80021d8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80021a4:	f7ff fa28 	bl	80015f8 <HAL_GetTick>
 80021a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021ac:	079b      	lsls	r3, r3, #30
 80021ae:	d50d      	bpl.n	80021cc <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021b0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80021b4:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80021bc:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80021be:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80021c0:	9b01      	ldr	r3, [sp, #4]
 80021c2:	1e5a      	subs	r2, r3, #1
 80021c4:	9201      	str	r2, [sp, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f9      	bne.n	80021be <HAL_RCC_OscConfig+0x16a>
 80021ca:	e750      	b.n	800206e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021cc:	f7ff fa14 	bl	80015f8 <HAL_GetTick>
 80021d0:	1b80      	subs	r0, r0, r6
 80021d2:	2802      	cmp	r0, #2
 80021d4:	d9e9      	bls.n	80021aa <HAL_RCC_OscConfig+0x156>
 80021d6:	e77f      	b.n	80020d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80021d8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80021da:	f7ff fa0d 	bl	80015f8 <HAL_GetTick>
 80021de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021e2:	079f      	lsls	r7, r3, #30
 80021e4:	f57f af43 	bpl.w	800206e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e8:	f7ff fa06 	bl	80015f8 <HAL_GetTick>
 80021ec:	1b80      	subs	r0, r0, r6
 80021ee:	2802      	cmp	r0, #2
 80021f0:	d9f6      	bls.n	80021e0 <HAL_RCC_OscConfig+0x18c>
 80021f2:	e771      	b.n	80020d8 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f4:	4c33      	ldr	r4, [pc, #204]	; (80022c4 <HAL_RCC_OscConfig+0x270>)
 80021f6:	69e3      	ldr	r3, [r4, #28]
 80021f8:	00d8      	lsls	r0, r3, #3
 80021fa:	d424      	bmi.n	8002246 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80021fc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	69e3      	ldr	r3, [r4, #28]
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002204:	61e3      	str	r3, [r4, #28]
 8002206:	69e3      	ldr	r3, [r4, #28]
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	4e30      	ldr	r6, [pc, #192]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002212:	6833      	ldr	r3, [r6, #0]
 8002214:	05d9      	lsls	r1, r3, #23
 8002216:	d518      	bpl.n	800224a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002218:	68eb      	ldr	r3, [r5, #12]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d126      	bne.n	800226c <HAL_RCC_OscConfig+0x218>
 800221e:	6a23      	ldr	r3, [r4, #32]
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002226:	f7ff f9e7 	bl	80015f8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800222e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	6a23      	ldr	r3, [r4, #32]
 8002232:	079b      	lsls	r3, r3, #30
 8002234:	d53f      	bpl.n	80022b6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002236:	2f00      	cmp	r7, #0
 8002238:	f43f af1d 	beq.w	8002076 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800223c:	69e3      	ldr	r3, [r4, #28]
 800223e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002242:	61e3      	str	r3, [r4, #28]
 8002244:	e717      	b.n	8002076 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002246:	2700      	movs	r7, #0
 8002248:	e7e2      	b.n	8002210 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224a:	6833      	ldr	r3, [r6, #0]
 800224c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002250:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002252:	f7ff f9d1 	bl	80015f8 <HAL_GetTick>
 8002256:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	6833      	ldr	r3, [r6, #0]
 800225a:	05da      	lsls	r2, r3, #23
 800225c:	d4dc      	bmi.n	8002218 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225e:	f7ff f9cb 	bl	80015f8 <HAL_GetTick>
 8002262:	eba0 0008 	sub.w	r0, r0, r8
 8002266:	2864      	cmp	r0, #100	; 0x64
 8002268:	d9f6      	bls.n	8002258 <HAL_RCC_OscConfig+0x204>
 800226a:	e735      	b.n	80020d8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226c:	b9ab      	cbnz	r3, 800229a <HAL_RCC_OscConfig+0x246>
 800226e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6223      	str	r3, [r4, #32]
 800227a:	6a23      	ldr	r3, [r4, #32]
 800227c:	f023 0304 	bic.w	r3, r3, #4
 8002280:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002282:	f7ff f9b9 	bl	80015f8 <HAL_GetTick>
 8002286:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	6a23      	ldr	r3, [r4, #32]
 800228a:	0798      	lsls	r0, r3, #30
 800228c:	d5d3      	bpl.n	8002236 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7ff f9b3 	bl	80015f8 <HAL_GetTick>
 8002292:	1b80      	subs	r0, r0, r6
 8002294:	4540      	cmp	r0, r8
 8002296:	d9f7      	bls.n	8002288 <HAL_RCC_OscConfig+0x234>
 8002298:	e71e      	b.n	80020d8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229a:	2b05      	cmp	r3, #5
 800229c:	6a23      	ldr	r3, [r4, #32]
 800229e:	d103      	bne.n	80022a8 <HAL_RCC_OscConfig+0x254>
 80022a0:	f043 0304 	orr.w	r3, r3, #4
 80022a4:	6223      	str	r3, [r4, #32]
 80022a6:	e7ba      	b.n	800221e <HAL_RCC_OscConfig+0x1ca>
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6223      	str	r3, [r4, #32]
 80022ae:	6a23      	ldr	r3, [r4, #32]
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	e7b6      	b.n	8002224 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7ff f99f 	bl	80015f8 <HAL_GetTick>
 80022ba:	eba0 0008 	sub.w	r0, r0, r8
 80022be:	42b0      	cmp	r0, r6
 80022c0:	d9b6      	bls.n	8002230 <HAL_RCC_OscConfig+0x1dc>
 80022c2:	e709      	b.n	80020d8 <HAL_RCC_OscConfig+0x84>
 80022c4:	40021000 	.word	0x40021000
 80022c8:	42420000 	.word	0x42420000
 80022cc:	42420480 	.word	0x42420480
 80022d0:	20000000 	.word	0x20000000
 80022d4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d8:	4c22      	ldr	r4, [pc, #136]	; (8002364 <HAL_RCC_OscConfig+0x310>)
 80022da:	6863      	ldr	r3, [r4, #4]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	f43f aee2 	beq.w	80020aa <HAL_RCC_OscConfig+0x56>
 80022e6:	2300      	movs	r3, #0
 80022e8:	4e1f      	ldr	r6, [pc, #124]	; (8002368 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ea:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80022ec:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ee:	d12b      	bne.n	8002348 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80022f0:	f7ff f982 	bl	80015f8 <HAL_GetTick>
 80022f4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	0199      	lsls	r1, r3, #6
 80022fa:	d41f      	bmi.n	800233c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022fc:	6a2b      	ldr	r3, [r5, #32]
 80022fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002302:	d105      	bne.n	8002310 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002304:	6862      	ldr	r2, [r4, #4]
 8002306:	68a9      	ldr	r1, [r5, #8]
 8002308:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800230c:	430a      	orrs	r2, r1
 800230e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002310:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002312:	6862      	ldr	r2, [r4, #4]
 8002314:	430b      	orrs	r3, r1
 8002316:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800231a:	4313      	orrs	r3, r2
 800231c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800231e:	2301      	movs	r3, #1
 8002320:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002322:	f7ff f969 	bl	80015f8 <HAL_GetTick>
 8002326:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	019a      	lsls	r2, r3, #6
 800232c:	f53f aea7 	bmi.w	800207e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002330:	f7ff f962 	bl	80015f8 <HAL_GetTick>
 8002334:	1b40      	subs	r0, r0, r5
 8002336:	2802      	cmp	r0, #2
 8002338:	d9f6      	bls.n	8002328 <HAL_RCC_OscConfig+0x2d4>
 800233a:	e6cd      	b.n	80020d8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233c:	f7ff f95c 	bl	80015f8 <HAL_GetTick>
 8002340:	1bc0      	subs	r0, r0, r7
 8002342:	2802      	cmp	r0, #2
 8002344:	d9d7      	bls.n	80022f6 <HAL_RCC_OscConfig+0x2a2>
 8002346:	e6c7      	b.n	80020d8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002348:	f7ff f956 	bl	80015f8 <HAL_GetTick>
 800234c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	019b      	lsls	r3, r3, #6
 8002352:	f57f ae94 	bpl.w	800207e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002356:	f7ff f94f 	bl	80015f8 <HAL_GetTick>
 800235a:	1b40      	subs	r0, r0, r5
 800235c:	2802      	cmp	r0, #2
 800235e:	d9f6      	bls.n	800234e <HAL_RCC_OscConfig+0x2fa>
 8002360:	e6ba      	b.n	80020d8 <HAL_RCC_OscConfig+0x84>
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000
 8002368:	42420060 	.word	0x42420060

0800236c <HAL_RCC_GetSysClockFreq>:
{
 800236c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002370:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002372:	ac02      	add	r4, sp, #8
 8002374:	f103 0510 	add.w	r5, r3, #16
 8002378:	4622      	mov	r2, r4
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	6859      	ldr	r1, [r3, #4]
 800237e:	3308      	adds	r3, #8
 8002380:	c203      	stmia	r2!, {r0, r1}
 8002382:	42ab      	cmp	r3, r5
 8002384:	4614      	mov	r4, r2
 8002386:	d1f7      	bne.n	8002378 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002388:	2301      	movs	r3, #1
 800238a:	f88d 3004 	strb.w	r3, [sp, #4]
 800238e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002390:	4911      	ldr	r1, [pc, #68]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002392:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002396:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002398:	f003 020c 	and.w	r2, r3, #12
 800239c:	2a08      	cmp	r2, #8
 800239e:	d117      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023a0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80023a4:	a806      	add	r0, sp, #24
 80023a6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023a8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023aa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023ae:	d50c      	bpl.n	80023ca <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023b0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023b2:	480a      	ldr	r0, [pc, #40]	; (80023dc <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023b4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023b8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023ba:	aa06      	add	r2, sp, #24
 80023bc:	4413      	add	r3, r2
 80023be:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023c2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80023c6:	b007      	add	sp, #28
 80023c8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023ca:	4805      	ldr	r0, [pc, #20]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x74>)
 80023cc:	4350      	muls	r0, r2
 80023ce:	e7fa      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80023d2:	e7f8      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x5a>
 80023d4:	08003340 	.word	0x08003340
 80023d8:	40021000 	.word	0x40021000
 80023dc:	007a1200 	.word	0x007a1200
 80023e0:	003d0900 	.word	0x003d0900

080023e4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80023e4:	4a54      	ldr	r2, [pc, #336]	; (8002538 <HAL_RCC_ClockConfig+0x154>)
{
 80023e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80023ea:	6813      	ldr	r3, [r2, #0]
{
 80023ec:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	428b      	cmp	r3, r1
{
 80023f4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80023f6:	d32a      	bcc.n	800244e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f8:	6829      	ldr	r1, [r5, #0]
 80023fa:	078c      	lsls	r4, r1, #30
 80023fc:	d434      	bmi.n	8002468 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fe:	07ca      	lsls	r2, r1, #31
 8002400:	d447      	bmi.n	8002492 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002402:	4a4d      	ldr	r2, [pc, #308]	; (8002538 <HAL_RCC_ClockConfig+0x154>)
 8002404:	6813      	ldr	r3, [r2, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	429e      	cmp	r6, r3
 800240c:	f0c0 8082 	bcc.w	8002514 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	682a      	ldr	r2, [r5, #0]
 8002412:	4c4a      	ldr	r4, [pc, #296]	; (800253c <HAL_RCC_ClockConfig+0x158>)
 8002414:	f012 0f04 	tst.w	r2, #4
 8002418:	f040 8087 	bne.w	800252a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241c:	0713      	lsls	r3, r2, #28
 800241e:	d506      	bpl.n	800242e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002420:	6863      	ldr	r3, [r4, #4]
 8002422:	692a      	ldr	r2, [r5, #16]
 8002424:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002428:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800242c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800242e:	f7ff ff9d 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8002432:	6863      	ldr	r3, [r4, #4]
 8002434:	4a42      	ldr	r2, [pc, #264]	; (8002540 <HAL_RCC_ClockConfig+0x15c>)
 8002436:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	40d8      	lsrs	r0, r3
 800243e:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_RCC_ClockConfig+0x160>)
 8002440:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002442:	2000      	movs	r0, #0
 8002444:	f7ff f896 	bl	8001574 <HAL_InitTick>
  return HAL_OK;
 8002448:	2000      	movs	r0, #0
}
 800244a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	f023 0307 	bic.w	r3, r3, #7
 8002454:	430b      	orrs	r3, r1
 8002456:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002458:	6813      	ldr	r3, [r2, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	4299      	cmp	r1, r3
 8002460:	d0ca      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002462:	2001      	movs	r0, #1
 8002464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002468:	4b34      	ldr	r3, [pc, #208]	; (800253c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800246e:	bf1e      	ittt	ne
 8002470:	685a      	ldrne	r2, [r3, #4]
 8002472:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002476:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800247a:	bf42      	ittt	mi
 800247c:	685a      	ldrmi	r2, [r3, #4]
 800247e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002482:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	68a8      	ldr	r0, [r5, #8]
 8002488:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800248c:	4302      	orrs	r2, r0
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	e7b5      	b.n	80023fe <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	686a      	ldr	r2, [r5, #4]
 8002494:	4c29      	ldr	r4, [pc, #164]	; (800253c <HAL_RCC_ClockConfig+0x158>)
 8002496:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002498:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249a:	d11c      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	d0df      	beq.n	8002462 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a8:	f023 0303 	bic.w	r3, r3, #3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80024b0:	f7ff f8a2 	bl	80015f8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b4:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80024b6:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d114      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024bc:	6863      	ldr	r3, [r4, #4]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d09d      	beq.n	8002402 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c6:	f7ff f897 	bl	80015f8 <HAL_GetTick>
 80024ca:	1bc0      	subs	r0, r0, r7
 80024cc:	4540      	cmp	r0, r8
 80024ce:	d9f5      	bls.n	80024bc <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80024d0:	2003      	movs	r0, #3
 80024d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d6:	2a02      	cmp	r2, #2
 80024d8:	d102      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024de:	e7df      	b.n	80024a0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	f013 0f02 	tst.w	r3, #2
 80024e4:	e7dc      	b.n	80024a0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d10f      	bne.n	800250a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ea:	6863      	ldr	r3, [r4, #4]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d086      	beq.n	8002402 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f4:	f7ff f880 	bl	80015f8 <HAL_GetTick>
 80024f8:	1bc0      	subs	r0, r0, r7
 80024fa:	4540      	cmp	r0, r8
 80024fc:	d9f5      	bls.n	80024ea <HAL_RCC_ClockConfig+0x106>
 80024fe:	e7e7      	b.n	80024d0 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002500:	f7ff f87a 	bl	80015f8 <HAL_GetTick>
 8002504:	1bc0      	subs	r0, r0, r7
 8002506:	4540      	cmp	r0, r8
 8002508:	d8e2      	bhi.n	80024d0 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800250a:	6863      	ldr	r3, [r4, #4]
 800250c:	f013 0f0c 	tst.w	r3, #12
 8002510:	d1f6      	bne.n	8002500 <HAL_RCC_ClockConfig+0x11c>
 8002512:	e776      	b.n	8002402 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002514:	6813      	ldr	r3, [r2, #0]
 8002516:	f023 0307 	bic.w	r3, r3, #7
 800251a:	4333      	orrs	r3, r6
 800251c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800251e:	6813      	ldr	r3, [r2, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	429e      	cmp	r6, r3
 8002526:	d19c      	bne.n	8002462 <HAL_RCC_ClockConfig+0x7e>
 8002528:	e772      	b.n	8002410 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252a:	6863      	ldr	r3, [r4, #4]
 800252c:	68e9      	ldr	r1, [r5, #12]
 800252e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002532:	430b      	orrs	r3, r1
 8002534:	6063      	str	r3, [r4, #4]
 8002536:	e771      	b.n	800241c <HAL_RCC_ClockConfig+0x38>
 8002538:	40022000 	.word	0x40022000
 800253c:	40021000 	.word	0x40021000
 8002540:	08003368 	.word	0x08003368
 8002544:	20000000 	.word	0x20000000

08002548 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <HAL_RCC_GetPCLK1Freq+0x14>)
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <HAL_RCC_GetPCLK1Freq+0x18>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002552:	5cd3      	ldrb	r3, [r2, r3]
 8002554:	4a03      	ldr	r2, [pc, #12]	; (8002564 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002556:	6810      	ldr	r0, [r2, #0]
}    
 8002558:	40d8      	lsrs	r0, r3
 800255a:	4770      	bx	lr
 800255c:	40021000 	.word	0x40021000
 8002560:	08003378 	.word	0x08003378
 8002564:	20000000 	.word	0x20000000

08002568 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <HAL_RCC_GetPCLK2Freq+0x14>)
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <HAL_RCC_GetPCLK2Freq+0x18>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	4a03      	ldr	r2, [pc, #12]	; (8002584 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002576:	6810      	ldr	r0, [r2, #0]
} 
 8002578:	40d8      	lsrs	r0, r3
 800257a:	4770      	bx	lr
 800257c:	40021000 	.word	0x40021000
 8002580:	08003378 	.word	0x08003378
 8002584:	20000000 	.word	0x20000000

08002588 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800258c:	6805      	ldr	r5, [r0, #0]
 800258e:	68c2      	ldr	r2, [r0, #12]
 8002590:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002592:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002594:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002598:	4313      	orrs	r3, r2
 800259a:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800259c:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800259e:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025a0:	430b      	orrs	r3, r1
 80025a2:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80025a4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80025a8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025ac:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b2:	696b      	ldr	r3, [r5, #20]
 80025b4:	6982      	ldr	r2, [r0, #24]
 80025b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ba:	4313      	orrs	r3, r2
 80025bc:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80025be:	4b40      	ldr	r3, [pc, #256]	; (80026c0 <UART_SetConfig+0x138>)
{
 80025c0:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80025c2:	429d      	cmp	r5, r3
 80025c4:	f04f 0419 	mov.w	r4, #25
 80025c8:	d146      	bne.n	8002658 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80025ca:	f7ff ffcd 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 80025ce:	fb04 f300 	mul.w	r3, r4, r0
 80025d2:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80025d6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80025da:	00b6      	lsls	r6, r6, #2
 80025dc:	fbb3 f3f6 	udiv	r3, r3, r6
 80025e0:	fbb3 f3f8 	udiv	r3, r3, r8
 80025e4:	011e      	lsls	r6, r3, #4
 80025e6:	f7ff ffbf 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 80025ea:	4360      	muls	r0, r4
 80025ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	fbb0 f7f3 	udiv	r7, r0, r3
 80025f6:	f7ff ffb7 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 80025fa:	4360      	muls	r0, r4
 80025fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	fbb0 f3f3 	udiv	r3, r0, r3
 8002606:	fbb3 f3f8 	udiv	r3, r3, r8
 800260a:	fb08 7313 	mls	r3, r8, r3, r7
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	3332      	adds	r3, #50	; 0x32
 8002612:	fbb3 f3f8 	udiv	r3, r3, r8
 8002616:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800261a:	f7ff ffa5 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 800261e:	4360      	muls	r0, r4
 8002620:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002624:	0092      	lsls	r2, r2, #2
 8002626:	fbb0 faf2 	udiv	sl, r0, r2
 800262a:	f7ff ff9d 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800262e:	4360      	muls	r0, r4
 8002630:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	fbb0 f3f3 	udiv	r3, r0, r3
 800263a:	fbb3 f3f8 	udiv	r3, r3, r8
 800263e:	fb08 a313 	mls	r3, r8, r3, sl
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	3332      	adds	r3, #50	; 0x32
 8002646:	fbb3 f3f8 	udiv	r3, r3, r8
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	433b      	orrs	r3, r7
 8002650:	4433      	add	r3, r6
 8002652:	60ab      	str	r3, [r5, #8]
 8002654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002658:	f7ff ff76 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 800265c:	fb04 f300 	mul.w	r3, r4, r0
 8002660:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002664:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002668:	00b6      	lsls	r6, r6, #2
 800266a:	fbb3 f3f6 	udiv	r3, r3, r6
 800266e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002672:	011e      	lsls	r6, r3, #4
 8002674:	f7ff ff68 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8002678:	4360      	muls	r0, r4
 800267a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fbb0 f7f3 	udiv	r7, r0, r3
 8002684:	f7ff ff60 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8002688:	4360      	muls	r0, r4
 800268a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	fbb0 f3f3 	udiv	r3, r0, r3
 8002694:	fbb3 f3f8 	udiv	r3, r3, r8
 8002698:	fb08 7313 	mls	r3, r8, r3, r7
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	3332      	adds	r3, #50	; 0x32
 80026a0:	fbb3 f3f8 	udiv	r3, r3, r8
 80026a4:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80026a8:	f7ff ff4e 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 80026ac:	4360      	muls	r0, r4
 80026ae:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80026b2:	0092      	lsls	r2, r2, #2
 80026b4:	fbb0 faf2 	udiv	sl, r0, r2
 80026b8:	f7ff ff46 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 80026bc:	e7b7      	b.n	800262e <UART_SetConfig+0xa6>
 80026be:	bf00      	nop
 80026c0:	40013800 	.word	0x40013800

080026c4 <HAL_UART_Init>:
{
 80026c4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80026c6:	4604      	mov	r4, r0
 80026c8:	b340      	cbz	r0, 800271c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80026ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80026ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026d2:	b91b      	cbnz	r3, 80026dc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80026d4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80026d8:	f7fe ff10 	bl	80014fc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80026dc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80026de:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80026e4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80026e6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80026e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026ec:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80026ee:	f7ff ff4b 	bl	8002588 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002704:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800270c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800270e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002710:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002712:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002716:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800271a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800271c:	2001      	movs	r0, #1
}
 800271e:	bd10      	pop	{r4, pc}

08002720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002720:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002722:	e003      	b.n	800272c <LoopCopyDataInit>

08002724 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002726:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002728:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800272a:	3104      	adds	r1, #4

0800272c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800272c:	480a      	ldr	r0, [pc, #40]	; (8002758 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002730:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002732:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002734:	d3f6      	bcc.n	8002724 <CopyDataInit>
  ldr r2, =_sbss
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002738:	e002      	b.n	8002740 <LoopFillZerobss>

0800273a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800273c:	f842 3b04 	str.w	r3, [r2], #4

08002740 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002742:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002744:	d3f9      	bcc.n	800273a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002746:	f7fe fe95 	bl	8001474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800274a:	f000 f80f 	bl	800276c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800274e:	f7fe fe25 	bl	800139c <main>
  bx lr
 8002752:	4770      	bx	lr
  ldr r3, =_sidata
 8002754:	080033f4 	.word	0x080033f4
  ldr r0, =_sdata
 8002758:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800275c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8002760:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8002764:	200001c4 	.word	0x200001c4

08002768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC1_2_IRQHandler>
	...

0800276c <__libc_init_array>:
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	2500      	movs	r5, #0
 8002770:	4e0c      	ldr	r6, [pc, #48]	; (80027a4 <__libc_init_array+0x38>)
 8002772:	4c0d      	ldr	r4, [pc, #52]	; (80027a8 <__libc_init_array+0x3c>)
 8002774:	1ba4      	subs	r4, r4, r6
 8002776:	10a4      	asrs	r4, r4, #2
 8002778:	42a5      	cmp	r5, r4
 800277a:	d109      	bne.n	8002790 <__libc_init_array+0x24>
 800277c:	f000 fdd4 	bl	8003328 <_init>
 8002780:	2500      	movs	r5, #0
 8002782:	4e0a      	ldr	r6, [pc, #40]	; (80027ac <__libc_init_array+0x40>)
 8002784:	4c0a      	ldr	r4, [pc, #40]	; (80027b0 <__libc_init_array+0x44>)
 8002786:	1ba4      	subs	r4, r4, r6
 8002788:	10a4      	asrs	r4, r4, #2
 800278a:	42a5      	cmp	r5, r4
 800278c:	d105      	bne.n	800279a <__libc_init_array+0x2e>
 800278e:	bd70      	pop	{r4, r5, r6, pc}
 8002790:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002794:	4798      	blx	r3
 8002796:	3501      	adds	r5, #1
 8002798:	e7ee      	b.n	8002778 <__libc_init_array+0xc>
 800279a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800279e:	4798      	blx	r3
 80027a0:	3501      	adds	r5, #1
 80027a2:	e7f2      	b.n	800278a <__libc_init_array+0x1e>
 80027a4:	080033ec 	.word	0x080033ec
 80027a8:	080033ec 	.word	0x080033ec
 80027ac:	080033ec 	.word	0x080033ec
 80027b0:	080033f0 	.word	0x080033f0

080027b4 <memset>:
 80027b4:	4603      	mov	r3, r0
 80027b6:	4402      	add	r2, r0
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d100      	bne.n	80027be <memset+0xa>
 80027bc:	4770      	bx	lr
 80027be:	f803 1b01 	strb.w	r1, [r3], #1
 80027c2:	e7f9      	b.n	80027b8 <memset+0x4>

080027c4 <_puts_r>:
 80027c4:	b570      	push	{r4, r5, r6, lr}
 80027c6:	460e      	mov	r6, r1
 80027c8:	4605      	mov	r5, r0
 80027ca:	b118      	cbz	r0, 80027d4 <_puts_r+0x10>
 80027cc:	6983      	ldr	r3, [r0, #24]
 80027ce:	b90b      	cbnz	r3, 80027d4 <_puts_r+0x10>
 80027d0:	f000 fa0e 	bl	8002bf0 <__sinit>
 80027d4:	69ab      	ldr	r3, [r5, #24]
 80027d6:	68ac      	ldr	r4, [r5, #8]
 80027d8:	b913      	cbnz	r3, 80027e0 <_puts_r+0x1c>
 80027da:	4628      	mov	r0, r5
 80027dc:	f000 fa08 	bl	8002bf0 <__sinit>
 80027e0:	4b23      	ldr	r3, [pc, #140]	; (8002870 <_puts_r+0xac>)
 80027e2:	429c      	cmp	r4, r3
 80027e4:	d117      	bne.n	8002816 <_puts_r+0x52>
 80027e6:	686c      	ldr	r4, [r5, #4]
 80027e8:	89a3      	ldrh	r3, [r4, #12]
 80027ea:	071b      	lsls	r3, r3, #28
 80027ec:	d51d      	bpl.n	800282a <_puts_r+0x66>
 80027ee:	6923      	ldr	r3, [r4, #16]
 80027f0:	b1db      	cbz	r3, 800282a <_puts_r+0x66>
 80027f2:	3e01      	subs	r6, #1
 80027f4:	68a3      	ldr	r3, [r4, #8]
 80027f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80027fa:	3b01      	subs	r3, #1
 80027fc:	60a3      	str	r3, [r4, #8]
 80027fe:	b9e9      	cbnz	r1, 800283c <_puts_r+0x78>
 8002800:	2b00      	cmp	r3, #0
 8002802:	da2e      	bge.n	8002862 <_puts_r+0x9e>
 8002804:	4622      	mov	r2, r4
 8002806:	210a      	movs	r1, #10
 8002808:	4628      	mov	r0, r5
 800280a:	f000 f83f 	bl	800288c <__swbuf_r>
 800280e:	3001      	adds	r0, #1
 8002810:	d011      	beq.n	8002836 <_puts_r+0x72>
 8002812:	200a      	movs	r0, #10
 8002814:	bd70      	pop	{r4, r5, r6, pc}
 8002816:	4b17      	ldr	r3, [pc, #92]	; (8002874 <_puts_r+0xb0>)
 8002818:	429c      	cmp	r4, r3
 800281a:	d101      	bne.n	8002820 <_puts_r+0x5c>
 800281c:	68ac      	ldr	r4, [r5, #8]
 800281e:	e7e3      	b.n	80027e8 <_puts_r+0x24>
 8002820:	4b15      	ldr	r3, [pc, #84]	; (8002878 <_puts_r+0xb4>)
 8002822:	429c      	cmp	r4, r3
 8002824:	bf08      	it	eq
 8002826:	68ec      	ldreq	r4, [r5, #12]
 8002828:	e7de      	b.n	80027e8 <_puts_r+0x24>
 800282a:	4621      	mov	r1, r4
 800282c:	4628      	mov	r0, r5
 800282e:	f000 f87f 	bl	8002930 <__swsetup_r>
 8002832:	2800      	cmp	r0, #0
 8002834:	d0dd      	beq.n	80027f2 <_puts_r+0x2e>
 8002836:	f04f 30ff 	mov.w	r0, #4294967295
 800283a:	bd70      	pop	{r4, r5, r6, pc}
 800283c:	2b00      	cmp	r3, #0
 800283e:	da04      	bge.n	800284a <_puts_r+0x86>
 8002840:	69a2      	ldr	r2, [r4, #24]
 8002842:	4293      	cmp	r3, r2
 8002844:	db06      	blt.n	8002854 <_puts_r+0x90>
 8002846:	290a      	cmp	r1, #10
 8002848:	d004      	beq.n	8002854 <_puts_r+0x90>
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	6022      	str	r2, [r4, #0]
 8002850:	7019      	strb	r1, [r3, #0]
 8002852:	e7cf      	b.n	80027f4 <_puts_r+0x30>
 8002854:	4622      	mov	r2, r4
 8002856:	4628      	mov	r0, r5
 8002858:	f000 f818 	bl	800288c <__swbuf_r>
 800285c:	3001      	adds	r0, #1
 800285e:	d1c9      	bne.n	80027f4 <_puts_r+0x30>
 8002860:	e7e9      	b.n	8002836 <_puts_r+0x72>
 8002862:	200a      	movs	r0, #10
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	6022      	str	r2, [r4, #0]
 800286a:	7018      	strb	r0, [r3, #0]
 800286c:	bd70      	pop	{r4, r5, r6, pc}
 800286e:	bf00      	nop
 8002870:	080033a0 	.word	0x080033a0
 8002874:	080033c0 	.word	0x080033c0
 8002878:	08003380 	.word	0x08003380

0800287c <puts>:
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <puts+0xc>)
 800287e:	4601      	mov	r1, r0
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	f7ff bf9f 	b.w	80027c4 <_puts_r>
 8002886:	bf00      	nop
 8002888:	2000000c 	.word	0x2000000c

0800288c <__swbuf_r>:
 800288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288e:	460e      	mov	r6, r1
 8002890:	4614      	mov	r4, r2
 8002892:	4605      	mov	r5, r0
 8002894:	b118      	cbz	r0, 800289e <__swbuf_r+0x12>
 8002896:	6983      	ldr	r3, [r0, #24]
 8002898:	b90b      	cbnz	r3, 800289e <__swbuf_r+0x12>
 800289a:	f000 f9a9 	bl	8002bf0 <__sinit>
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <__swbuf_r+0x98>)
 80028a0:	429c      	cmp	r4, r3
 80028a2:	d12a      	bne.n	80028fa <__swbuf_r+0x6e>
 80028a4:	686c      	ldr	r4, [r5, #4]
 80028a6:	69a3      	ldr	r3, [r4, #24]
 80028a8:	60a3      	str	r3, [r4, #8]
 80028aa:	89a3      	ldrh	r3, [r4, #12]
 80028ac:	071a      	lsls	r2, r3, #28
 80028ae:	d52e      	bpl.n	800290e <__swbuf_r+0x82>
 80028b0:	6923      	ldr	r3, [r4, #16]
 80028b2:	b363      	cbz	r3, 800290e <__swbuf_r+0x82>
 80028b4:	6923      	ldr	r3, [r4, #16]
 80028b6:	6820      	ldr	r0, [r4, #0]
 80028b8:	b2f6      	uxtb	r6, r6
 80028ba:	1ac0      	subs	r0, r0, r3
 80028bc:	6963      	ldr	r3, [r4, #20]
 80028be:	4637      	mov	r7, r6
 80028c0:	4298      	cmp	r0, r3
 80028c2:	db04      	blt.n	80028ce <__swbuf_r+0x42>
 80028c4:	4621      	mov	r1, r4
 80028c6:	4628      	mov	r0, r5
 80028c8:	f000 f928 	bl	8002b1c <_fflush_r>
 80028cc:	bb28      	cbnz	r0, 800291a <__swbuf_r+0x8e>
 80028ce:	68a3      	ldr	r3, [r4, #8]
 80028d0:	3001      	adds	r0, #1
 80028d2:	3b01      	subs	r3, #1
 80028d4:	60a3      	str	r3, [r4, #8]
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	6022      	str	r2, [r4, #0]
 80028dc:	701e      	strb	r6, [r3, #0]
 80028de:	6963      	ldr	r3, [r4, #20]
 80028e0:	4298      	cmp	r0, r3
 80028e2:	d004      	beq.n	80028ee <__swbuf_r+0x62>
 80028e4:	89a3      	ldrh	r3, [r4, #12]
 80028e6:	07db      	lsls	r3, r3, #31
 80028e8:	d519      	bpl.n	800291e <__swbuf_r+0x92>
 80028ea:	2e0a      	cmp	r6, #10
 80028ec:	d117      	bne.n	800291e <__swbuf_r+0x92>
 80028ee:	4621      	mov	r1, r4
 80028f0:	4628      	mov	r0, r5
 80028f2:	f000 f913 	bl	8002b1c <_fflush_r>
 80028f6:	b190      	cbz	r0, 800291e <__swbuf_r+0x92>
 80028f8:	e00f      	b.n	800291a <__swbuf_r+0x8e>
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <__swbuf_r+0x9c>)
 80028fc:	429c      	cmp	r4, r3
 80028fe:	d101      	bne.n	8002904 <__swbuf_r+0x78>
 8002900:	68ac      	ldr	r4, [r5, #8]
 8002902:	e7d0      	b.n	80028a6 <__swbuf_r+0x1a>
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <__swbuf_r+0xa0>)
 8002906:	429c      	cmp	r4, r3
 8002908:	bf08      	it	eq
 800290a:	68ec      	ldreq	r4, [r5, #12]
 800290c:	e7cb      	b.n	80028a6 <__swbuf_r+0x1a>
 800290e:	4621      	mov	r1, r4
 8002910:	4628      	mov	r0, r5
 8002912:	f000 f80d 	bl	8002930 <__swsetup_r>
 8002916:	2800      	cmp	r0, #0
 8002918:	d0cc      	beq.n	80028b4 <__swbuf_r+0x28>
 800291a:	f04f 37ff 	mov.w	r7, #4294967295
 800291e:	4638      	mov	r0, r7
 8002920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002922:	bf00      	nop
 8002924:	080033a0 	.word	0x080033a0
 8002928:	080033c0 	.word	0x080033c0
 800292c:	08003380 	.word	0x08003380

08002930 <__swsetup_r>:
 8002930:	4b32      	ldr	r3, [pc, #200]	; (80029fc <__swsetup_r+0xcc>)
 8002932:	b570      	push	{r4, r5, r6, lr}
 8002934:	681d      	ldr	r5, [r3, #0]
 8002936:	4606      	mov	r6, r0
 8002938:	460c      	mov	r4, r1
 800293a:	b125      	cbz	r5, 8002946 <__swsetup_r+0x16>
 800293c:	69ab      	ldr	r3, [r5, #24]
 800293e:	b913      	cbnz	r3, 8002946 <__swsetup_r+0x16>
 8002940:	4628      	mov	r0, r5
 8002942:	f000 f955 	bl	8002bf0 <__sinit>
 8002946:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <__swsetup_r+0xd0>)
 8002948:	429c      	cmp	r4, r3
 800294a:	d10f      	bne.n	800296c <__swsetup_r+0x3c>
 800294c:	686c      	ldr	r4, [r5, #4]
 800294e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002952:	b29a      	uxth	r2, r3
 8002954:	0715      	lsls	r5, r2, #28
 8002956:	d42c      	bmi.n	80029b2 <__swsetup_r+0x82>
 8002958:	06d0      	lsls	r0, r2, #27
 800295a:	d411      	bmi.n	8002980 <__swsetup_r+0x50>
 800295c:	2209      	movs	r2, #9
 800295e:	6032      	str	r2, [r6, #0]
 8002960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002964:	81a3      	strh	r3, [r4, #12]
 8002966:	f04f 30ff 	mov.w	r0, #4294967295
 800296a:	bd70      	pop	{r4, r5, r6, pc}
 800296c:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <__swsetup_r+0xd4>)
 800296e:	429c      	cmp	r4, r3
 8002970:	d101      	bne.n	8002976 <__swsetup_r+0x46>
 8002972:	68ac      	ldr	r4, [r5, #8]
 8002974:	e7eb      	b.n	800294e <__swsetup_r+0x1e>
 8002976:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <__swsetup_r+0xd8>)
 8002978:	429c      	cmp	r4, r3
 800297a:	bf08      	it	eq
 800297c:	68ec      	ldreq	r4, [r5, #12]
 800297e:	e7e6      	b.n	800294e <__swsetup_r+0x1e>
 8002980:	0751      	lsls	r1, r2, #29
 8002982:	d512      	bpl.n	80029aa <__swsetup_r+0x7a>
 8002984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002986:	b141      	cbz	r1, 800299a <__swsetup_r+0x6a>
 8002988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800298c:	4299      	cmp	r1, r3
 800298e:	d002      	beq.n	8002996 <__swsetup_r+0x66>
 8002990:	4630      	mov	r0, r6
 8002992:	f000 fa1b 	bl	8002dcc <_free_r>
 8002996:	2300      	movs	r3, #0
 8002998:	6363      	str	r3, [r4, #52]	; 0x34
 800299a:	89a3      	ldrh	r3, [r4, #12]
 800299c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80029a0:	81a3      	strh	r3, [r4, #12]
 80029a2:	2300      	movs	r3, #0
 80029a4:	6063      	str	r3, [r4, #4]
 80029a6:	6923      	ldr	r3, [r4, #16]
 80029a8:	6023      	str	r3, [r4, #0]
 80029aa:	89a3      	ldrh	r3, [r4, #12]
 80029ac:	f043 0308 	orr.w	r3, r3, #8
 80029b0:	81a3      	strh	r3, [r4, #12]
 80029b2:	6923      	ldr	r3, [r4, #16]
 80029b4:	b94b      	cbnz	r3, 80029ca <__swsetup_r+0x9a>
 80029b6:	89a3      	ldrh	r3, [r4, #12]
 80029b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80029bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c0:	d003      	beq.n	80029ca <__swsetup_r+0x9a>
 80029c2:	4621      	mov	r1, r4
 80029c4:	4630      	mov	r0, r6
 80029c6:	f000 f9c1 	bl	8002d4c <__smakebuf_r>
 80029ca:	89a2      	ldrh	r2, [r4, #12]
 80029cc:	f012 0301 	ands.w	r3, r2, #1
 80029d0:	d00c      	beq.n	80029ec <__swsetup_r+0xbc>
 80029d2:	2300      	movs	r3, #0
 80029d4:	60a3      	str	r3, [r4, #8]
 80029d6:	6963      	ldr	r3, [r4, #20]
 80029d8:	425b      	negs	r3, r3
 80029da:	61a3      	str	r3, [r4, #24]
 80029dc:	6923      	ldr	r3, [r4, #16]
 80029de:	b953      	cbnz	r3, 80029f6 <__swsetup_r+0xc6>
 80029e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80029e8:	d1ba      	bne.n	8002960 <__swsetup_r+0x30>
 80029ea:	bd70      	pop	{r4, r5, r6, pc}
 80029ec:	0792      	lsls	r2, r2, #30
 80029ee:	bf58      	it	pl
 80029f0:	6963      	ldrpl	r3, [r4, #20]
 80029f2:	60a3      	str	r3, [r4, #8]
 80029f4:	e7f2      	b.n	80029dc <__swsetup_r+0xac>
 80029f6:	2000      	movs	r0, #0
 80029f8:	e7f7      	b.n	80029ea <__swsetup_r+0xba>
 80029fa:	bf00      	nop
 80029fc:	2000000c 	.word	0x2000000c
 8002a00:	080033a0 	.word	0x080033a0
 8002a04:	080033c0 	.word	0x080033c0
 8002a08:	08003380 	.word	0x08003380

08002a0c <__sflush_r>:
 8002a0c:	898a      	ldrh	r2, [r1, #12]
 8002a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a12:	4605      	mov	r5, r0
 8002a14:	0710      	lsls	r0, r2, #28
 8002a16:	460c      	mov	r4, r1
 8002a18:	d45a      	bmi.n	8002ad0 <__sflush_r+0xc4>
 8002a1a:	684b      	ldr	r3, [r1, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	dc05      	bgt.n	8002a2c <__sflush_r+0x20>
 8002a20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	dc02      	bgt.n	8002a2c <__sflush_r+0x20>
 8002a26:	2000      	movs	r0, #0
 8002a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a2e:	2e00      	cmp	r6, #0
 8002a30:	d0f9      	beq.n	8002a26 <__sflush_r+0x1a>
 8002a32:	2300      	movs	r3, #0
 8002a34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a38:	682f      	ldr	r7, [r5, #0]
 8002a3a:	602b      	str	r3, [r5, #0]
 8002a3c:	d033      	beq.n	8002aa6 <__sflush_r+0x9a>
 8002a3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a40:	89a3      	ldrh	r3, [r4, #12]
 8002a42:	075a      	lsls	r2, r3, #29
 8002a44:	d505      	bpl.n	8002a52 <__sflush_r+0x46>
 8002a46:	6863      	ldr	r3, [r4, #4]
 8002a48:	1ac0      	subs	r0, r0, r3
 8002a4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a4c:	b10b      	cbz	r3, 8002a52 <__sflush_r+0x46>
 8002a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a50:	1ac0      	subs	r0, r0, r3
 8002a52:	2300      	movs	r3, #0
 8002a54:	4602      	mov	r2, r0
 8002a56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a58:	6a21      	ldr	r1, [r4, #32]
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	47b0      	blx	r6
 8002a5e:	1c43      	adds	r3, r0, #1
 8002a60:	89a3      	ldrh	r3, [r4, #12]
 8002a62:	d106      	bne.n	8002a72 <__sflush_r+0x66>
 8002a64:	6829      	ldr	r1, [r5, #0]
 8002a66:	291d      	cmp	r1, #29
 8002a68:	d84b      	bhi.n	8002b02 <__sflush_r+0xf6>
 8002a6a:	4a2b      	ldr	r2, [pc, #172]	; (8002b18 <__sflush_r+0x10c>)
 8002a6c:	40ca      	lsrs	r2, r1
 8002a6e:	07d6      	lsls	r6, r2, #31
 8002a70:	d547      	bpl.n	8002b02 <__sflush_r+0xf6>
 8002a72:	2200      	movs	r2, #0
 8002a74:	6062      	str	r2, [r4, #4]
 8002a76:	6922      	ldr	r2, [r4, #16]
 8002a78:	04d9      	lsls	r1, r3, #19
 8002a7a:	6022      	str	r2, [r4, #0]
 8002a7c:	d504      	bpl.n	8002a88 <__sflush_r+0x7c>
 8002a7e:	1c42      	adds	r2, r0, #1
 8002a80:	d101      	bne.n	8002a86 <__sflush_r+0x7a>
 8002a82:	682b      	ldr	r3, [r5, #0]
 8002a84:	b903      	cbnz	r3, 8002a88 <__sflush_r+0x7c>
 8002a86:	6560      	str	r0, [r4, #84]	; 0x54
 8002a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a8a:	602f      	str	r7, [r5, #0]
 8002a8c:	2900      	cmp	r1, #0
 8002a8e:	d0ca      	beq.n	8002a26 <__sflush_r+0x1a>
 8002a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a94:	4299      	cmp	r1, r3
 8002a96:	d002      	beq.n	8002a9e <__sflush_r+0x92>
 8002a98:	4628      	mov	r0, r5
 8002a9a:	f000 f997 	bl	8002dcc <_free_r>
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8002aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002aa6:	6a21      	ldr	r1, [r4, #32]
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	4628      	mov	r0, r5
 8002aac:	47b0      	blx	r6
 8002aae:	1c41      	adds	r1, r0, #1
 8002ab0:	d1c6      	bne.n	8002a40 <__sflush_r+0x34>
 8002ab2:	682b      	ldr	r3, [r5, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0c3      	beq.n	8002a40 <__sflush_r+0x34>
 8002ab8:	2b1d      	cmp	r3, #29
 8002aba:	d001      	beq.n	8002ac0 <__sflush_r+0xb4>
 8002abc:	2b16      	cmp	r3, #22
 8002abe:	d101      	bne.n	8002ac4 <__sflush_r+0xb8>
 8002ac0:	602f      	str	r7, [r5, #0]
 8002ac2:	e7b0      	b.n	8002a26 <__sflush_r+0x1a>
 8002ac4:	89a3      	ldrh	r3, [r4, #12]
 8002ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aca:	81a3      	strh	r3, [r4, #12]
 8002acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ad0:	690f      	ldr	r7, [r1, #16]
 8002ad2:	2f00      	cmp	r7, #0
 8002ad4:	d0a7      	beq.n	8002a26 <__sflush_r+0x1a>
 8002ad6:	0793      	lsls	r3, r2, #30
 8002ad8:	bf18      	it	ne
 8002ada:	2300      	movne	r3, #0
 8002adc:	680e      	ldr	r6, [r1, #0]
 8002ade:	bf08      	it	eq
 8002ae0:	694b      	ldreq	r3, [r1, #20]
 8002ae2:	eba6 0807 	sub.w	r8, r6, r7
 8002ae6:	600f      	str	r7, [r1, #0]
 8002ae8:	608b      	str	r3, [r1, #8]
 8002aea:	f1b8 0f00 	cmp.w	r8, #0
 8002aee:	dd9a      	ble.n	8002a26 <__sflush_r+0x1a>
 8002af0:	4643      	mov	r3, r8
 8002af2:	463a      	mov	r2, r7
 8002af4:	6a21      	ldr	r1, [r4, #32]
 8002af6:	4628      	mov	r0, r5
 8002af8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002afa:	47b0      	blx	r6
 8002afc:	2800      	cmp	r0, #0
 8002afe:	dc07      	bgt.n	8002b10 <__sflush_r+0x104>
 8002b00:	89a3      	ldrh	r3, [r4, #12]
 8002b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b06:	81a3      	strh	r3, [r4, #12]
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b10:	4407      	add	r7, r0
 8002b12:	eba8 0800 	sub.w	r8, r8, r0
 8002b16:	e7e8      	b.n	8002aea <__sflush_r+0xde>
 8002b18:	20400001 	.word	0x20400001

08002b1c <_fflush_r>:
 8002b1c:	b538      	push	{r3, r4, r5, lr}
 8002b1e:	690b      	ldr	r3, [r1, #16]
 8002b20:	4605      	mov	r5, r0
 8002b22:	460c      	mov	r4, r1
 8002b24:	b1db      	cbz	r3, 8002b5e <_fflush_r+0x42>
 8002b26:	b118      	cbz	r0, 8002b30 <_fflush_r+0x14>
 8002b28:	6983      	ldr	r3, [r0, #24]
 8002b2a:	b90b      	cbnz	r3, 8002b30 <_fflush_r+0x14>
 8002b2c:	f000 f860 	bl	8002bf0 <__sinit>
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <_fflush_r+0x48>)
 8002b32:	429c      	cmp	r4, r3
 8002b34:	d109      	bne.n	8002b4a <_fflush_r+0x2e>
 8002b36:	686c      	ldr	r4, [r5, #4]
 8002b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b3c:	b17b      	cbz	r3, 8002b5e <_fflush_r+0x42>
 8002b3e:	4621      	mov	r1, r4
 8002b40:	4628      	mov	r0, r5
 8002b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b46:	f7ff bf61 	b.w	8002a0c <__sflush_r>
 8002b4a:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <_fflush_r+0x4c>)
 8002b4c:	429c      	cmp	r4, r3
 8002b4e:	d101      	bne.n	8002b54 <_fflush_r+0x38>
 8002b50:	68ac      	ldr	r4, [r5, #8]
 8002b52:	e7f1      	b.n	8002b38 <_fflush_r+0x1c>
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <_fflush_r+0x50>)
 8002b56:	429c      	cmp	r4, r3
 8002b58:	bf08      	it	eq
 8002b5a:	68ec      	ldreq	r4, [r5, #12]
 8002b5c:	e7ec      	b.n	8002b38 <_fflush_r+0x1c>
 8002b5e:	2000      	movs	r0, #0
 8002b60:	bd38      	pop	{r3, r4, r5, pc}
 8002b62:	bf00      	nop
 8002b64:	080033a0 	.word	0x080033a0
 8002b68:	080033c0 	.word	0x080033c0
 8002b6c:	08003380 	.word	0x08003380

08002b70 <_cleanup_r>:
 8002b70:	4901      	ldr	r1, [pc, #4]	; (8002b78 <_cleanup_r+0x8>)
 8002b72:	f000 b8a9 	b.w	8002cc8 <_fwalk_reent>
 8002b76:	bf00      	nop
 8002b78:	08002b1d 	.word	0x08002b1d

08002b7c <std.isra.0>:
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	b510      	push	{r4, lr}
 8002b80:	4604      	mov	r4, r0
 8002b82:	6003      	str	r3, [r0, #0]
 8002b84:	6043      	str	r3, [r0, #4]
 8002b86:	6083      	str	r3, [r0, #8]
 8002b88:	8181      	strh	r1, [r0, #12]
 8002b8a:	6643      	str	r3, [r0, #100]	; 0x64
 8002b8c:	81c2      	strh	r2, [r0, #14]
 8002b8e:	6103      	str	r3, [r0, #16]
 8002b90:	6143      	str	r3, [r0, #20]
 8002b92:	6183      	str	r3, [r0, #24]
 8002b94:	4619      	mov	r1, r3
 8002b96:	2208      	movs	r2, #8
 8002b98:	305c      	adds	r0, #92	; 0x5c
 8002b9a:	f7ff fe0b 	bl	80027b4 <memset>
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <std.isra.0+0x38>)
 8002ba0:	6224      	str	r4, [r4, #32]
 8002ba2:	6263      	str	r3, [r4, #36]	; 0x24
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <std.isra.0+0x3c>)
 8002ba6:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <std.isra.0+0x40>)
 8002baa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <std.isra.0+0x44>)
 8002bae:	6323      	str	r3, [r4, #48]	; 0x30
 8002bb0:	bd10      	pop	{r4, pc}
 8002bb2:	bf00      	nop
 8002bb4:	08002f41 	.word	0x08002f41
 8002bb8:	08002f63 	.word	0x08002f63
 8002bbc:	08002f9b 	.word	0x08002f9b
 8002bc0:	08002fbf 	.word	0x08002fbf

08002bc4 <__sfmoreglue>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	2568      	movs	r5, #104	; 0x68
 8002bc8:	1e4a      	subs	r2, r1, #1
 8002bca:	4355      	muls	r5, r2
 8002bcc:	460e      	mov	r6, r1
 8002bce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002bd2:	f000 f947 	bl	8002e64 <_malloc_r>
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	b140      	cbz	r0, 8002bec <__sfmoreglue+0x28>
 8002bda:	2100      	movs	r1, #0
 8002bdc:	e880 0042 	stmia.w	r0, {r1, r6}
 8002be0:	300c      	adds	r0, #12
 8002be2:	60a0      	str	r0, [r4, #8]
 8002be4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002be8:	f7ff fde4 	bl	80027b4 <memset>
 8002bec:	4620      	mov	r0, r4
 8002bee:	bd70      	pop	{r4, r5, r6, pc}

08002bf0 <__sinit>:
 8002bf0:	6983      	ldr	r3, [r0, #24]
 8002bf2:	b510      	push	{r4, lr}
 8002bf4:	4604      	mov	r4, r0
 8002bf6:	bb33      	cbnz	r3, 8002c46 <__sinit+0x56>
 8002bf8:	6483      	str	r3, [r0, #72]	; 0x48
 8002bfa:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002bfc:	6503      	str	r3, [r0, #80]	; 0x50
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <__sinit+0x58>)
 8002c00:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <__sinit+0x5c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6282      	str	r2, [r0, #40]	; 0x28
 8002c06:	4298      	cmp	r0, r3
 8002c08:	bf04      	itt	eq
 8002c0a:	2301      	moveq	r3, #1
 8002c0c:	6183      	streq	r3, [r0, #24]
 8002c0e:	f000 f81f 	bl	8002c50 <__sfp>
 8002c12:	6060      	str	r0, [r4, #4]
 8002c14:	4620      	mov	r0, r4
 8002c16:	f000 f81b 	bl	8002c50 <__sfp>
 8002c1a:	60a0      	str	r0, [r4, #8]
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f000 f817 	bl	8002c50 <__sfp>
 8002c22:	2200      	movs	r2, #0
 8002c24:	60e0      	str	r0, [r4, #12]
 8002c26:	2104      	movs	r1, #4
 8002c28:	6860      	ldr	r0, [r4, #4]
 8002c2a:	f7ff ffa7 	bl	8002b7c <std.isra.0>
 8002c2e:	2201      	movs	r2, #1
 8002c30:	2109      	movs	r1, #9
 8002c32:	68a0      	ldr	r0, [r4, #8]
 8002c34:	f7ff ffa2 	bl	8002b7c <std.isra.0>
 8002c38:	2202      	movs	r2, #2
 8002c3a:	2112      	movs	r1, #18
 8002c3c:	68e0      	ldr	r0, [r4, #12]
 8002c3e:	f7ff ff9d 	bl	8002b7c <std.isra.0>
 8002c42:	2301      	movs	r3, #1
 8002c44:	61a3      	str	r3, [r4, #24]
 8002c46:	bd10      	pop	{r4, pc}
 8002c48:	080033e0 	.word	0x080033e0
 8002c4c:	08002b71 	.word	0x08002b71

08002c50 <__sfp>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <__sfp+0x74>)
 8002c54:	4607      	mov	r7, r0
 8002c56:	681e      	ldr	r6, [r3, #0]
 8002c58:	69b3      	ldr	r3, [r6, #24]
 8002c5a:	b913      	cbnz	r3, 8002c62 <__sfp+0x12>
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	f7ff ffc7 	bl	8002bf0 <__sinit>
 8002c62:	3648      	adds	r6, #72	; 0x48
 8002c64:	68b4      	ldr	r4, [r6, #8]
 8002c66:	6873      	ldr	r3, [r6, #4]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	d503      	bpl.n	8002c74 <__sfp+0x24>
 8002c6c:	6833      	ldr	r3, [r6, #0]
 8002c6e:	b133      	cbz	r3, 8002c7e <__sfp+0x2e>
 8002c70:	6836      	ldr	r6, [r6, #0]
 8002c72:	e7f7      	b.n	8002c64 <__sfp+0x14>
 8002c74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002c78:	b16d      	cbz	r5, 8002c96 <__sfp+0x46>
 8002c7a:	3468      	adds	r4, #104	; 0x68
 8002c7c:	e7f4      	b.n	8002c68 <__sfp+0x18>
 8002c7e:	2104      	movs	r1, #4
 8002c80:	4638      	mov	r0, r7
 8002c82:	f7ff ff9f 	bl	8002bc4 <__sfmoreglue>
 8002c86:	6030      	str	r0, [r6, #0]
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	d1f1      	bne.n	8002c70 <__sfp+0x20>
 8002c8c:	230c      	movs	r3, #12
 8002c8e:	4604      	mov	r4, r0
 8002c90:	603b      	str	r3, [r7, #0]
 8002c92:	4620      	mov	r0, r4
 8002c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c9a:	81e3      	strh	r3, [r4, #14]
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	6665      	str	r5, [r4, #100]	; 0x64
 8002ca0:	81a3      	strh	r3, [r4, #12]
 8002ca2:	6025      	str	r5, [r4, #0]
 8002ca4:	60a5      	str	r5, [r4, #8]
 8002ca6:	6065      	str	r5, [r4, #4]
 8002ca8:	6125      	str	r5, [r4, #16]
 8002caa:	6165      	str	r5, [r4, #20]
 8002cac:	61a5      	str	r5, [r4, #24]
 8002cae:	2208      	movs	r2, #8
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002cb6:	f7ff fd7d 	bl	80027b4 <memset>
 8002cba:	6365      	str	r5, [r4, #52]	; 0x34
 8002cbc:	63a5      	str	r5, [r4, #56]	; 0x38
 8002cbe:	64a5      	str	r5, [r4, #72]	; 0x48
 8002cc0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002cc2:	e7e6      	b.n	8002c92 <__sfp+0x42>
 8002cc4:	080033e0 	.word	0x080033e0

08002cc8 <_fwalk_reent>:
 8002cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ccc:	4680      	mov	r8, r0
 8002cce:	4689      	mov	r9, r1
 8002cd0:	2600      	movs	r6, #0
 8002cd2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002cd6:	b914      	cbnz	r4, 8002cde <_fwalk_reent+0x16>
 8002cd8:	4630      	mov	r0, r6
 8002cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cde:	68a5      	ldr	r5, [r4, #8]
 8002ce0:	6867      	ldr	r7, [r4, #4]
 8002ce2:	3f01      	subs	r7, #1
 8002ce4:	d501      	bpl.n	8002cea <_fwalk_reent+0x22>
 8002ce6:	6824      	ldr	r4, [r4, #0]
 8002ce8:	e7f5      	b.n	8002cd6 <_fwalk_reent+0xe>
 8002cea:	89ab      	ldrh	r3, [r5, #12]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d907      	bls.n	8002d00 <_fwalk_reent+0x38>
 8002cf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	d003      	beq.n	8002d00 <_fwalk_reent+0x38>
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	4640      	mov	r0, r8
 8002cfc:	47c8      	blx	r9
 8002cfe:	4306      	orrs	r6, r0
 8002d00:	3568      	adds	r5, #104	; 0x68
 8002d02:	e7ee      	b.n	8002ce2 <_fwalk_reent+0x1a>

08002d04 <__swhatbuf_r>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	460e      	mov	r6, r1
 8002d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d0c:	b090      	sub	sp, #64	; 0x40
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	4614      	mov	r4, r2
 8002d12:	461d      	mov	r5, r3
 8002d14:	da07      	bge.n	8002d26 <__swhatbuf_r+0x22>
 8002d16:	2300      	movs	r3, #0
 8002d18:	602b      	str	r3, [r5, #0]
 8002d1a:	89b3      	ldrh	r3, [r6, #12]
 8002d1c:	061a      	lsls	r2, r3, #24
 8002d1e:	d410      	bmi.n	8002d42 <__swhatbuf_r+0x3e>
 8002d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d24:	e00e      	b.n	8002d44 <__swhatbuf_r+0x40>
 8002d26:	aa01      	add	r2, sp, #4
 8002d28:	f000 f970 	bl	800300c <_fstat_r>
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	dbf2      	blt.n	8002d16 <__swhatbuf_r+0x12>
 8002d30:	9a02      	ldr	r2, [sp, #8]
 8002d32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d3a:	425a      	negs	r2, r3
 8002d3c:	415a      	adcs	r2, r3
 8002d3e:	602a      	str	r2, [r5, #0]
 8002d40:	e7ee      	b.n	8002d20 <__swhatbuf_r+0x1c>
 8002d42:	2340      	movs	r3, #64	; 0x40
 8002d44:	2000      	movs	r0, #0
 8002d46:	6023      	str	r3, [r4, #0]
 8002d48:	b010      	add	sp, #64	; 0x40
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}

08002d4c <__smakebuf_r>:
 8002d4c:	898b      	ldrh	r3, [r1, #12]
 8002d4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d50:	079d      	lsls	r5, r3, #30
 8002d52:	4606      	mov	r6, r0
 8002d54:	460c      	mov	r4, r1
 8002d56:	d507      	bpl.n	8002d68 <__smakebuf_r+0x1c>
 8002d58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d5c:	6023      	str	r3, [r4, #0]
 8002d5e:	6123      	str	r3, [r4, #16]
 8002d60:	2301      	movs	r3, #1
 8002d62:	6163      	str	r3, [r4, #20]
 8002d64:	b002      	add	sp, #8
 8002d66:	bd70      	pop	{r4, r5, r6, pc}
 8002d68:	ab01      	add	r3, sp, #4
 8002d6a:	466a      	mov	r2, sp
 8002d6c:	f7ff ffca 	bl	8002d04 <__swhatbuf_r>
 8002d70:	9900      	ldr	r1, [sp, #0]
 8002d72:	4605      	mov	r5, r0
 8002d74:	4630      	mov	r0, r6
 8002d76:	f000 f875 	bl	8002e64 <_malloc_r>
 8002d7a:	b948      	cbnz	r0, 8002d90 <__smakebuf_r+0x44>
 8002d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d80:	059a      	lsls	r2, r3, #22
 8002d82:	d4ef      	bmi.n	8002d64 <__smakebuf_r+0x18>
 8002d84:	f023 0303 	bic.w	r3, r3, #3
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	81a3      	strh	r3, [r4, #12]
 8002d8e:	e7e3      	b.n	8002d58 <__smakebuf_r+0xc>
 8002d90:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <__smakebuf_r+0x7c>)
 8002d92:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d94:	89a3      	ldrh	r3, [r4, #12]
 8002d96:	6020      	str	r0, [r4, #0]
 8002d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9c:	81a3      	strh	r3, [r4, #12]
 8002d9e:	9b00      	ldr	r3, [sp, #0]
 8002da0:	6120      	str	r0, [r4, #16]
 8002da2:	6163      	str	r3, [r4, #20]
 8002da4:	9b01      	ldr	r3, [sp, #4]
 8002da6:	b15b      	cbz	r3, 8002dc0 <__smakebuf_r+0x74>
 8002da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dac:	4630      	mov	r0, r6
 8002dae:	f000 f93f 	bl	8003030 <_isatty_r>
 8002db2:	b128      	cbz	r0, 8002dc0 <__smakebuf_r+0x74>
 8002db4:	89a3      	ldrh	r3, [r4, #12]
 8002db6:	f023 0303 	bic.w	r3, r3, #3
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	81a3      	strh	r3, [r4, #12]
 8002dc0:	89a3      	ldrh	r3, [r4, #12]
 8002dc2:	431d      	orrs	r5, r3
 8002dc4:	81a5      	strh	r5, [r4, #12]
 8002dc6:	e7cd      	b.n	8002d64 <__smakebuf_r+0x18>
 8002dc8:	08002b71 	.word	0x08002b71

08002dcc <_free_r>:
 8002dcc:	b538      	push	{r3, r4, r5, lr}
 8002dce:	4605      	mov	r5, r0
 8002dd0:	2900      	cmp	r1, #0
 8002dd2:	d043      	beq.n	8002e5c <_free_r+0x90>
 8002dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dd8:	1f0c      	subs	r4, r1, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bfb8      	it	lt
 8002dde:	18e4      	addlt	r4, r4, r3
 8002de0:	f000 f948 	bl	8003074 <__malloc_lock>
 8002de4:	4a1e      	ldr	r2, [pc, #120]	; (8002e60 <_free_r+0x94>)
 8002de6:	6813      	ldr	r3, [r2, #0]
 8002de8:	4610      	mov	r0, r2
 8002dea:	b933      	cbnz	r3, 8002dfa <_free_r+0x2e>
 8002dec:	6063      	str	r3, [r4, #4]
 8002dee:	6014      	str	r4, [r2, #0]
 8002df0:	4628      	mov	r0, r5
 8002df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002df6:	f000 b93e 	b.w	8003076 <__malloc_unlock>
 8002dfa:	42a3      	cmp	r3, r4
 8002dfc:	d90b      	bls.n	8002e16 <_free_r+0x4a>
 8002dfe:	6821      	ldr	r1, [r4, #0]
 8002e00:	1862      	adds	r2, r4, r1
 8002e02:	4293      	cmp	r3, r2
 8002e04:	bf01      	itttt	eq
 8002e06:	681a      	ldreq	r2, [r3, #0]
 8002e08:	685b      	ldreq	r3, [r3, #4]
 8002e0a:	1852      	addeq	r2, r2, r1
 8002e0c:	6022      	streq	r2, [r4, #0]
 8002e0e:	6063      	str	r3, [r4, #4]
 8002e10:	6004      	str	r4, [r0, #0]
 8002e12:	e7ed      	b.n	8002df0 <_free_r+0x24>
 8002e14:	4613      	mov	r3, r2
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	b10a      	cbz	r2, 8002e1e <_free_r+0x52>
 8002e1a:	42a2      	cmp	r2, r4
 8002e1c:	d9fa      	bls.n	8002e14 <_free_r+0x48>
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	1858      	adds	r0, r3, r1
 8002e22:	42a0      	cmp	r0, r4
 8002e24:	d10b      	bne.n	8002e3e <_free_r+0x72>
 8002e26:	6820      	ldr	r0, [r4, #0]
 8002e28:	4401      	add	r1, r0
 8002e2a:	1858      	adds	r0, r3, r1
 8002e2c:	4282      	cmp	r2, r0
 8002e2e:	6019      	str	r1, [r3, #0]
 8002e30:	d1de      	bne.n	8002df0 <_free_r+0x24>
 8002e32:	6810      	ldr	r0, [r2, #0]
 8002e34:	6852      	ldr	r2, [r2, #4]
 8002e36:	4401      	add	r1, r0
 8002e38:	6019      	str	r1, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	e7d8      	b.n	8002df0 <_free_r+0x24>
 8002e3e:	d902      	bls.n	8002e46 <_free_r+0x7a>
 8002e40:	230c      	movs	r3, #12
 8002e42:	602b      	str	r3, [r5, #0]
 8002e44:	e7d4      	b.n	8002df0 <_free_r+0x24>
 8002e46:	6820      	ldr	r0, [r4, #0]
 8002e48:	1821      	adds	r1, r4, r0
 8002e4a:	428a      	cmp	r2, r1
 8002e4c:	bf01      	itttt	eq
 8002e4e:	6811      	ldreq	r1, [r2, #0]
 8002e50:	6852      	ldreq	r2, [r2, #4]
 8002e52:	1809      	addeq	r1, r1, r0
 8002e54:	6021      	streq	r1, [r4, #0]
 8002e56:	6062      	str	r2, [r4, #4]
 8002e58:	605c      	str	r4, [r3, #4]
 8002e5a:	e7c9      	b.n	8002df0 <_free_r+0x24>
 8002e5c:	bd38      	pop	{r3, r4, r5, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000090 	.word	0x20000090

08002e64 <_malloc_r>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	1ccd      	adds	r5, r1, #3
 8002e68:	f025 0503 	bic.w	r5, r5, #3
 8002e6c:	3508      	adds	r5, #8
 8002e6e:	2d0c      	cmp	r5, #12
 8002e70:	bf38      	it	cc
 8002e72:	250c      	movcc	r5, #12
 8002e74:	2d00      	cmp	r5, #0
 8002e76:	4606      	mov	r6, r0
 8002e78:	db01      	blt.n	8002e7e <_malloc_r+0x1a>
 8002e7a:	42a9      	cmp	r1, r5
 8002e7c:	d903      	bls.n	8002e86 <_malloc_r+0x22>
 8002e7e:	230c      	movs	r3, #12
 8002e80:	6033      	str	r3, [r6, #0]
 8002e82:	2000      	movs	r0, #0
 8002e84:	bd70      	pop	{r4, r5, r6, pc}
 8002e86:	f000 f8f5 	bl	8003074 <__malloc_lock>
 8002e8a:	4a23      	ldr	r2, [pc, #140]	; (8002f18 <_malloc_r+0xb4>)
 8002e8c:	6814      	ldr	r4, [r2, #0]
 8002e8e:	4621      	mov	r1, r4
 8002e90:	b991      	cbnz	r1, 8002eb8 <_malloc_r+0x54>
 8002e92:	4c22      	ldr	r4, [pc, #136]	; (8002f1c <_malloc_r+0xb8>)
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	b91b      	cbnz	r3, 8002ea0 <_malloc_r+0x3c>
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f000 f841 	bl	8002f20 <_sbrk_r>
 8002e9e:	6020      	str	r0, [r4, #0]
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	f000 f83c 	bl	8002f20 <_sbrk_r>
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	d126      	bne.n	8002efa <_malloc_r+0x96>
 8002eac:	230c      	movs	r3, #12
 8002eae:	4630      	mov	r0, r6
 8002eb0:	6033      	str	r3, [r6, #0]
 8002eb2:	f000 f8e0 	bl	8003076 <__malloc_unlock>
 8002eb6:	e7e4      	b.n	8002e82 <_malloc_r+0x1e>
 8002eb8:	680b      	ldr	r3, [r1, #0]
 8002eba:	1b5b      	subs	r3, r3, r5
 8002ebc:	d41a      	bmi.n	8002ef4 <_malloc_r+0x90>
 8002ebe:	2b0b      	cmp	r3, #11
 8002ec0:	d90f      	bls.n	8002ee2 <_malloc_r+0x7e>
 8002ec2:	600b      	str	r3, [r1, #0]
 8002ec4:	18cc      	adds	r4, r1, r3
 8002ec6:	50cd      	str	r5, [r1, r3]
 8002ec8:	4630      	mov	r0, r6
 8002eca:	f000 f8d4 	bl	8003076 <__malloc_unlock>
 8002ece:	f104 000b 	add.w	r0, r4, #11
 8002ed2:	1d23      	adds	r3, r4, #4
 8002ed4:	f020 0007 	bic.w	r0, r0, #7
 8002ed8:	1ac3      	subs	r3, r0, r3
 8002eda:	d01b      	beq.n	8002f14 <_malloc_r+0xb0>
 8002edc:	425a      	negs	r2, r3
 8002ede:	50e2      	str	r2, [r4, r3]
 8002ee0:	bd70      	pop	{r4, r5, r6, pc}
 8002ee2:	428c      	cmp	r4, r1
 8002ee4:	bf0b      	itete	eq
 8002ee6:	6863      	ldreq	r3, [r4, #4]
 8002ee8:	684b      	ldrne	r3, [r1, #4]
 8002eea:	6013      	streq	r3, [r2, #0]
 8002eec:	6063      	strne	r3, [r4, #4]
 8002eee:	bf18      	it	ne
 8002ef0:	460c      	movne	r4, r1
 8002ef2:	e7e9      	b.n	8002ec8 <_malloc_r+0x64>
 8002ef4:	460c      	mov	r4, r1
 8002ef6:	6849      	ldr	r1, [r1, #4]
 8002ef8:	e7ca      	b.n	8002e90 <_malloc_r+0x2c>
 8002efa:	1cc4      	adds	r4, r0, #3
 8002efc:	f024 0403 	bic.w	r4, r4, #3
 8002f00:	42a0      	cmp	r0, r4
 8002f02:	d005      	beq.n	8002f10 <_malloc_r+0xac>
 8002f04:	1a21      	subs	r1, r4, r0
 8002f06:	4630      	mov	r0, r6
 8002f08:	f000 f80a 	bl	8002f20 <_sbrk_r>
 8002f0c:	3001      	adds	r0, #1
 8002f0e:	d0cd      	beq.n	8002eac <_malloc_r+0x48>
 8002f10:	6025      	str	r5, [r4, #0]
 8002f12:	e7d9      	b.n	8002ec8 <_malloc_r+0x64>
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
 8002f16:	bf00      	nop
 8002f18:	20000090 	.word	0x20000090
 8002f1c:	20000094 	.word	0x20000094

08002f20 <_sbrk_r>:
 8002f20:	b538      	push	{r3, r4, r5, lr}
 8002f22:	2300      	movs	r3, #0
 8002f24:	4c05      	ldr	r4, [pc, #20]	; (8002f3c <_sbrk_r+0x1c>)
 8002f26:	4605      	mov	r5, r0
 8002f28:	4608      	mov	r0, r1
 8002f2a:	6023      	str	r3, [r4, #0]
 8002f2c:	f000 f9e6 	bl	80032fc <_sbrk>
 8002f30:	1c43      	adds	r3, r0, #1
 8002f32:	d102      	bne.n	8002f3a <_sbrk_r+0x1a>
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	b103      	cbz	r3, 8002f3a <_sbrk_r+0x1a>
 8002f38:	602b      	str	r3, [r5, #0]
 8002f3a:	bd38      	pop	{r3, r4, r5, pc}
 8002f3c:	200001c0 	.word	0x200001c0

08002f40 <__sread>:
 8002f40:	b510      	push	{r4, lr}
 8002f42:	460c      	mov	r4, r1
 8002f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f48:	f000 f896 	bl	8003078 <_read_r>
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	bfab      	itete	ge
 8002f50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f52:	89a3      	ldrhlt	r3, [r4, #12]
 8002f54:	181b      	addge	r3, r3, r0
 8002f56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f5a:	bfac      	ite	ge
 8002f5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f5e:	81a3      	strhlt	r3, [r4, #12]
 8002f60:	bd10      	pop	{r4, pc}

08002f62 <__swrite>:
 8002f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f66:	461f      	mov	r7, r3
 8002f68:	898b      	ldrh	r3, [r1, #12]
 8002f6a:	4605      	mov	r5, r0
 8002f6c:	05db      	lsls	r3, r3, #23
 8002f6e:	460c      	mov	r4, r1
 8002f70:	4616      	mov	r6, r2
 8002f72:	d505      	bpl.n	8002f80 <__swrite+0x1e>
 8002f74:	2302      	movs	r3, #2
 8002f76:	2200      	movs	r2, #0
 8002f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f7c:	f000 f868 	bl	8003050 <_lseek_r>
 8002f80:	89a3      	ldrh	r3, [r4, #12]
 8002f82:	4632      	mov	r2, r6
 8002f84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f88:	81a3      	strh	r3, [r4, #12]
 8002f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f8e:	463b      	mov	r3, r7
 8002f90:	4628      	mov	r0, r5
 8002f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f96:	f000 b817 	b.w	8002fc8 <_write_r>

08002f9a <__sseek>:
 8002f9a:	b510      	push	{r4, lr}
 8002f9c:	460c      	mov	r4, r1
 8002f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fa2:	f000 f855 	bl	8003050 <_lseek_r>
 8002fa6:	1c43      	adds	r3, r0, #1
 8002fa8:	89a3      	ldrh	r3, [r4, #12]
 8002faa:	bf15      	itete	ne
 8002fac:	6560      	strne	r0, [r4, #84]	; 0x54
 8002fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002fb6:	81a3      	strheq	r3, [r4, #12]
 8002fb8:	bf18      	it	ne
 8002fba:	81a3      	strhne	r3, [r4, #12]
 8002fbc:	bd10      	pop	{r4, pc}

08002fbe <__sclose>:
 8002fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fc2:	f000 b813 	b.w	8002fec <_close_r>
	...

08002fc8 <_write_r>:
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	4605      	mov	r5, r0
 8002fcc:	4608      	mov	r0, r1
 8002fce:	4611      	mov	r1, r2
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4c05      	ldr	r4, [pc, #20]	; (8002fe8 <_write_r+0x20>)
 8002fd4:	6022      	str	r2, [r4, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f000 f99e 	bl	8003318 <_write>
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	d102      	bne.n	8002fe6 <_write_r+0x1e>
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	b103      	cbz	r3, 8002fe6 <_write_r+0x1e>
 8002fe4:	602b      	str	r3, [r5, #0]
 8002fe6:	bd38      	pop	{r3, r4, r5, pc}
 8002fe8:	200001c0 	.word	0x200001c0

08002fec <_close_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	2300      	movs	r3, #0
 8002ff0:	4c05      	ldr	r4, [pc, #20]	; (8003008 <_close_r+0x1c>)
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	6023      	str	r3, [r4, #0]
 8002ff8:	f000 f958 	bl	80032ac <_close>
 8002ffc:	1c43      	adds	r3, r0, #1
 8002ffe:	d102      	bne.n	8003006 <_close_r+0x1a>
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	b103      	cbz	r3, 8003006 <_close_r+0x1a>
 8003004:	602b      	str	r3, [r5, #0]
 8003006:	bd38      	pop	{r3, r4, r5, pc}
 8003008:	200001c0 	.word	0x200001c0

0800300c <_fstat_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	2300      	movs	r3, #0
 8003010:	4c06      	ldr	r4, [pc, #24]	; (800302c <_fstat_r+0x20>)
 8003012:	4605      	mov	r5, r0
 8003014:	4608      	mov	r0, r1
 8003016:	4611      	mov	r1, r2
 8003018:	6023      	str	r3, [r4, #0]
 800301a:	f000 f94f 	bl	80032bc <_fstat>
 800301e:	1c43      	adds	r3, r0, #1
 8003020:	d102      	bne.n	8003028 <_fstat_r+0x1c>
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	b103      	cbz	r3, 8003028 <_fstat_r+0x1c>
 8003026:	602b      	str	r3, [r5, #0]
 8003028:	bd38      	pop	{r3, r4, r5, pc}
 800302a:	bf00      	nop
 800302c:	200001c0 	.word	0x200001c0

08003030 <_isatty_r>:
 8003030:	b538      	push	{r3, r4, r5, lr}
 8003032:	2300      	movs	r3, #0
 8003034:	4c05      	ldr	r4, [pc, #20]	; (800304c <_isatty_r+0x1c>)
 8003036:	4605      	mov	r5, r0
 8003038:	4608      	mov	r0, r1
 800303a:	6023      	str	r3, [r4, #0]
 800303c:	f000 f946 	bl	80032cc <_isatty>
 8003040:	1c43      	adds	r3, r0, #1
 8003042:	d102      	bne.n	800304a <_isatty_r+0x1a>
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	b103      	cbz	r3, 800304a <_isatty_r+0x1a>
 8003048:	602b      	str	r3, [r5, #0]
 800304a:	bd38      	pop	{r3, r4, r5, pc}
 800304c:	200001c0 	.word	0x200001c0

08003050 <_lseek_r>:
 8003050:	b538      	push	{r3, r4, r5, lr}
 8003052:	4605      	mov	r5, r0
 8003054:	4608      	mov	r0, r1
 8003056:	4611      	mov	r1, r2
 8003058:	2200      	movs	r2, #0
 800305a:	4c05      	ldr	r4, [pc, #20]	; (8003070 <_lseek_r+0x20>)
 800305c:	6022      	str	r2, [r4, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	f000 f93c 	bl	80032dc <_lseek>
 8003064:	1c43      	adds	r3, r0, #1
 8003066:	d102      	bne.n	800306e <_lseek_r+0x1e>
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	b103      	cbz	r3, 800306e <_lseek_r+0x1e>
 800306c:	602b      	str	r3, [r5, #0]
 800306e:	bd38      	pop	{r3, r4, r5, pc}
 8003070:	200001c0 	.word	0x200001c0

08003074 <__malloc_lock>:
 8003074:	4770      	bx	lr

08003076 <__malloc_unlock>:
 8003076:	4770      	bx	lr

08003078 <_read_r>:
 8003078:	b538      	push	{r3, r4, r5, lr}
 800307a:	4605      	mov	r5, r0
 800307c:	4608      	mov	r0, r1
 800307e:	4611      	mov	r1, r2
 8003080:	2200      	movs	r2, #0
 8003082:	4c05      	ldr	r4, [pc, #20]	; (8003098 <_read_r+0x20>)
 8003084:	6022      	str	r2, [r4, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	f000 f930 	bl	80032ec <_read>
 800308c:	1c43      	adds	r3, r0, #1
 800308e:	d102      	bne.n	8003096 <_read_r+0x1e>
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	b103      	cbz	r3, 8003096 <_read_r+0x1e>
 8003094:	602b      	str	r3, [r5, #0]
 8003096:	bd38      	pop	{r3, r4, r5, pc}
 8003098:	200001c0 	.word	0x200001c0

0800309c <sqrt>:
 800309c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a0:	b08b      	sub	sp, #44	; 0x2c
 80030a2:	4604      	mov	r4, r0
 80030a4:	460d      	mov	r5, r1
 80030a6:	f000 f84d 	bl	8003144 <__ieee754_sqrt>
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <sqrt+0xa0>)
 80030ac:	4680      	mov	r8, r0
 80030ae:	f993 a000 	ldrsb.w	sl, [r3]
 80030b2:	4689      	mov	r9, r1
 80030b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80030b8:	d02b      	beq.n	8003112 <sqrt+0x76>
 80030ba:	4622      	mov	r2, r4
 80030bc:	462b      	mov	r3, r5
 80030be:	4620      	mov	r0, r4
 80030c0:	4629      	mov	r1, r5
 80030c2:	f7fd fc95 	bl	80009f0 <__aeabi_dcmpun>
 80030c6:	4683      	mov	fp, r0
 80030c8:	bb18      	cbnz	r0, 8003112 <sqrt+0x76>
 80030ca:	2600      	movs	r6, #0
 80030cc:	2700      	movs	r7, #0
 80030ce:	4632      	mov	r2, r6
 80030d0:	463b      	mov	r3, r7
 80030d2:	4620      	mov	r0, r4
 80030d4:	4629      	mov	r1, r5
 80030d6:	f7fd fc63 	bl	80009a0 <__aeabi_dcmplt>
 80030da:	b1d0      	cbz	r0, 8003112 <sqrt+0x76>
 80030dc:	2301      	movs	r3, #1
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	4b17      	ldr	r3, [pc, #92]	; (8003140 <sqrt+0xa4>)
 80030e2:	f8cd b020 	str.w	fp, [sp, #32]
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80030ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80030f0:	f1ba 0f00 	cmp.w	sl, #0
 80030f4:	d112      	bne.n	800311c <sqrt+0x80>
 80030f6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80030fa:	4668      	mov	r0, sp
 80030fc:	f000 f8ce 	bl	800329c <matherr>
 8003100:	b1b8      	cbz	r0, 8003132 <sqrt+0x96>
 8003102:	9b08      	ldr	r3, [sp, #32]
 8003104:	b11b      	cbz	r3, 800310e <sqrt+0x72>
 8003106:	f000 f8cb 	bl	80032a0 <__errno>
 800310a:	9b08      	ldr	r3, [sp, #32]
 800310c:	6003      	str	r3, [r0, #0]
 800310e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003112:	4640      	mov	r0, r8
 8003114:	4649      	mov	r1, r9
 8003116:	b00b      	add	sp, #44	; 0x2c
 8003118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800311c:	4632      	mov	r2, r6
 800311e:	463b      	mov	r3, r7
 8003120:	4630      	mov	r0, r6
 8003122:	4639      	mov	r1, r7
 8003124:	f7fd faf4 	bl	8000710 <__aeabi_ddiv>
 8003128:	f1ba 0f02 	cmp.w	sl, #2
 800312c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003130:	d1e3      	bne.n	80030fa <sqrt+0x5e>
 8003132:	f000 f8b5 	bl	80032a0 <__errno>
 8003136:	2321      	movs	r3, #33	; 0x21
 8003138:	6003      	str	r3, [r0, #0]
 800313a:	e7e2      	b.n	8003102 <sqrt+0x66>
 800313c:	20000070 	.word	0x20000070
 8003140:	080033e4 	.word	0x080033e4

08003144 <__ieee754_sqrt>:
 8003144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003148:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8003298 <__ieee754_sqrt+0x154>
 800314c:	4606      	mov	r6, r0
 800314e:	ea3e 0e01 	bics.w	lr, lr, r1
 8003152:	460d      	mov	r5, r1
 8003154:	4607      	mov	r7, r0
 8003156:	460a      	mov	r2, r1
 8003158:	460c      	mov	r4, r1
 800315a:	4603      	mov	r3, r0
 800315c:	d10f      	bne.n	800317e <__ieee754_sqrt+0x3a>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	f7fd f9ab 	bl	80004bc <__aeabi_dmul>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4630      	mov	r0, r6
 800316c:	4629      	mov	r1, r5
 800316e:	f7fc fff3 	bl	8000158 <__adddf3>
 8003172:	4606      	mov	r6, r0
 8003174:	460d      	mov	r5, r1
 8003176:	4630      	mov	r0, r6
 8003178:	4629      	mov	r1, r5
 800317a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800317e:	2900      	cmp	r1, #0
 8003180:	dc0e      	bgt.n	80031a0 <__ieee754_sqrt+0x5c>
 8003182:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8003186:	ea5e 0707 	orrs.w	r7, lr, r7
 800318a:	d0f4      	beq.n	8003176 <__ieee754_sqrt+0x32>
 800318c:	b141      	cbz	r1, 80031a0 <__ieee754_sqrt+0x5c>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	f7fc ffdf 	bl	8000154 <__aeabi_dsub>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	f7fd fab9 	bl	8000710 <__aeabi_ddiv>
 800319e:	e7e8      	b.n	8003172 <__ieee754_sqrt+0x2e>
 80031a0:	1512      	asrs	r2, r2, #20
 80031a2:	d10c      	bne.n	80031be <__ieee754_sqrt+0x7a>
 80031a4:	2c00      	cmp	r4, #0
 80031a6:	d06e      	beq.n	8003286 <__ieee754_sqrt+0x142>
 80031a8:	2100      	movs	r1, #0
 80031aa:	02e6      	lsls	r6, r4, #11
 80031ac:	d56f      	bpl.n	800328e <__ieee754_sqrt+0x14a>
 80031ae:	1e48      	subs	r0, r1, #1
 80031b0:	1a12      	subs	r2, r2, r0
 80031b2:	f1c1 0020 	rsb	r0, r1, #32
 80031b6:	fa23 f000 	lsr.w	r0, r3, r0
 80031ba:	4304      	orrs	r4, r0
 80031bc:	408b      	lsls	r3, r1
 80031be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80031c2:	07d5      	lsls	r5, r2, #31
 80031c4:	f04f 0500 	mov.w	r5, #0
 80031c8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80031cc:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80031d0:	bf42      	ittt	mi
 80031d2:	0064      	lslmi	r4, r4, #1
 80031d4:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 80031d8:	005b      	lslmi	r3, r3, #1
 80031da:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 80031de:	1050      	asrs	r0, r2, #1
 80031e0:	4421      	add	r1, r4
 80031e2:	2216      	movs	r2, #22
 80031e4:	462c      	mov	r4, r5
 80031e6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	19a7      	adds	r7, r4, r6
 80031ee:	428f      	cmp	r7, r1
 80031f0:	bfde      	ittt	le
 80031f2:	1bc9      	suble	r1, r1, r7
 80031f4:	19bc      	addle	r4, r7, r6
 80031f6:	19ad      	addle	r5, r5, r6
 80031f8:	0049      	lsls	r1, r1, #1
 80031fa:	3a01      	subs	r2, #1
 80031fc:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8003200:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003204:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003208:	d1f0      	bne.n	80031ec <__ieee754_sqrt+0xa8>
 800320a:	f04f 0e20 	mov.w	lr, #32
 800320e:	4694      	mov	ip, r2
 8003210:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003214:	42a1      	cmp	r1, r4
 8003216:	eb06 070c 	add.w	r7, r6, ip
 800321a:	dc02      	bgt.n	8003222 <__ieee754_sqrt+0xde>
 800321c:	d112      	bne.n	8003244 <__ieee754_sqrt+0x100>
 800321e:	429f      	cmp	r7, r3
 8003220:	d810      	bhi.n	8003244 <__ieee754_sqrt+0x100>
 8003222:	2f00      	cmp	r7, #0
 8003224:	eb07 0c06 	add.w	ip, r7, r6
 8003228:	da34      	bge.n	8003294 <__ieee754_sqrt+0x150>
 800322a:	f1bc 0f00 	cmp.w	ip, #0
 800322e:	db31      	blt.n	8003294 <__ieee754_sqrt+0x150>
 8003230:	f104 0801 	add.w	r8, r4, #1
 8003234:	1b09      	subs	r1, r1, r4
 8003236:	4644      	mov	r4, r8
 8003238:	429f      	cmp	r7, r3
 800323a:	bf88      	it	hi
 800323c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8003240:	1bdb      	subs	r3, r3, r7
 8003242:	4432      	add	r2, r6
 8003244:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8003248:	f1be 0e01 	subs.w	lr, lr, #1
 800324c:	4439      	add	r1, r7
 800324e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003252:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003256:	d1dd      	bne.n	8003214 <__ieee754_sqrt+0xd0>
 8003258:	430b      	orrs	r3, r1
 800325a:	d006      	beq.n	800326a <__ieee754_sqrt+0x126>
 800325c:	1c54      	adds	r4, r2, #1
 800325e:	bf0b      	itete	eq
 8003260:	4672      	moveq	r2, lr
 8003262:	3201      	addne	r2, #1
 8003264:	3501      	addeq	r5, #1
 8003266:	f022 0201 	bicne.w	r2, r2, #1
 800326a:	106b      	asrs	r3, r5, #1
 800326c:	0852      	lsrs	r2, r2, #1
 800326e:	07e9      	lsls	r1, r5, #31
 8003270:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003274:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003278:	bf48      	it	mi
 800327a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800327e:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8003282:	4616      	mov	r6, r2
 8003284:	e777      	b.n	8003176 <__ieee754_sqrt+0x32>
 8003286:	0adc      	lsrs	r4, r3, #11
 8003288:	3a15      	subs	r2, #21
 800328a:	055b      	lsls	r3, r3, #21
 800328c:	e78a      	b.n	80031a4 <__ieee754_sqrt+0x60>
 800328e:	0064      	lsls	r4, r4, #1
 8003290:	3101      	adds	r1, #1
 8003292:	e78a      	b.n	80031aa <__ieee754_sqrt+0x66>
 8003294:	46a0      	mov	r8, r4
 8003296:	e7cd      	b.n	8003234 <__ieee754_sqrt+0xf0>
 8003298:	7ff00000 	.word	0x7ff00000

0800329c <matherr>:
 800329c:	2000      	movs	r0, #0
 800329e:	4770      	bx	lr

080032a0 <__errno>:
 80032a0:	4b01      	ldr	r3, [pc, #4]	; (80032a8 <__errno+0x8>)
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	2000000c 	.word	0x2000000c

080032ac <_close>:
 80032ac:	2258      	movs	r2, #88	; 0x58
 80032ae:	4b02      	ldr	r3, [pc, #8]	; (80032b8 <_close+0xc>)
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	4770      	bx	lr
 80032b8:	200001c0 	.word	0x200001c0

080032bc <_fstat>:
 80032bc:	2258      	movs	r2, #88	; 0x58
 80032be:	4b02      	ldr	r3, [pc, #8]	; (80032c8 <_fstat+0xc>)
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	4770      	bx	lr
 80032c8:	200001c0 	.word	0x200001c0

080032cc <_isatty>:
 80032cc:	2258      	movs	r2, #88	; 0x58
 80032ce:	4b02      	ldr	r3, [pc, #8]	; (80032d8 <_isatty+0xc>)
 80032d0:	2000      	movs	r0, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	200001c0 	.word	0x200001c0

080032dc <_lseek>:
 80032dc:	2258      	movs	r2, #88	; 0x58
 80032de:	4b02      	ldr	r3, [pc, #8]	; (80032e8 <_lseek+0xc>)
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	4770      	bx	lr
 80032e8:	200001c0 	.word	0x200001c0

080032ec <_read>:
 80032ec:	2258      	movs	r2, #88	; 0x58
 80032ee:	4b02      	ldr	r3, [pc, #8]	; (80032f8 <_read+0xc>)
 80032f0:	f04f 30ff 	mov.w	r0, #4294967295
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	4770      	bx	lr
 80032f8:	200001c0 	.word	0x200001c0

080032fc <_sbrk>:
 80032fc:	4b04      	ldr	r3, [pc, #16]	; (8003310 <_sbrk+0x14>)
 80032fe:	4602      	mov	r2, r0
 8003300:	6819      	ldr	r1, [r3, #0]
 8003302:	b909      	cbnz	r1, 8003308 <_sbrk+0xc>
 8003304:	4903      	ldr	r1, [pc, #12]	; (8003314 <_sbrk+0x18>)
 8003306:	6019      	str	r1, [r3, #0]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	4402      	add	r2, r0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	4770      	bx	lr
 8003310:	20000098 	.word	0x20000098
 8003314:	200001c4 	.word	0x200001c4

08003318 <_write>:
 8003318:	2258      	movs	r2, #88	; 0x58
 800331a:	4b02      	ldr	r3, [pc, #8]	; (8003324 <_write+0xc>)
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	4770      	bx	lr
 8003324:	200001c0 	.word	0x200001c0

08003328 <_init>:
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332a:	bf00      	nop
 800332c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332e:	bc08      	pop	{r3}
 8003330:	469e      	mov	lr, r3
 8003332:	4770      	bx	lr

08003334 <_fini>:
 8003334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003336:	bf00      	nop
 8003338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333a:	bc08      	pop	{r3}
 800333c:	469e      	mov	lr, r3
 800333e:	4770      	bx	lr
