
BluePillSensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003db8  08003db8  00013db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08003e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000016d4  20000074  08003eac  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001748  08003eac  00021748  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013830  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000029dd  00000000  00000000  000338cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000738  00000000  00000000  000362b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ba0  00000000  00000000  000369e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005b28  00000000  00000000  00037588  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002b25  00000000  00000000  0003d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003fbd5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000193c  00000000  00000000  0003fc54  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00005556  00000000  00000000  00041590  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08003da0 	.word	0x08003da0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08003da0 	.word	0x08003da0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpun>:
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__aeabi_dcmpun+0x10>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d10a      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x20>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d102      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	f04f 0001 	mov.w	r0, #1
 8000a1e:	4770      	bx	lr

08000a20 <__aeabi_d2f>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a28:	bf24      	itt	cs
 8000a2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a32:	d90d      	bls.n	8000a50 <__aeabi_d2f+0x30>
 8000a34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a48:	bf08      	it	eq
 8000a4a:	f020 0001 	biceq.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a54:	d121      	bne.n	8000a9a <__aeabi_d2f+0x7a>
 8000a56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a5a:	bfbc      	itt	lt
 8000a5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	4770      	bxlt	lr
 8000a62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a6a:	f1c2 0218 	rsb	r2, r2, #24
 8000a6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a76:	fa20 f002 	lsr.w	r0, r0, r2
 8000a7a:	bf18      	it	ne
 8000a7c:	f040 0001 	orrne.w	r0, r0, #1
 8000a80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a8c:	ea40 000c 	orr.w	r0, r0, ip
 8000a90:	fa23 f302 	lsr.w	r3, r3, r2
 8000a94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a98:	e7cc      	b.n	8000a34 <__aeabi_d2f+0x14>
 8000a9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9e:	d107      	bne.n	8000ab0 <__aeabi_d2f+0x90>
 8000aa0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa4:	bf1e      	ittt	ne
 8000aa6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aaa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aae:	4770      	bxne	lr
 8000ab0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_frsub>:
 8000ac0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac4:	e002      	b.n	8000acc <__addsf3>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_fsub>:
 8000ac8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000acc <__addsf3>:
 8000acc:	0042      	lsls	r2, r0, #1
 8000ace:	bf1f      	itttt	ne
 8000ad0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad4:	ea92 0f03 	teqne	r2, r3
 8000ad8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000adc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae0:	d06a      	beq.n	8000bb8 <__addsf3+0xec>
 8000ae2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ae6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aea:	bfc1      	itttt	gt
 8000aec:	18d2      	addgt	r2, r2, r3
 8000aee:	4041      	eorgt	r1, r0
 8000af0:	4048      	eorgt	r0, r1
 8000af2:	4041      	eorgt	r1, r0
 8000af4:	bfb8      	it	lt
 8000af6:	425b      	neglt	r3, r3
 8000af8:	2b19      	cmp	r3, #25
 8000afa:	bf88      	it	hi
 8000afc:	4770      	bxhi	lr
 8000afe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b12:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b1a:	bf18      	it	ne
 8000b1c:	4249      	negne	r1, r1
 8000b1e:	ea92 0f03 	teq	r2, r3
 8000b22:	d03f      	beq.n	8000ba4 <__addsf3+0xd8>
 8000b24:	f1a2 0201 	sub.w	r2, r2, #1
 8000b28:	fa41 fc03 	asr.w	ip, r1, r3
 8000b2c:	eb10 000c 	adds.w	r0, r0, ip
 8000b30:	f1c3 0320 	rsb	r3, r3, #32
 8000b34:	fa01 f103 	lsl.w	r1, r1, r3
 8000b38:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b3c:	d502      	bpl.n	8000b44 <__addsf3+0x78>
 8000b3e:	4249      	negs	r1, r1
 8000b40:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b48:	d313      	bcc.n	8000b72 <__addsf3+0xa6>
 8000b4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b4e:	d306      	bcc.n	8000b5e <__addsf3+0x92>
 8000b50:	0840      	lsrs	r0, r0, #1
 8000b52:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b56:	f102 0201 	add.w	r2, r2, #1
 8000b5a:	2afe      	cmp	r2, #254	; 0xfe
 8000b5c:	d251      	bcs.n	8000c02 <__addsf3+0x136>
 8000b5e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b66:	bf08      	it	eq
 8000b68:	f020 0001 	biceq.w	r0, r0, #1
 8000b6c:	ea40 0003 	orr.w	r0, r0, r3
 8000b70:	4770      	bx	lr
 8000b72:	0049      	lsls	r1, r1, #1
 8000b74:	eb40 0000 	adc.w	r0, r0, r0
 8000b78:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	d1ed      	bne.n	8000b5e <__addsf3+0x92>
 8000b82:	fab0 fc80 	clz	ip, r0
 8000b86:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b8a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b8e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b92:	bfaa      	itet	ge
 8000b94:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b98:	4252      	neglt	r2, r2
 8000b9a:	4318      	orrge	r0, r3
 8000b9c:	bfbc      	itt	lt
 8000b9e:	40d0      	lsrlt	r0, r2
 8000ba0:	4318      	orrlt	r0, r3
 8000ba2:	4770      	bx	lr
 8000ba4:	f092 0f00 	teq	r2, #0
 8000ba8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bac:	bf06      	itte	eq
 8000bae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bb2:	3201      	addeq	r2, #1
 8000bb4:	3b01      	subne	r3, #1
 8000bb6:	e7b5      	b.n	8000b24 <__addsf3+0x58>
 8000bb8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bbc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc0:	bf18      	it	ne
 8000bc2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc6:	d021      	beq.n	8000c0c <__addsf3+0x140>
 8000bc8:	ea92 0f03 	teq	r2, r3
 8000bcc:	d004      	beq.n	8000bd8 <__addsf3+0x10c>
 8000bce:	f092 0f00 	teq	r2, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	4608      	moveq	r0, r1
 8000bd6:	4770      	bx	lr
 8000bd8:	ea90 0f01 	teq	r0, r1
 8000bdc:	bf1c      	itt	ne
 8000bde:	2000      	movne	r0, #0
 8000be0:	4770      	bxne	lr
 8000be2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000be6:	d104      	bne.n	8000bf2 <__addsf3+0x126>
 8000be8:	0040      	lsls	r0, r0, #1
 8000bea:	bf28      	it	cs
 8000bec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf0:	4770      	bx	lr
 8000bf2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bf6:	bf3c      	itt	cc
 8000bf8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bxcc	lr
 8000bfe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c02:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	4770      	bx	lr
 8000c0c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c10:	bf16      	itet	ne
 8000c12:	4608      	movne	r0, r1
 8000c14:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c18:	4601      	movne	r1, r0
 8000c1a:	0242      	lsls	r2, r0, #9
 8000c1c:	bf06      	itte	eq
 8000c1e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c22:	ea90 0f01 	teqeq	r0, r1
 8000c26:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_ui2f>:
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e004      	b.n	8000c3c <__aeabi_i2f+0x8>
 8000c32:	bf00      	nop

08000c34 <__aeabi_i2f>:
 8000c34:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c38:	bf48      	it	mi
 8000c3a:	4240      	negmi	r0, r0
 8000c3c:	ea5f 0c00 	movs.w	ip, r0
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c48:	4601      	mov	r1, r0
 8000c4a:	f04f 0000 	mov.w	r0, #0
 8000c4e:	e01c      	b.n	8000c8a <__aeabi_l2f+0x2a>

08000c50 <__aeabi_ul2f>:
 8000c50:	ea50 0201 	orrs.w	r2, r0, r1
 8000c54:	bf08      	it	eq
 8000c56:	4770      	bxeq	lr
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e00a      	b.n	8000c74 <__aeabi_l2f+0x14>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_l2f>:
 8000c60:	ea50 0201 	orrs.w	r2, r0, r1
 8000c64:	bf08      	it	eq
 8000c66:	4770      	bxeq	lr
 8000c68:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__aeabi_l2f+0x14>
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	ea5f 0c01 	movs.w	ip, r1
 8000c78:	bf02      	ittt	eq
 8000c7a:	4684      	moveq	ip, r0
 8000c7c:	4601      	moveq	r1, r0
 8000c7e:	2000      	moveq	r0, #0
 8000c80:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c84:	bf08      	it	eq
 8000c86:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c8e:	fabc f28c 	clz	r2, ip
 8000c92:	3a08      	subs	r2, #8
 8000c94:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c98:	db10      	blt.n	8000cbc <__aeabi_l2f+0x5c>
 8000c9a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca4:	f1c2 0220 	rsb	r2, r2, #32
 8000ca8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cac:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb0:	eb43 0002 	adc.w	r0, r3, r2
 8000cb4:	bf08      	it	eq
 8000cb6:	f020 0001 	biceq.w	r0, r0, #1
 8000cba:	4770      	bx	lr
 8000cbc:	f102 0220 	add.w	r2, r2, #32
 8000cc0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc4:	f1c2 0220 	rsb	r2, r2, #32
 8000cc8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ccc:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd0:	eb43 0002 	adc.w	r0, r3, r2
 8000cd4:	bf08      	it	eq
 8000cd6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cda:	4770      	bx	lr

08000cdc <__aeabi_fmul>:
 8000cdc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce4:	bf1e      	ittt	ne
 8000ce6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cea:	ea92 0f0c 	teqne	r2, ip
 8000cee:	ea93 0f0c 	teqne	r3, ip
 8000cf2:	d06f      	beq.n	8000dd4 <__aeabi_fmul+0xf8>
 8000cf4:	441a      	add	r2, r3
 8000cf6:	ea80 0c01 	eor.w	ip, r0, r1
 8000cfa:	0240      	lsls	r0, r0, #9
 8000cfc:	bf18      	it	ne
 8000cfe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d02:	d01e      	beq.n	8000d42 <__aeabi_fmul+0x66>
 8000d04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d08:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d0c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d10:	fba0 3101 	umull	r3, r1, r0, r1
 8000d14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d18:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d1c:	bf3e      	ittt	cc
 8000d1e:	0049      	lslcc	r1, r1, #1
 8000d20:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d24:	005b      	lslcc	r3, r3, #1
 8000d26:	ea40 0001 	orr.w	r0, r0, r1
 8000d2a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d2e:	2afd      	cmp	r2, #253	; 0xfd
 8000d30:	d81d      	bhi.n	8000d6e <__aeabi_fmul+0x92>
 8000d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3a:	bf08      	it	eq
 8000d3c:	f020 0001 	biceq.w	r0, r0, #1
 8000d40:	4770      	bx	lr
 8000d42:	f090 0f00 	teq	r0, #0
 8000d46:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4a:	bf08      	it	eq
 8000d4c:	0249      	lsleq	r1, r1, #9
 8000d4e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d52:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d56:	3a7f      	subs	r2, #127	; 0x7f
 8000d58:	bfc2      	ittt	gt
 8000d5a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d5e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d62:	4770      	bxgt	lr
 8000d64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	3a01      	subs	r2, #1
 8000d6e:	dc5d      	bgt.n	8000e2c <__aeabi_fmul+0x150>
 8000d70:	f112 0f19 	cmn.w	r2, #25
 8000d74:	bfdc      	itt	le
 8000d76:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d7a:	4770      	bxle	lr
 8000d7c:	f1c2 0200 	rsb	r2, r2, #0
 8000d80:	0041      	lsls	r1, r0, #1
 8000d82:	fa21 f102 	lsr.w	r1, r1, r2
 8000d86:	f1c2 0220 	rsb	r2, r2, #32
 8000d8a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d92:	f140 0000 	adc.w	r0, r0, #0
 8000d96:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d9a:	bf08      	it	eq
 8000d9c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da0:	4770      	bx	lr
 8000da2:	f092 0f00 	teq	r2, #0
 8000da6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0040      	lsleq	r0, r0, #1
 8000dae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000db2:	3a01      	subeq	r2, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fmul+0xce>
 8000db6:	ea40 000c 	orr.w	r0, r0, ip
 8000dba:	f093 0f00 	teq	r3, #0
 8000dbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0049      	lsleq	r1, r1, #1
 8000dc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dca:	3b01      	subeq	r3, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xe6>
 8000dce:	ea41 010c 	orr.w	r1, r1, ip
 8000dd2:	e78f      	b.n	8000cf4 <__aeabi_fmul+0x18>
 8000dd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	bf18      	it	ne
 8000dde:	ea93 0f0c 	teqne	r3, ip
 8000de2:	d00a      	beq.n	8000dfa <__aeabi_fmul+0x11e>
 8000de4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de8:	bf18      	it	ne
 8000dea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	d1d8      	bne.n	8000da2 <__aeabi_fmul+0xc6>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f090 0f00 	teq	r0, #0
 8000dfe:	bf17      	itett	ne
 8000e00:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e04:	4608      	moveq	r0, r1
 8000e06:	f091 0f00 	teqne	r1, #0
 8000e0a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e0e:	d014      	beq.n	8000e3a <__aeabi_fmul+0x15e>
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d101      	bne.n	8000e1a <__aeabi_fmul+0x13e>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	d10f      	bne.n	8000e3a <__aeabi_fmul+0x15e>
 8000e1a:	ea93 0f0c 	teq	r3, ip
 8000e1e:	d103      	bne.n	8000e28 <__aeabi_fmul+0x14c>
 8000e20:	024b      	lsls	r3, r1, #9
 8000e22:	bf18      	it	ne
 8000e24:	4608      	movne	r0, r1
 8000e26:	d108      	bne.n	8000e3a <__aeabi_fmul+0x15e>
 8000e28:	ea80 0001 	eor.w	r0, r0, r1
 8000e2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e38:	4770      	bx	lr
 8000e3a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_fdiv>:
 8000e44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e4c:	bf1e      	ittt	ne
 8000e4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e52:	ea92 0f0c 	teqne	r2, ip
 8000e56:	ea93 0f0c 	teqne	r3, ip
 8000e5a:	d069      	beq.n	8000f30 <__aeabi_fdiv+0xec>
 8000e5c:	eba2 0203 	sub.w	r2, r2, r3
 8000e60:	ea80 0c01 	eor.w	ip, r0, r1
 8000e64:	0249      	lsls	r1, r1, #9
 8000e66:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e6a:	d037      	beq.n	8000edc <__aeabi_fdiv+0x98>
 8000e6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e70:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e74:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	bf38      	it	cc
 8000e80:	005b      	lslcc	r3, r3, #1
 8000e82:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e86:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	bf24      	itt	cs
 8000e8e:	1a5b      	subcs	r3, r3, r1
 8000e90:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e94:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e98:	bf24      	itt	cs
 8000e9a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e9e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ea2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ea6:	bf24      	itt	cs
 8000ea8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	bf18      	it	ne
 8000ec2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ec6:	d1e0      	bne.n	8000e8a <__aeabi_fdiv+0x46>
 8000ec8:	2afd      	cmp	r2, #253	; 0xfd
 8000eca:	f63f af50 	bhi.w	8000d6e <__aeabi_fmul+0x92>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed4:	bf08      	it	eq
 8000ed6:	f020 0001 	biceq.w	r0, r0, #1
 8000eda:	4770      	bx	lr
 8000edc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee4:	327f      	adds	r2, #127	; 0x7f
 8000ee6:	bfc2      	ittt	gt
 8000ee8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef0:	4770      	bxgt	lr
 8000ef2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	3a01      	subs	r2, #1
 8000efc:	e737      	b.n	8000d6e <__aeabi_fmul+0x92>
 8000efe:	f092 0f00 	teq	r2, #0
 8000f02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0040      	lsleq	r0, r0, #1
 8000f0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f0e:	3a01      	subeq	r2, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fdiv+0xc2>
 8000f12:	ea40 000c 	orr.w	r0, r0, ip
 8000f16:	f093 0f00 	teq	r3, #0
 8000f1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0049      	lsleq	r1, r1, #1
 8000f22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f26:	3b01      	subeq	r3, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xda>
 8000f2a:	ea41 010c 	orr.w	r1, r1, ip
 8000f2e:	e795      	b.n	8000e5c <__aeabi_fdiv+0x18>
 8000f30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f34:	ea92 0f0c 	teq	r2, ip
 8000f38:	d108      	bne.n	8000f4c <__aeabi_fdiv+0x108>
 8000f3a:	0242      	lsls	r2, r0, #9
 8000f3c:	f47f af7d 	bne.w	8000e3a <__aeabi_fmul+0x15e>
 8000f40:	ea93 0f0c 	teq	r3, ip
 8000f44:	f47f af70 	bne.w	8000e28 <__aeabi_fmul+0x14c>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e776      	b.n	8000e3a <__aeabi_fmul+0x15e>
 8000f4c:	ea93 0f0c 	teq	r3, ip
 8000f50:	d104      	bne.n	8000f5c <__aeabi_fdiv+0x118>
 8000f52:	024b      	lsls	r3, r1, #9
 8000f54:	f43f af4c 	beq.w	8000df0 <__aeabi_fmul+0x114>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e76e      	b.n	8000e3a <__aeabi_fmul+0x15e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	d1ca      	bne.n	8000efe <__aeabi_fdiv+0xba>
 8000f68:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f6c:	f47f af5c 	bne.w	8000e28 <__aeabi_fmul+0x14c>
 8000f70:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f74:	f47f af3c 	bne.w	8000df0 <__aeabi_fmul+0x114>
 8000f78:	e75f      	b.n	8000e3a <__aeabi_fmul+0x15e>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_f2iz>:
 8000f7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f84:	d30f      	bcc.n	8000fa6 <__aeabi_f2iz+0x2a>
 8000f86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f8e:	d90d      	bls.n	8000fac <__aeabi_f2iz+0x30>
 8000f90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f98:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa0:	bf18      	it	ne
 8000fa2:	4240      	negne	r0, r0
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2iz+0x3a>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d105      	bne.n	8000fc2 <__aeabi_f2iz+0x46>
 8000fb6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fba:	bf08      	it	eq
 8000fbc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr

08000fc8 <config>:
uint8_t bufferread1[2];
uint8_t bufferread2[2];
uint8_t config_regadd;
uint8_t config_data;

void config(void) {
 8000fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* SetUp measurement mode -------------------------------------------*/
	bufferread1[0] = 0;
 8000fcc:	2700      	movs	r7, #0
 8000fce:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80010c8 <config+0x100>
	bufferread1[1] = 0;
	bufferread2[0] = 0;
 8000fd2:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 80010cc <config+0x104>
	bufferread2[1] = 0;
	HAL_Delay(15);
 8000fd6:	200f      	movs	r0, #15
	bufferconf[0] = 0x11; // Select mode register
	bufferconf[1] = 0x80; //Continuous measurement mode
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 8000fd8:	2564      	movs	r5, #100	; 0x64
	bufferread1[0] = 0;
 8000fda:	f889 7000 	strb.w	r7, [r9]
	bufferread1[1] = 0;
 8000fde:	f889 7001 	strb.w	r7, [r9, #1]
	bufferread2[0] = 0;
 8000fe2:	f88b 7000 	strb.w	r7, [fp]
	bufferread2[1] = 0;
 8000fe6:	f88b 7001 	strb.w	r7, [fp, #1]
	HAL_Delay(15);
 8000fea:	f000 fd8d 	bl	8001b08 <HAL_Delay>
	bufferconf[0] = 0x11; // Select mode register
 8000fee:	f04f 0311 	mov.w	r3, #17
	bufferconf[1] = 0x80; //Continuous measurement mode
 8000ff2:	f04f 0a80 	mov.w	sl, #128	; 0x80
	bufferconf[0] = 0x11; // Select mode register
 8000ff6:	4c33      	ldr	r4, [pc, #204]	; (80010c4 <config+0xfc>)
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 8000ff8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80010d0 <config+0x108>
 8000ffc:	4622      	mov	r2, r4
	bufferconf[0] = 0x11; // Select mode register
 8000ffe:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 8001000:	211c      	movs	r1, #28
 8001002:	2302      	movs	r3, #2
 8001004:	9500      	str	r5, [sp, #0]
 8001006:	4640      	mov	r0, r8
	bufferconf[1] = 0x80; //Continuous measurement mode
 8001008:	f884 a001 	strb.w	sl, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 800100c:	f001 f84c 	bl	80020a8 <HAL_I2C_Master_Transmit>
    HAL_Delay(15);
 8001010:	200f      	movs	r0, #15
 8001012:	f000 fd79 	bl	8001b08 <HAL_Delay>

    bufferconf[0] = 0x10; // Select mode register
 8001016:	f04f 0310 	mov.w	r3, #16
	bufferconf[1] = 0x1; //Continuous measurement mode
 800101a:	2601      	movs	r6, #1
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 800101c:	4622      	mov	r2, r4
    bufferconf[0] = 0x10; // Select mode register
 800101e:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 8001020:	211c      	movs	r1, #28
 8001022:	2302      	movs	r3, #2
 8001024:	9500      	str	r5, [sp, #0]
 8001026:	4640      	mov	r0, r8
	bufferconf[1] = 0x1; //Continuous measurement mode
 8001028:	7066      	strb	r6, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 2, 100);
 800102a:	f001 f83d 	bl	80020a8 <HAL_I2C_Master_Transmit>
    HAL_Delay(15);
 800102e:	200f      	movs	r0, #15
 8001030:	f000 fd6a 	bl	8001b08 <HAL_Delay>

    bufferconf[0] = 0x11; // Select mode register
 8001034:	f04f 0311 	mov.w	r3, #17
	bufferconf[1] = 0x80; //Continuous measurement mode
 8001038:	f884 a001 	strb.w	sl, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 800103c:	f8df a094 	ldr.w	sl, [pc, #148]	; 80010d4 <config+0x10c>
 8001040:	4622      	mov	r2, r4
    bufferconf[0] = 0x11; // Select mode register
 8001042:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 8001044:	211c      	movs	r1, #28
 8001046:	2302      	movs	r3, #2
 8001048:	9500      	str	r5, [sp, #0]
 800104a:	4650      	mov	r0, sl
 800104c:	f001 f82c 	bl	80020a8 <HAL_I2C_Master_Transmit>
    HAL_Delay(15);
 8001050:	200f      	movs	r0, #15
 8001052:	f000 fd59 	bl	8001b08 <HAL_Delay>

    bufferconf[0] = 0x10; // Select mode register
 8001056:	f04f 0310 	mov.w	r3, #16
	bufferconf[1] = 0x1; //Continuous measurement mode
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 800105a:	4622      	mov	r2, r4
    bufferconf[0] = 0x10; // Select mode register
 800105c:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 800105e:	211c      	movs	r1, #28
 8001060:	2302      	movs	r3, #2
 8001062:	9500      	str	r5, [sp, #0]
 8001064:	4650      	mov	r0, sl
	bufferconf[1] = 0x1; //Continuous measurement mode
 8001066:	7066      	strb	r6, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 2, 100);
 8001068:	f001 f81e 	bl	80020a8 <HAL_I2C_Master_Transmit>
    HAL_Delay(15);
 800106c:	200f      	movs	r0, #15
 800106e:	f000 fd4b 	bl	8001b08 <HAL_Delay>

    bufferconf[0] = 0x07; // Select mode register
 8001072:	2307      	movs	r3, #7
    bufferconf[1] = 0x00; //Continuous measurement mode
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 1, 100); //writes the address of the WHO_AM_I register as a test
 8001074:	4622      	mov	r2, r4
    bufferconf[0] = 0x07; // Select mode register
 8001076:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 1, 100); //writes the address of the WHO_AM_I register as a test
 8001078:	9500      	str	r5, [sp, #0]
 800107a:	4633      	mov	r3, r6
 800107c:	211c      	movs	r1, #28
 800107e:	4650      	mov	r0, sl
    bufferconf[1] = 0x00; //Continuous measurement mode
 8001080:	7067      	strb	r7, [r4, #1]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferconf, 1, 100); //writes the address of the WHO_AM_I register as a test
 8001082:	f001 f811 	bl	80020a8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferconf, 1, 100);
 8001086:	4633      	mov	r3, r6
 8001088:	4622      	mov	r2, r4
 800108a:	211c      	movs	r1, #28
 800108c:	9500      	str	r5, [sp, #0]
 800108e:	4640      	mov	r0, r8
 8001090:	f001 f80a 	bl	80020a8 <HAL_I2C_Master_Transmit>

    HAL_Delay(10);
 8001094:	200a      	movs	r0, #10
 8001096:	f000 fd37 	bl	8001b08 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, MAG_ADDR, (uint8_t*)&bufferread1, 1, 100); //if I2C communication is working properly, the read byte must always be 0xC4
 800109a:	4633      	mov	r3, r6
 800109c:	464a      	mov	r2, r9
 800109e:	9500      	str	r5, [sp, #0]
 80010a0:	211c      	movs	r1, #28
 80010a2:	4640      	mov	r0, r8
 80010a4:	f001 f8d6 	bl	8002254 <HAL_I2C_Master_Receive>
    HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, (uint8_t*)&bufferread2, 1, 100);
 80010a8:	9500      	str	r5, [sp, #0]
 80010aa:	4633      	mov	r3, r6
 80010ac:	465a      	mov	r2, fp
 80010ae:	211c      	movs	r1, #28
 80010b0:	4650      	mov	r0, sl
 80010b2:	f001 f8cf 	bl	8002254 <HAL_I2C_Master_Receive>
    HAL_Delay(15);
 80010b6:	200f      	movs	r0, #15

}
 80010b8:	b003      	add	sp, #12
 80010ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_Delay(15);
 80010be:	f000 bd23 	b.w	8001b08 <HAL_Delay>
 80010c2:	bf00      	nop
 80010c4:	20000094 	.word	0x20000094
 80010c8:	2000009a 	.word	0x2000009a
 80010cc:	20000097 	.word	0x20000097
 80010d0:	20000100 	.word	0x20000100
 80010d4:	20000154 	.word	0x20000154

080010d8 <make_unit_vectors>:
	mag_read_valueL(field_L);
	mag_read_valueR(field_R);
}

float make_unit_vectors(int field[], float unit_vect[])
{
 80010d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010dc:	1f04      	subs	r4, r0, #4
 80010de:	460e      	mov	r6, r1
 80010e0:	4625      	mov	r5, r4
	float vect_length = 0;
 80010e2:	f04f 0a00 	mov.w	sl, #0
 80010e6:	f100 0708 	add.w	r7, r0, #8

	for(int i = 0; i < 3; i++) vect_length += pow(field[i], 2);
 80010ea:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80010ee:	f7ff f981 	bl	80003f4 <__aeabi_i2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	f7ff f9e3 	bl	80004c0 <__aeabi_dmul>
 80010fa:	4680      	mov	r8, r0
 80010fc:	4650      	mov	r0, sl
 80010fe:	4689      	mov	r9, r1
 8001100:	f7ff f98a 	bl	8000418 <__aeabi_f2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4640      	mov	r0, r8
 800110a:	4649      	mov	r1, r9
 800110c:	f7ff f826 	bl	800015c <__adddf3>
 8001110:	f7ff fc86 	bl	8000a20 <__aeabi_d2f>
 8001114:	42bd      	cmp	r5, r7
 8001116:	4682      	mov	sl, r0
 8001118:	d1e7      	bne.n	80010ea <make_unit_vectors+0x12>
	vect_length = sqrt(vect_length);
 800111a:	f7ff f97d 	bl	8000418 <__aeabi_f2d>
 800111e:	f001 ff37 	bl	8002f90 <sqrt>
 8001122:	f7ff fc7d 	bl	8000a20 <__aeabi_d2f>
 8001126:	4607      	mov	r7, r0
 8001128:	3e04      	subs	r6, #4
	for(int i = 0; i < 3; i++) unit_vect[i] = field[i] / vect_length;
 800112a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800112e:	f7ff fd81 	bl	8000c34 <__aeabi_i2f>
 8001132:	4639      	mov	r1, r7
 8001134:	f7ff fe86 	bl	8000e44 <__aeabi_fdiv>
 8001138:	42a5      	cmp	r5, r4
 800113a:	f846 0f04 	str.w	r0, [r6, #4]!
 800113e:	d1f4      	bne.n	800112a <make_unit_vectors+0x52>

	return vect_length;
}
 8001140:	4638      	mov	r0, r7
 8001142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001148 <mag_read_valueL>:

void mag_read_valueL(int field[])
{
 8001148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bufferW[0] = 0x01; //address of registry containing the first measured value
 800114a:	2301      	movs	r3, #1
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferW, 1, 100);  //writes the register address into the slave device
 800114c:	2764      	movs	r7, #100	; 0x64
{
 800114e:	4605      	mov	r5, r0
	bufferW[0] = 0x01; //address of registry containing the first measured value
 8001150:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <mag_read_valueL+0x58>)
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferW, 1, 100);  //writes the register address into the slave device
 8001152:	4e14      	ldr	r6, [pc, #80]	; (80011a4 <mag_read_valueL+0x5c>)
    HAL_Delay(2);
    HAL_I2C_Master_Receive(&hi2c1, MAG_ADDR, (uint8_t*)&bufferR, 6, 100); //reads 6 bytes of data from the slave device, starting at the registry which was previously written
 8001154:	4c14      	ldr	r4, [pc, #80]	; (80011a8 <mag_read_valueL+0x60>)
	bufferW[0] = 0x01; //address of registry containing the first measured value
 8001156:	7013      	strb	r3, [r2, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, bufferW, 1, 100);  //writes the register address into the slave device
 8001158:	211c      	movs	r1, #28
 800115a:	9700      	str	r7, [sp, #0]
 800115c:	4630      	mov	r0, r6
 800115e:	f000 ffa3 	bl	80020a8 <HAL_I2C_Master_Transmit>
    HAL_Delay(2);
 8001162:	2002      	movs	r0, #2
 8001164:	f000 fcd0 	bl	8001b08 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, MAG_ADDR, (uint8_t*)&bufferR, 6, 100); //reads 6 bytes of data from the slave device, starting at the registry which was previously written
 8001168:	4622      	mov	r2, r4
 800116a:	2306      	movs	r3, #6
 800116c:	211c      	movs	r1, #28
 800116e:	9700      	str	r7, [sp, #0]
 8001170:	4630      	mov	r0, r6
 8001172:	f001 f86f 	bl	8002254 <HAL_I2C_Master_Receive>
    HAL_Delay(2);
 8001176:	2002      	movs	r0, #2
 8001178:	f000 fcc6 	bl	8001b08 <HAL_Delay>

    field[0] = (bufferR[1]|(bufferR[0] << 8)); //buffer[0] is MSB of x, buffer[1] is LSB of x
 800117c:	7822      	ldrb	r2, [r4, #0]
 800117e:	7863      	ldrb	r3, [r4, #1]
 8001180:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001184:	602b      	str	r3, [r5, #0]
    field[1] = (bufferR[3]|(bufferR[2] << 8)); //buffer[2] is MSB of y, buffer[3] is LSB of y
 8001186:	78a2      	ldrb	r2, [r4, #2]
 8001188:	78e3      	ldrb	r3, [r4, #3]
 800118a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800118e:	606b      	str	r3, [r5, #4]
    field[2] = (bufferR[5]|(bufferR[4] << 8)); //buffer[4] is MSB of z, buffer[5] is LSB of z
 8001190:	7922      	ldrb	r2, [r4, #4]
 8001192:	7963      	ldrb	r3, [r4, #5]
 8001194:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001198:	60ab      	str	r3, [r5, #8]
}
 800119a:	b003      	add	sp, #12
 800119c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119e:	bf00      	nop
 80011a0:	200000e0 	.word	0x200000e0
 80011a4:	20000100 	.word	0x20000100
 80011a8:	200000da 	.word	0x200000da

080011ac <mag_read_valueR>:
void mag_read_valueR(int field[])
{
 80011ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bufferW[0] = 0x01;
 80011ae:	2301      	movs	r3, #1
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferW, 1, 100);
 80011b0:	2764      	movs	r7, #100	; 0x64
{
 80011b2:	4605      	mov	r5, r0
	bufferW[0] = 0x01;
 80011b4:	4a13      	ldr	r2, [pc, #76]	; (8001204 <mag_read_valueR+0x58>)
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferW, 1, 100);
 80011b6:	4e14      	ldr	r6, [pc, #80]	; (8001208 <mag_read_valueR+0x5c>)
    HAL_Delay(2);
    HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, (uint8_t*)&bufferR, 6, 100);
 80011b8:	4c14      	ldr	r4, [pc, #80]	; (800120c <mag_read_valueR+0x60>)
	bufferW[0] = 0x01;
 80011ba:	7013      	strb	r3, [r2, #0]
    HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, bufferW, 1, 100);
 80011bc:	211c      	movs	r1, #28
 80011be:	9700      	str	r7, [sp, #0]
 80011c0:	4630      	mov	r0, r6
 80011c2:	f000 ff71 	bl	80020a8 <HAL_I2C_Master_Transmit>
    HAL_Delay(2);
 80011c6:	2002      	movs	r0, #2
 80011c8:	f000 fc9e 	bl	8001b08 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, (uint8_t*)&bufferR, 6, 100);
 80011cc:	4622      	mov	r2, r4
 80011ce:	2306      	movs	r3, #6
 80011d0:	211c      	movs	r1, #28
 80011d2:	9700      	str	r7, [sp, #0]
 80011d4:	4630      	mov	r0, r6
 80011d6:	f001 f83d 	bl	8002254 <HAL_I2C_Master_Receive>
    HAL_Delay(2);
 80011da:	2002      	movs	r0, #2
 80011dc:	f000 fc94 	bl	8001b08 <HAL_Delay>

    field[0] = (bufferR[1]|(bufferR[0] << 8));
 80011e0:	7822      	ldrb	r2, [r4, #0]
 80011e2:	7863      	ldrb	r3, [r4, #1]
 80011e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011e8:	602b      	str	r3, [r5, #0]
    field[1] = (bufferR[3]|(bufferR[2] << 8));
 80011ea:	78a2      	ldrb	r2, [r4, #2]
 80011ec:	78e3      	ldrb	r3, [r4, #3]
 80011ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011f2:	606b      	str	r3, [r5, #4]
    field[2] = (bufferR[5]|(bufferR[4] << 8));
 80011f4:	7922      	ldrb	r2, [r4, #4]
 80011f6:	7963      	ldrb	r3, [r4, #5]
 80011f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011fc:	60ab      	str	r3, [r5, #8]
}
 80011fe:	b003      	add	sp, #12
 8001200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001202:	bf00      	nop
 8001204:	200000e0 	.word	0x200000e0
 8001208:	20000154 	.word	0x20000154
 800120c:	200000da 	.word	0x200000da

08001210 <read_values_to_arrays>:
{
 8001210:	b510      	push	{r4, lr}
 8001212:	460c      	mov	r4, r1
	mag_read_valueL(field_L);
 8001214:	f7ff ff98 	bl	8001148 <mag_read_valueL>
	mag_read_valueR(field_R);
 8001218:	4620      	mov	r0, r4
}
 800121a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mag_read_valueR(field_R);
 800121e:	f7ff bfc5 	b.w	80011ac <mag_read_valueR>

08001222 <reset_background>:

void reset_background(int field_L[], int field_R[], int bg_L[], int bg_R[], int end_of_startup)
{
 8001222:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001226:	4605      	mov	r5, r0
 8001228:	460f      	mov	r7, r1
 800122a:	4690      	mov	r8, r2
  for(int j = 0; j <= end_of_startup; j++)
 800122c:	2400      	movs	r4, #0
{
 800122e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8001230:	f1a2 0904 	sub.w	r9, r2, #4
 8001234:	f1a3 0a04 	sub.w	sl, r3, #4
 8001238:	f100 0b0c 	add.w	fp, r0, #12
  for(int j = 0; j <= end_of_startup; j++)
 800123c:	42b4      	cmp	r4, r6
 800123e:	dd01      	ble.n	8001244 <reset_background+0x22>
        bg_L[i] += field_L[i];
        bg_R[i] += field_R[i];
      }
    }
  }
}
 8001240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(j == end_of_startup)
 8001244:	d111      	bne.n	800126a <reset_background+0x48>
 8001246:	464b      	mov	r3, r9
 8001248:	4651      	mov	r1, sl
 800124a:	f108 0008 	add.w	r0, r8, #8
        bg_L[i] = bg_L[i] / end_of_startup;
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	fb92 f2f4 	sdiv	r2, r2, r4
 8001254:	f843 2f04 	str.w	r2, [r3, #4]!
        bg_R[i] = bg_R[i] / end_of_startup;
 8001258:	684a      	ldr	r2, [r1, #4]
      for(int i = 0; i < 3; i++)
 800125a:	4298      	cmp	r0, r3
        bg_R[i] = bg_R[i] / end_of_startup;
 800125c:	fb92 f2f4 	sdiv	r2, r2, r4
 8001260:	f841 2f04 	str.w	r2, [r1, #4]!
      for(int i = 0; i < 3; i++)
 8001264:	d1f3      	bne.n	800124e <reset_background+0x2c>
  for(int j = 0; j <= end_of_startup; j++)
 8001266:	3401      	adds	r4, #1
 8001268:	e7e8      	b.n	800123c <reset_background+0x1a>
      read_values_to_arrays(field_L, field_R);
 800126a:	4639      	mov	r1, r7
 800126c:	4628      	mov	r0, r5
 800126e:	f7ff ffcf 	bl	8001210 <read_values_to_arrays>
 8001272:	4629      	mov	r1, r5
 8001274:	46cc      	mov	ip, r9
 8001276:	46d6      	mov	lr, sl
 8001278:	463a      	mov	r2, r7
        if(field_L[i] > 65536 / 2) field_L[i] = field_L[i] - 65536;
 800127a:	680b      	ldr	r3, [r1, #0]
 800127c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001280:	bfc4      	itt	gt
 8001282:	f5a3 3380 	subgt.w	r3, r3, #65536	; 0x10000
 8001286:	600b      	strgt	r3, [r1, #0]
        if(field_R[i] > 65536 / 2) field_R[i] = field_R[i] - 65536;
 8001288:	6813      	ldr	r3, [r2, #0]
 800128a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800128e:	bfc4      	itt	gt
 8001290:	f5a3 3380 	subgt.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	strgt	r3, [r2, #0]
        bg_L[i] += field_L[i];
 8001296:	f851 0b04 	ldr.w	r0, [r1], #4
 800129a:	f8dc 3004 	ldr.w	r3, [ip, #4]
      for(int i = 0; i < 3; i++)
 800129e:	4559      	cmp	r1, fp
        bg_L[i] += field_L[i];
 80012a0:	4403      	add	r3, r0
 80012a2:	f84c 3f04 	str.w	r3, [ip, #4]!
        bg_R[i] += field_R[i];
 80012a6:	f8de 0004 	ldr.w	r0, [lr, #4]
 80012aa:	f852 3b04 	ldr.w	r3, [r2], #4
 80012ae:	4418      	add	r0, r3
 80012b0:	f84e 0f04 	str.w	r0, [lr, #4]!
      for(int i = 0; i < 3; i++)
 80012b4:	d1e1      	bne.n	800127a <reset_background+0x58>
 80012b6:	e7d6      	b.n	8001266 <reset_background+0x44>

080012b8 <average>:

float average(int array[], int k)
{
 80012b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012bc:	4607      	mov	r7, r0
 80012be:	460e      	mov	r6, r1
	float sum = 0;
	for(int i = 0; i < k; i++)
 80012c0:	2400      	movs	r4, #0
	float sum = 0;
 80012c2:	2500      	movs	r5, #0
	{
		if(array[i] > 0 && array[i] < 65535) sum += array[i];
 80012c4:	f64f 78fd 	movw	r8, #65533	; 0xfffd
	for(int i = 0; i < k; i++)
 80012c8:	42b4      	cmp	r4, r6
 80012ca:	db08      	blt.n	80012de <average+0x26>
	}
	sum = sum / k;
 80012cc:	4630      	mov	r0, r6
 80012ce:	f7ff fcb1 	bl	8000c34 <__aeabi_i2f>
 80012d2:	4601      	mov	r1, r0
 80012d4:	4628      	mov	r0, r5
 80012d6:	f7ff fdb5 	bl	8000e44 <__aeabi_fdiv>
	return sum;
}
 80012da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(array[i] > 0 && array[i] < 65535) sum += array[i];
 80012de:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 80012e2:	1e43      	subs	r3, r0, #1
 80012e4:	4543      	cmp	r3, r8
 80012e6:	d806      	bhi.n	80012f6 <average+0x3e>
 80012e8:	f7ff fca4 	bl	8000c34 <__aeabi_i2f>
 80012ec:	4601      	mov	r1, r0
 80012ee:	4628      	mov	r0, r5
 80012f0:	f7ff fbec 	bl	8000acc <__addsf3>
 80012f4:	4605      	mov	r5, r0
	for(int i = 0; i < k; i++)
 80012f6:	3401      	adds	r4, #1
 80012f8:	e7e6      	b.n	80012c8 <average+0x10>
	...

080012fc <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	2210      	movs	r2, #16
{
 80012fe:	b510      	push	{r4, lr}
 8001300:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	eb0d 0002 	add.w	r0, sp, r2
 8001306:	2100      	movs	r1, #0
 8001308:	f001 fcd6 	bl	8002cb8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_GPIO_Init+0x88>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800130e:	4c1e      	ldr	r4, [pc, #120]	; (8001388 <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001310:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001312:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001314:	f042 0210 	orr.w	r2, r2, #16
 8001318:	619a      	str	r2, [r3, #24]
 800131a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800131c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001320:	f002 0210 	and.w	r2, r2, #16
 8001324:	9200      	str	r2, [sp, #0]
 8001326:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001328:	699a      	ldr	r2, [r3, #24]
 800132a:	f042 0220 	orr.w	r2, r2, #32
 800132e:	619a      	str	r2, [r3, #24]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	f002 0220 	and.w	r2, r2, #32
 8001336:	9201      	str	r2, [sp, #4]
 8001338:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	699a      	ldr	r2, [r3, #24]
 800133c:	f042 0208 	orr.w	r2, r2, #8
 8001340:	619a      	str	r2, [r3, #24]
 8001342:	699a      	ldr	r2, [r3, #24]
 8001344:	f002 0208 	and.w	r2, r2, #8
 8001348:	9202      	str	r2, [sp, #8]
 800134a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	699a      	ldr	r2, [r3, #24]
 800134e:	f042 0204 	orr.w	r2, r2, #4
 8001352:	619a      	str	r2, [r3, #24]
 8001354:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	9303      	str	r3, [sp, #12]
 800135e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001360:	f000 fd20 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001368:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001374:	a904      	add	r1, sp, #16
 8001376:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800137a:	f000 fc33 	bl	8001be4 <HAL_GPIO_Init>

}
 800137e:	b008      	add	sp, #32
 8001380:	bd10      	pop	{r4, pc}
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	40011000 	.word	0x40011000

0800138c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800138c:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800138e:	480c      	ldr	r0, [pc, #48]	; (80013c0 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_I2C1_Init+0x38>)
 8001392:	f8df e034 	ldr.w	lr, [pc, #52]	; 80013c8 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001396:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 800139a:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800139e:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a0:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013a4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013a8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013aa:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ac:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ae:	f000 fdfb 	bl	8001fa8 <HAL_I2C_Init>
 80013b2:	b118      	cbz	r0, 80013bc <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 80013b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80013b8:	f000 bab0 	b.w	800191c <Error_Handler>
 80013bc:	bd08      	pop	{r3, pc}
 80013be:	bf00      	nop
 80013c0:	20000100 	.word	0x20000100
 80013c4:	40005400 	.word	0x40005400
 80013c8:	00061a80 	.word	0x00061a80

080013cc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013cc:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80013ce:	480c      	ldr	r0, [pc, #48]	; (8001400 <MX_I2C2_Init+0x34>)
  hi2c2.Init.ClockSpeed = 400000;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_I2C2_Init+0x38>)
 80013d2:	f8df e034 	ldr.w	lr, [pc, #52]	; 8001408 <MX_I2C2_Init+0x3c>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 400000;
 80013da:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013de:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e0:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e2:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013e4:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e6:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013e8:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ea:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ec:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013ee:	f000 fddb 	bl	8001fa8 <HAL_I2C_Init>
 80013f2:	b118      	cbz	r0, 80013fc <MX_I2C2_Init+0x30>
  {
    Error_Handler();
  }

}
 80013f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80013f8:	f000 ba90 	b.w	800191c <Error_Handler>
 80013fc:	bd08      	pop	{r3, pc}
 80013fe:	bf00      	nop
 8001400:	20000154 	.word	0x20000154
 8001404:	40005800 	.word	0x40005800
 8001408:	00061a80 	.word	0x00061a80

0800140c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	2210      	movs	r2, #16
{
 800140e:	b510      	push	{r4, lr}
 8001410:	4604      	mov	r4, r0
 8001412:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	eb0d 0002 	add.w	r0, sp, r2
 8001418:	2100      	movs	r1, #0
 800141a:	f001 fc4d 	bl	8002cb8 <memset>
  if(i2cHandle->Instance==I2C1)
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	4a21      	ldr	r2, [pc, #132]	; (80014a8 <HAL_I2C_MspInit+0x9c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d11e      	bne.n	8001464 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4c21      	ldr	r4, [pc, #132]	; (80014ac <HAL_I2C_MspInit+0xa0>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	4820      	ldr	r0, [pc, #128]	; (80014b0 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	61a3      	str	r3, [r4, #24]
 8001434:	69a3      	ldr	r3, [r4, #24]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800143e:	23c0      	movs	r3, #192	; 0xc0
 8001440:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001442:	2312      	movs	r3, #18
 8001444:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f000 fbcb 	bl	8001be4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800144e:	69e3      	ldr	r3, [r4, #28]
 8001450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001454:	61e3      	str	r3, [r4, #28]
 8001456:	69e3      	ldr	r3, [r4, #28]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001460:	b008      	add	sp, #32
 8001462:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 8001464:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <HAL_I2C_MspInit+0xa8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d1fa      	bne.n	8001460 <HAL_I2C_MspInit+0x54>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4c10      	ldr	r4, [pc, #64]	; (80014ac <HAL_I2C_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	480f      	ldr	r0, [pc, #60]	; (80014b0 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	61a3      	str	r3, [r4, #24]
 8001478:	69a3      	ldr	r3, [r4, #24]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001482:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001486:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001488:	2312      	movs	r3, #18
 800148a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f000 fba8 	bl	8001be4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001494:	69e3      	ldr	r3, [r4, #28]
 8001496:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800149a:	61e3      	str	r3, [r4, #28]
 800149c:	69e3      	ldr	r3, [r4, #28]
 800149e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a2:	9303      	str	r3, [sp, #12]
 80014a4:	9b03      	ldr	r3, [sp, #12]
}
 80014a6:	e7db      	b.n	8001460 <HAL_I2C_MspInit+0x54>
 80014a8:	40005400 	.word	0x40005400
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40010c00 	.word	0x40010c00
 80014b4:	40005800 	.word	0x40005800

080014b8 <CreateGrid>:
 */

#include "magnetmath.h"

void CreateGrid(int grid_x[], int grid_y[], int grid_z[], float height, float Br, float radius, float magnet_height)
{
 80014b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014bc:	b087      	sub	sp, #28
 80014be:	9104      	str	r1, [sp, #16]
	float u0 = 4 * M_PI * 0.0000001;
	float V = radius * radius * M_PI * magnet_height;
 80014c0:	9911      	ldr	r1, [sp, #68]	; 0x44
{
 80014c2:	9003      	str	r0, [sp, #12]
	float V = radius * radius * M_PI * magnet_height;
 80014c4:	4608      	mov	r0, r1
{
 80014c6:	461e      	mov	r6, r3
 80014c8:	4693      	mov	fp, r2
	float V = radius * radius * M_PI * magnet_height;
 80014ca:	f7ff fc07 	bl	8000cdc <__aeabi_fmul>
 80014ce:	f7fe ffa3 	bl	8000418 <__aeabi_f2d>
 80014d2:	a347      	add	r3, pc, #284	; (adr r3, 80015f0 <CreateGrid+0x138>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	f7fe fff2 	bl	80004c0 <__aeabi_dmul>
 80014dc:	4604      	mov	r4, r0
 80014de:	9812      	ldr	r0, [sp, #72]	; 0x48
 80014e0:	460d      	mov	r5, r1
 80014e2:	f7fe ff99 	bl	8000418 <__aeabi_f2d>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4620      	mov	r0, r4
 80014ec:	4629      	mov	r1, r5
 80014ee:	f7fe ffe7 	bl	80004c0 <__aeabi_dmul>
 80014f2:	f7ff fa95 	bl	8000a20 <__aeabi_d2f>
	float moment = (1 / u0) * Br * V;
 80014f6:	4940      	ldr	r1, [pc, #256]	; (80015f8 <CreateGrid+0x140>)
	float V = radius * radius * M_PI * magnet_height;
 80014f8:	4604      	mov	r4, r0
	float moment = (1 / u0) * Br * V;
 80014fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80014fc:	f7ff fbee 	bl	8000cdc <__aeabi_fmul>
 8001500:	4601      	mov	r1, r0
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff fbea 	bl	8000cdc <__aeabi_fmul>

	for(int x = -10; x < 10; x++)
	{
		for(int y = -10; y < 10; y++)
		{
			float e2_x = 3 * (moment * height) * (x / 100);
 8001508:	4631      	mov	r1, r6
	float moment = (1 / u0) * Br * V;
 800150a:	9002      	str	r0, [sp, #8]
			float e2_x = 3 * (moment * height) * (x / 100);
 800150c:	f7ff fbe6 	bl	8000cdc <__aeabi_fmul>
 8001510:	493a      	ldr	r1, [pc, #232]	; (80015fc <CreateGrid+0x144>)
 8001512:	f7ff fbe3 	bl	8000cdc <__aeabi_fmul>
 8001516:	2100      	movs	r1, #0
 8001518:	4604      	mov	r4, r0
 800151a:	f7ff fbdf 	bl	8000cdc <__aeabi_fmul>
			float e2_y = 3 * (moment * height) * (y / 100);
			float e2_z = 3 * (moment * height) * height;
 800151e:	4621      	mov	r1, r4
			float e2_x = 3 * (moment * height) * (x / 100);
 8001520:	4681      	mov	r9, r0
			float e2_z = 3 * (moment * height) * height;
 8001522:	4630      	mov	r0, r6
 8001524:	f7ff fbda 	bl	8000cdc <__aeabi_fmul>
 8001528:	4682      	mov	sl, r0
			float e3 = pow(sqrt(pow((x / 100), 2) + pow((y / 100), 2) + pow(height, 2)), 5);
 800152a:	4630      	mov	r0, r6
 800152c:	f7fe ff74 	bl	8000418 <__aeabi_f2d>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	f7fe ffc4 	bl	80004c0 <__aeabi_dmul>
 8001538:	2200      	movs	r2, #0
 800153a:	2300      	movs	r3, #0
 800153c:	f7fe fe0e 	bl	800015c <__adddf3>
 8001540:	2500      	movs	r5, #0
 8001542:	e9cd 0100 	strd	r0, r1, [sp]
			float e4_x = 0;
			float e4_y = 0;
			float e4_z = moment;
			float e5 = pow(sqrt(pow((x / 100), 2) + pow((y / 100), 2) + pow(height, 2)), 3);

			grid_x[i] = (int)truncf(e1 * ((e2_x / e3) - (e4_x / e5)));
 8001546:	4e2e      	ldr	r6, [pc, #184]	; (8001600 <CreateGrid+0x148>)
{
 8001548:	2400      	movs	r4, #0
			float e3 = pow(sqrt(pow((x / 100), 2) + pow((y / 100), 2) + pow(height, 2)), 5);
 800154a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800154e:	f001 fd1f 	bl	8002f90 <sqrt>
 8001552:	2200      	movs	r2, #0
 8001554:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <CreateGrid+0x14c>)
 8001556:	f001 fbb7 	bl	8002cc8 <pow>
 800155a:	f7ff fa61 	bl	8000a20 <__aeabi_d2f>
 800155e:	4680      	mov	r8, r0
			float e5 = pow(sqrt(pow((x / 100), 2) + pow((y / 100), 2) + pow(height, 2)), 3);
 8001560:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001564:	f001 fd14 	bl	8002f90 <sqrt>
 8001568:	2200      	movs	r2, #0
 800156a:	4b27      	ldr	r3, [pc, #156]	; (8001608 <CreateGrid+0x150>)
 800156c:	f001 fbac 	bl	8002cc8 <pow>
 8001570:	f7ff fa56 	bl	8000a20 <__aeabi_d2f>
			grid_x[i] = (int)truncf(e1 * ((e2_x / e3) - (e4_x / e5)));
 8001574:	4641      	mov	r1, r8
			float e5 = pow(sqrt(pow((x / 100), 2) + pow((y / 100), 2) + pow(height, 2)), 3);
 8001576:	4607      	mov	r7, r0
			grid_x[i] = (int)truncf(e1 * ((e2_x / e3) - (e4_x / e5)));
 8001578:	4648      	mov	r0, r9
 800157a:	f7ff fc63 	bl	8000e44 <__aeabi_fdiv>
 800157e:	4639      	mov	r1, r7
 8001580:	9005      	str	r0, [sp, #20]
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fc5e 	bl	8000e44 <__aeabi_fdiv>
 8001588:	9b05      	ldr	r3, [sp, #20]
 800158a:	4601      	mov	r1, r0
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fa9b 	bl	8000ac8 <__aeabi_fsub>
 8001592:	4631      	mov	r1, r6
 8001594:	f7ff fba2 	bl	8000cdc <__aeabi_fmul>
 8001598:	f7ff fcf0 	bl	8000f7c <__aeabi_f2iz>
 800159c:	9b03      	ldr	r3, [sp, #12]
			grid_y[i] = (int)truncf(e1 * ((e2_y / e3) - (e4_y / e5)));
			grid_z[i] = (int)truncf(e1 * ((e2_z / e3) - (e4_z / e5)));
 800159e:	4641      	mov	r1, r8
			grid_x[i] = (int)truncf(e1 * ((e2_x / e3) - (e4_x / e5)));
 80015a0:	442b      	add	r3, r5
 80015a2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
			grid_y[i] = (int)truncf(e1 * ((e2_y / e3) - (e4_y / e5)));
 80015a6:	9b04      	ldr	r3, [sp, #16]
 80015a8:	442b      	add	r3, r5
 80015aa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
			grid_z[i] = (int)truncf(e1 * ((e2_z / e3) - (e4_z / e5)));
 80015ae:	eb0b 0305 	add.w	r3, fp, r5
 80015b2:	4650      	mov	r0, sl
 80015b4:	9305      	str	r3, [sp, #20]
 80015b6:	f7ff fc45 	bl	8000e44 <__aeabi_fdiv>
 80015ba:	4639      	mov	r1, r7
 80015bc:	4680      	mov	r8, r0
 80015be:	9802      	ldr	r0, [sp, #8]
 80015c0:	f7ff fc40 	bl	8000e44 <__aeabi_fdiv>
 80015c4:	4601      	mov	r1, r0
 80015c6:	4640      	mov	r0, r8
 80015c8:	f7ff fa7e 	bl	8000ac8 <__aeabi_fsub>
 80015cc:	4631      	mov	r1, r6
 80015ce:	f7ff fb85 	bl	8000cdc <__aeabi_fmul>
 80015d2:	f7ff fcd3 	bl	8000f7c <__aeabi_f2iz>
 80015d6:	9b05      	ldr	r3, [sp, #20]
 80015d8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80015dc:	3401      	adds	r4, #1
		for(int y = -10; y < 10; y++)
 80015de:	2c14      	cmp	r4, #20
 80015e0:	d1b3      	bne.n	800154a <CreateGrid+0x92>
 80015e2:	3550      	adds	r5, #80	; 0x50
	for(int x = -10; x < 10; x++)
 80015e4:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 80015e8:	d1ae      	bne.n	8001548 <CreateGrid+0x90>
		    i++;
		}
	}
}
 80015ea:	b007      	add	sp, #28
 80015ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015f0:	54442d18 	.word	0x54442d18
 80015f4:	400921fb 	.word	0x400921fb
 80015f8:	494247ec 	.word	0x494247ec
 80015fc:	40400000 	.word	0x40400000
 8001600:	33d6bf94 	.word	0x33d6bf94
 8001604:	40140000 	.word	0x40140000
 8001608:	40080000 	.word	0x40080000

0800160c <CheckGrid>:


int CheckGrid(int grid_x[], int grid_y[], int grid_z[], int field[])
{
 800160c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001610:	b089      	sub	sp, #36	; 0x24
 8001612:	9007      	str	r0, [sp, #28]
	int min_diff = 999999;
	float str_field = sqrt(pow(field[0], 2) + pow(field[1], 2) + pow(field[2], 2));
 8001614:	6818      	ldr	r0, [r3, #0]
{
 8001616:	461c      	mov	r4, r3
 8001618:	4692      	mov	sl, r2
 800161a:	468b      	mov	fp, r1
	float str_field = sqrt(pow(field[0], 2) + pow(field[1], 2) + pow(field[2], 2));
 800161c:	f7fe feea 	bl	80003f4 <__aeabi_i2d>
 8001620:	4606      	mov	r6, r0
 8001622:	6860      	ldr	r0, [r4, #4]
 8001624:	460f      	mov	r7, r1
 8001626:	f7fe fee5 	bl	80003f4 <__aeabi_i2d>
 800162a:	4680      	mov	r8, r0
 800162c:	68a0      	ldr	r0, [r4, #8]
 800162e:	4689      	mov	r9, r1
 8001630:	f7fe fee0 	bl	80003f4 <__aeabi_i2d>
 8001634:	4632      	mov	r2, r6
 8001636:	460d      	mov	r5, r1
 8001638:	4604      	mov	r4, r0
 800163a:	463b      	mov	r3, r7
 800163c:	4630      	mov	r0, r6
 800163e:	4639      	mov	r1, r7
 8001640:	f7fe ff3e 	bl	80004c0 <__aeabi_dmul>
 8001644:	4642      	mov	r2, r8
 8001646:	4606      	mov	r6, r0
 8001648:	460f      	mov	r7, r1
 800164a:	464b      	mov	r3, r9
 800164c:	4640      	mov	r0, r8
 800164e:	4649      	mov	r1, r9
 8001650:	f7fe ff36 	bl	80004c0 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4630      	mov	r0, r6
 800165a:	4639      	mov	r1, r7
 800165c:	f7fe fd7e 	bl	800015c <__adddf3>
 8001660:	462b      	mov	r3, r5
 8001662:	4606      	mov	r6, r0
 8001664:	460f      	mov	r7, r1
 8001666:	4622      	mov	r2, r4
 8001668:	4629      	mov	r1, r5
 800166a:	4620      	mov	r0, r4
 800166c:	f7fe ff28 	bl	80004c0 <__aeabi_dmul>
	int i = 0;
	int grid_index = 0;
 8001670:	f04f 0800 	mov.w	r8, #0
	float str_field = sqrt(pow(field[0], 2) + pow(field[1], 2) + pow(field[2], 2));
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4630      	mov	r0, r6
 800167a:	4639      	mov	r1, r7
 800167c:	f7fe fd6e 	bl	800015c <__adddf3>
 8001680:	f001 fc86 	bl	8002f90 <sqrt>
 8001684:	f7ff f9cc 	bl	8000a20 <__aeabi_d2f>
	int i = 0;
 8001688:	4645      	mov	r5, r8
	int min_diff = 999999;
 800168a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8001740 <CheckGrid+0x134>
	float str_field = sqrt(pow(field[0], 2) + pow(field[1], 2) + pow(field[2], 2));
 800168e:	9001      	str	r0, [sp, #4]
{
 8001690:	462c      	mov	r4, r5
 8001692:	f105 0315 	add.w	r3, r5, #21
 8001696:	9306      	str	r3, [sp, #24]
	for(int x = 0; x < 21; x++)
	{
		for(int y = 0; y < 21; y++)
		{
			float str_grid = sqrt(pow(grid_x[i], 2) + pow(grid_y[i], 2) + pow(grid_z[i], 2));
 8001698:	9b07      	ldr	r3, [sp, #28]
 800169a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800169e:	f7fe fea9 	bl	80003f4 <__aeabi_i2d>
 80016a2:	4606      	mov	r6, r0
 80016a4:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 80016a8:	460f      	mov	r7, r1
 80016aa:	f7fe fea3 	bl	80003f4 <__aeabi_i2d>
 80016ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80016b2:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 80016b6:	f7fe fe9d 	bl	80003f4 <__aeabi_i2d>
 80016ba:	4632      	mov	r2, r6
 80016bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80016c0:	463b      	mov	r3, r7
 80016c2:	4630      	mov	r0, r6
 80016c4:	4639      	mov	r1, r7
 80016c6:	f7fe fefb 	bl	80004c0 <__aeabi_dmul>
 80016ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80016ce:	4606      	mov	r6, r0
 80016d0:	460f      	mov	r7, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7fe fef3 	bl	80004c0 <__aeabi_dmul>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4630      	mov	r0, r6
 80016e0:	4639      	mov	r1, r7
 80016e2:	f7fe fd3b 	bl	800015c <__adddf3>
 80016e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80016ea:	4606      	mov	r6, r0
 80016ec:	460f      	mov	r7, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f7fe fee5 	bl	80004c0 <__aeabi_dmul>
 80016f6:	460b      	mov	r3, r1
 80016f8:	4602      	mov	r2, r0
 80016fa:	4639      	mov	r1, r7
 80016fc:	4630      	mov	r0, r6
 80016fe:	f7fe fd2d 	bl	800015c <__adddf3>
 8001702:	f001 fc45 	bl	8002f90 <sqrt>
 8001706:	f7ff f98b 	bl	8000a20 <__aeabi_d2f>
			if(abs(str_grid - str_field) < min_diff)
 800170a:	9901      	ldr	r1, [sp, #4]
 800170c:	f7ff f9dc 	bl	8000ac8 <__aeabi_fsub>
 8001710:	f7ff fc34 	bl	8000f7c <__aeabi_f2iz>
 8001714:	2800      	cmp	r0, #0
 8001716:	bfb8      	it	lt
 8001718:	4240      	neglt	r0, r0
 800171a:	4548      	cmp	r0, r9
		for(int y = 0; y < 21; y++)
 800171c:	9b06      	ldr	r3, [sp, #24]
 800171e:	bfb8      	it	lt
 8001720:	46a0      	movlt	r8, r4
			{
				min_diff = abs(str_grid - str_field);
				grid_index = i;
			}
			i++;
 8001722:	f104 0401 	add.w	r4, r4, #1
 8001726:	bfb8      	it	lt
 8001728:	4681      	movlt	r9, r0
		for(int y = 0; y < 21; y++)
 800172a:	429c      	cmp	r4, r3
 800172c:	d1b4      	bne.n	8001698 <CheckGrid+0x8c>
	for(int x = 0; x < 21; x++)
 800172e:	f240 13b9 	movw	r3, #441	; 0x1b9
 8001732:	3515      	adds	r5, #21
 8001734:	429d      	cmp	r5, r3
 8001736:	d1ab      	bne.n	8001690 <CheckGrid+0x84>
		}
	}
	return grid_index;
}
 8001738:	4640      	mov	r0, r8
 800173a:	b009      	add	sp, #36	; 0x24
 800173c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001740:	000f423f 	.word	0x000f423f

08001744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001744:	b510      	push	{r4, lr}
 8001746:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001748:	2228      	movs	r2, #40	; 0x28
 800174a:	2100      	movs	r1, #0
 800174c:	a806      	add	r0, sp, #24
 800174e:	f001 fab3 	bl	8002cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001752:	2100      	movs	r1, #0
 8001754:	2214      	movs	r2, #20
 8001756:	a801      	add	r0, sp, #4
 8001758:	f001 faae 	bl	8002cb8 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800175c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001760:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001762:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001764:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001766:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001768:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800176e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001770:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001772:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001774:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001776:	f000 feef 	bl	8002558 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800177c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001780:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001782:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001784:	4621      	mov	r1, r4
 8001786:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001788:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800178c:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001790:	f001 f8aa 	bl	80028e8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001794:	b010      	add	sp, #64	; 0x40
 8001796:	bd10      	pop	{r4, pc}

08001798 <main>:
{
 8001798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_Init();
 800179c:	f000 f990 	bl	8001ac0 <HAL_Init>
  SystemClock_Config();
 80017a0:	f7ff ffd0 	bl	8001744 <SystemClock_Config>
  MX_GPIO_Init();
 80017a4:	f7ff fdaa 	bl	80012fc <MX_GPIO_Init>
  MX_I2C2_Init();
 80017a8:	f7ff fe10 	bl	80013cc <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80017ac:	f000 f90a 	bl	80019c4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80017b0:	f7ff fdec 	bl	800138c <MX_I2C1_Init>
  config();
 80017b4:	f7ff fc08 	bl	8000fc8 <config>
  reset_background(field_L, field_R, bg_L, bg_R, 100);
 80017b8:	2364      	movs	r3, #100	; 0x64
 80017ba:	4a43      	ldr	r2, [pc, #268]	; (80018c8 <main+0x130>)
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4943      	ldr	r1, [pc, #268]	; (80018cc <main+0x134>)
 80017c0:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <main+0x138>)
 80017c2:	4844      	ldr	r0, [pc, #272]	; (80018d4 <main+0x13c>)
 80017c4:	f7ff fd2d 	bl	8001222 <reset_background>
  CreateGrid(grid_x, grid_y, grid_z, 0.014, 1, 0.006, 0.026);
 80017c8:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <main+0x140>)
 80017ca:	4a44      	ldr	r2, [pc, #272]	; (80018dc <main+0x144>)
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <main+0x148>)
 80017d0:	4944      	ldr	r1, [pc, #272]	; (80018e4 <main+0x14c>)
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80017d8:	4843      	ldr	r0, [pc, #268]	; (80018e8 <main+0x150>)
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	4b43      	ldr	r3, [pc, #268]	; (80018ec <main+0x154>)
 80017de:	f7ff fe6b 	bl	80014b8 <CreateGrid>
	read_values_to_arrays(field_L, field_R);
 80017e2:	4d3a      	ldr	r5, [pc, #232]	; (80018cc <main+0x134>)
 80017e4:	4e3b      	ldr	r6, [pc, #236]	; (80018d4 <main+0x13c>)
	strsum_L[k] = str_L; //adds strength of magnetic field to array for average calculation
 80017e6:	4f42      	ldr	r7, [pc, #264]	; (80018f0 <main+0x158>)
	read_values_to_arrays(field_L, field_R);
 80017e8:	4629      	mov	r1, r5
 80017ea:	4630      	mov	r0, r6
 80017ec:	f7ff fd10 	bl	8001210 <read_values_to_arrays>
	for(int i = 0; i < 3; i++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	4938      	ldr	r1, [pc, #224]	; (80018d4 <main+0x13c>)
 80017f4:	4a35      	ldr	r2, [pc, #212]	; (80018cc <main+0x134>)
	  field_L[i] -= bg_L[i]; //accounts for the background magnetic fields
 80017f6:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 80018c8 <main+0x130>
	  field_R[i] -= bg_R[i];
 80017fa:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 80018d0 <main+0x138>
	  if(field_L[i] > 65536 / 2) field_L[i] = field_L[i] - 65536; //by default, negative magnetic fields are represented as decreasing from maximum 16 bit number 65535
 80017fe:	6808      	ldr	r0, [r1, #0]
	  field_L[i] -= bg_L[i]; //accounts for the background magnetic fields
 8001800:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
	  if(field_L[i] > 65536 / 2) field_L[i] = field_L[i] - 65536; //by default, negative magnetic fields are represented as decreasing from maximum 16 bit number 65535
 8001804:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001808:	bfc4      	itt	gt
 800180a:	f5a0 3080 	subgt.w	r0, r0, #65536	; 0x10000
 800180e:	6008      	strgt	r0, [r1, #0]
	  if(field_R[i] > 65536 / 2) field_R[i] = field_R[i] - 65536; //changes the representation of negative magnetic fields to negative values starting at zero
 8001810:	6810      	ldr	r0, [r2, #0]
 8001812:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001816:	bfc4      	itt	gt
 8001818:	f5a0 3080 	subgt.w	r0, r0, #65536	; 0x10000
 800181c:	6010      	strgt	r0, [r2, #0]
	  field_L[i] -= bg_L[i]; //accounts for the background magnetic fields
 800181e:	6808      	ldr	r0, [r1, #0]
 8001820:	1b00      	subs	r0, r0, r4
 8001822:	f841 0b04 	str.w	r0, [r1], #4
	  field_R[i] -= bg_R[i];
 8001826:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 800182a:	6810      	ldr	r0, [r2, #0]
	for(int i = 0; i < 3; i++)
 800182c:	3301      	adds	r3, #1
	  field_R[i] -= bg_R[i];
 800182e:	1b00      	subs	r0, r0, r4
	for(int i = 0; i < 3; i++)
 8001830:	2b03      	cmp	r3, #3
	  field_R[i] -= bg_R[i];
 8001832:	f842 0b04 	str.w	r0, [r2], #4
	for(int i = 0; i < 3; i++)
 8001836:	d1e2      	bne.n	80017fe <main+0x66>
	str_L = make_unit_vectors(field_L, vect_L); //creates array of directional unit vectors and outputs strength of magnetic field
 8001838:	492e      	ldr	r1, [pc, #184]	; (80018f4 <main+0x15c>)
 800183a:	4630      	mov	r0, r6
 800183c:	f7ff fc4c 	bl	80010d8 <make_unit_vectors>
 8001840:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8001914 <main+0x17c>
	str_R = make_unit_vectors(field_R, vect_R);
 8001844:	492c      	ldr	r1, [pc, #176]	; (80018f8 <main+0x160>)
	str_L = make_unit_vectors(field_L, vect_L); //creates array of directional unit vectors and outputs strength of magnetic field
 8001846:	f8ca 0000 	str.w	r0, [sl]
	str_R = make_unit_vectors(field_R, vect_R);
 800184a:	4628      	mov	r0, r5
 800184c:	f7ff fc44 	bl	80010d8 <make_unit_vectors>
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <main+0x164>)
 8001852:	4681      	mov	r9, r0
 8001854:	6018      	str	r0, [r3, #0]
	strsum_L[k] = str_L; //adds strength of magnetic field to array for average calculation
 8001856:	f8da 0000 	ldr.w	r0, [sl]
 800185a:	f7ff fb8f 	bl	8000f7c <__aeabi_f2iz>
 800185e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8001918 <main+0x180>
 8001862:	f8d8 4000 	ldr.w	r4, [r8]
 8001866:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
	strsum_R[k] = str_R;
 800186a:	4648      	mov	r0, r9
 800186c:	f7ff fb86 	bl	8000f7c <__aeabi_f2iz>
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <main+0x168>)
	avgstr_L = average(strsum_L, 20); //calculates the average of the most recent 20 field strength measurements
 8001872:	2114      	movs	r1, #20
	strsum_R[k] = str_R;
 8001874:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	k++;
 8001878:	3401      	adds	r4, #1
	if(k >= 20) k = 0;
 800187a:	2c13      	cmp	r4, #19
 800187c:	bfc8      	it	gt
 800187e:	2300      	movgt	r3, #0
	avgstr_L = average(strsum_L, 20); //calculates the average of the most recent 20 field strength measurements
 8001880:	4638      	mov	r0, r7
	if(k >= 20) k = 0;
 8001882:	bfcc      	ite	gt
 8001884:	f8c8 3000 	strgt.w	r3, [r8]
	k++;
 8001888:	f8c8 4000 	strle.w	r4, [r8]
	avgstr_L = average(strsum_L, 20); //calculates the average of the most recent 20 field strength measurements
 800188c:	f7ff fd14 	bl	80012b8 <average>
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <main+0x16c>)
	avgstr_R = average(strsum_R, 20);
 8001892:	2114      	movs	r1, #20
	avgstr_L = average(strsum_L, 20); //calculates the average of the most recent 20 field strength measurements
 8001894:	6018      	str	r0, [r3, #0]
	avgstr_R = average(strsum_R, 20);
 8001896:	481a      	ldr	r0, [pc, #104]	; (8001900 <main+0x168>)
 8001898:	f7ff fd0e 	bl	80012b8 <average>
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <main+0x170>)
	grid_index_L = CheckGrid(grid_x, grid_y, grid_z, field_L);
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <main+0x144>)
	avgstr_R = average(strsum_R, 20);
 80018a0:	6018      	str	r0, [r3, #0]
	grid_index_L = CheckGrid(grid_x, grid_y, grid_z, field_L);
 80018a2:	4910      	ldr	r1, [pc, #64]	; (80018e4 <main+0x14c>)
 80018a4:	4633      	mov	r3, r6
 80018a6:	4810      	ldr	r0, [pc, #64]	; (80018e8 <main+0x150>)
 80018a8:	f7ff feb0 	bl	800160c <CheckGrid>
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <main+0x174>)
	grid_index_R = CheckGrid(grid_x, grid_y, grid_z, field_R);
 80018ae:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <main+0x144>)
	grid_index_L = CheckGrid(grid_x, grid_y, grid_z, field_L);
 80018b0:	6018      	str	r0, [r3, #0]
	grid_index_R = CheckGrid(grid_x, grid_y, grid_z, field_R);
 80018b2:	490c      	ldr	r1, [pc, #48]	; (80018e4 <main+0x14c>)
 80018b4:	462b      	mov	r3, r5
 80018b6:	480c      	ldr	r0, [pc, #48]	; (80018e8 <main+0x150>)
 80018b8:	f7ff fea8 	bl	800160c <CheckGrid>
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <main+0x178>)
 80018be:	6018      	str	r0, [r3, #0]
	HAL_Delay(1);
 80018c0:	2001      	movs	r0, #1
 80018c2:	f000 f921 	bl	8001b08 <HAL_Delay>
	read_values_to_arrays(field_L, field_R);
 80018c6:	e78f      	b.n	80017e8 <main+0x50>
 80018c8:	200000f4 	.word	0x200000f4
 80018cc:	200000e8 	.word	0x200000e8
 80018d0:	200000c0 	.word	0x200000c0
 80018d4:	2000009c 	.word	0x2000009c
 80018d8:	3cd4fdf4 	.word	0x3cd4fdf4
 80018dc:	20000f78 	.word	0x20000f78
 80018e0:	3bc49ba6 	.word	0x3bc49ba6
 80018e4:	200001b0 	.word	0x200001b0
 80018e8:	20000894 	.word	0x20000894
 80018ec:	3c656042 	.word	0x3c656042
 80018f0:	200016b4 	.word	0x200016b4
 80018f4:	200000b4 	.word	0x200000b4
 80018f8:	200000a8 	.word	0x200000a8
 80018fc:	200000cc 	.word	0x200000cc
 8001900:	2000165c 	.word	0x2000165c
 8001904:	200016ac 	.word	0x200016ac
 8001908:	200001a8 	.word	0x200001a8
 800190c:	200001ac 	.word	0x200001ac
 8001910:	200016b0 	.word	0x200016b0
 8001914:	200000d0 	.word	0x200000d0
 8001918:	20000090 	.word	0x20000090

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	4770      	bx	lr
	...

08001920 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_MspInit+0x3c>)
{
 8001922:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001924:	699a      	ldr	r2, [r3, #24]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	619a      	str	r2, [r3, #24]
 800192c:	699a      	ldr	r2, [r3, #24]
 800192e:	f002 0201 	and.w	r2, r2, #1
 8001932:	9200      	str	r2, [sp, #0]
 8001934:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	69da      	ldr	r2, [r3, #28]
 8001938:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800193c:	61da      	str	r2, [r3, #28]
 800193e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800194a:	6853      	ldr	r3, [r2, #4]
 800194c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001950:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001954:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	b002      	add	sp, #8
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	40010000 	.word	0x40010000

08001964 <NMI_Handler>:
 8001964:	4770      	bx	lr

08001966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	e7fe      	b.n	8001968 <MemManage_Handler>

0800196a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196a:	e7fe      	b.n	800196a <BusFault_Handler>

0800196c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler>

0800196e <SVC_Handler>:
 800196e:	4770      	bx	lr

08001970 <DebugMon_Handler>:
 8001970:	4770      	bx	lr

08001972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001972:	4770      	bx	lr

08001974 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001974:	f000 b8b6 	b.w	8001ae4 <HAL_IncTick>

08001978 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <SystemInit+0x40>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	f042 0201 	orr.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <SystemInit+0x44>)
 8001986:	400a      	ands	r2, r1
 8001988:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001990:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001994:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800199c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80019a4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80019a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80019aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80019ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <SystemInit+0x48>)
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	f8ff0000 	.word	0xf8ff0000
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019c4:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_EVEN;
 80019c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  huart1.Init.BaudRate = 115200;
 80019ca:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 80019ce:	480a      	ldr	r0, [pc, #40]	; (80019f8 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <MX_USART1_UART_Init+0x38>)
  huart1.Init.Parity = UART_PARITY_EVEN;
 80019d2:	6102      	str	r2, [r0, #16]
  huart1.Init.BaudRate = 115200;
 80019d4:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019d8:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019dc:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019de:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019e0:	60c3      	str	r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019e6:	f001 f8ef 	bl	8002bc8 <HAL_UART_Init>
 80019ea:	b118      	cbz	r0, 80019f4 <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 80019ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80019f0:	f7ff bf94 	b.w	800191c <Error_Handler>
 80019f4:	bd08      	pop	{r3, pc}
 80019f6:	bf00      	nop
 80019f8:	20001704 	.word	0x20001704
 80019fc:	40013800 	.word	0x40013800

08001a00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a00:	b510      	push	{r4, lr}
 8001a02:	4604      	mov	r4, r0
 8001a04:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a06:	2210      	movs	r2, #16
 8001a08:	2100      	movs	r1, #0
 8001a0a:	a802      	add	r0, sp, #8
 8001a0c:	f001 f954 	bl	8002cb8 <memset>
  if(uartHandle->Instance==USART1)
 8001a10:	6822      	ldr	r2, [r4, #0]
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_UART_MspInit+0x70>)
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d128      	bne.n	8001a6a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a18:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001a1c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a24:	619a      	str	r2, [r3, #24]
 8001a26:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	4812      	ldr	r0, [pc, #72]	; (8001a74 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a2a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a2e:	9200      	str	r2, [sp, #0]
 8001a30:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	699a      	ldr	r2, [r3, #24]
 8001a34:	f042 0204 	orr.w	r2, r2, #4
 8001a38:	619a      	str	r2, [r3, #24]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a48:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f000 f8c7 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	a902      	add	r1, sp, #8
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f000 f8bd 	bl	8001be4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a6a:	b006      	add	sp, #24
 8001a6c:	bd10      	pop	{r4, pc}
 8001a6e:	bf00      	nop
 8001a70:	40013800 	.word	0x40013800
 8001a74:	40010800 	.word	0x40010800

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_InitTick+0x3c>)
{
 8001a7c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a7e:	7818      	ldrb	r0, [r3, #0]
 8001a80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a84:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a88:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <HAL_InitTick+0x40>)
 8001a8a:	6810      	ldr	r0, [r2, #0]
 8001a8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a90:	f000 f892 	bl	8001bb8 <HAL_SYSTICK_Config>
 8001a94:	4604      	mov	r4, r0
 8001a96:	b958      	cbnz	r0, 8001ab0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a98:	2d0f      	cmp	r5, #15
 8001a9a:	d809      	bhi.n	8001ab0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f000 f854 	bl	8001b50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_InitTick+0x44>)
 8001aaa:	4620      	mov	r0, r4
 8001aac:	601d      	str	r5, [r3, #0]
 8001aae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001ab0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001ab2:	bd38      	pop	{r3, r4, r5, pc}
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000008 	.word	0x20000008

08001ac0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_Init+0x20>)
{
 8001ac2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	f043 0310 	orr.w	r3, r3, #16
 8001acc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ace:	f000 f82d 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f7ff ffd0 	bl	8001a78 <HAL_InitTick>
  HAL_MspInit();
 8001ad8:	f7ff ff22 	bl	8001920 <HAL_MspInit>
}
 8001adc:	2000      	movs	r0, #0
 8001ade:	bd08      	pop	{r3, pc}
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ae4:	4a03      	ldr	r2, [pc, #12]	; (8001af4 <HAL_IncTick+0x10>)
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <HAL_IncTick+0x14>)
 8001ae8:	6811      	ldr	r1, [r2, #0]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	440b      	add	r3, r1
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20001744 	.word	0x20001744
 8001af8:	20000004 	.word	0x20000004

08001afc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001afc:	4b01      	ldr	r3, [pc, #4]	; (8001b04 <HAL_GetTick+0x8>)
 8001afe:	6818      	ldr	r0, [r3, #0]
}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20001744 	.word	0x20001744

08001b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b08:	b538      	push	{r3, r4, r5, lr}
 8001b0a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff fff6 	bl	8001afc <HAL_GetTick>
 8001b10:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b12:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001b14:	bf1e      	ittt	ne
 8001b16:	4b04      	ldrne	r3, [pc, #16]	; (8001b28 <HAL_Delay+0x20>)
 8001b18:	781b      	ldrbne	r3, [r3, #0]
 8001b1a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b1c:	f7ff ffee 	bl	8001afc <HAL_GetTick>
 8001b20:	1b40      	subs	r0, r0, r5
 8001b22:	4284      	cmp	r4, r0
 8001b24:	d8fa      	bhi.n	8001b1c <HAL_Delay+0x14>
  {
  }
}
 8001b26:	bd38      	pop	{r3, r4, r5, pc}
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001b2e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b30:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001b32:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b3a:	041b      	lsls	r3, r3, #16
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001b46:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001b48:	60d3      	str	r3, [r2, #12]
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b52:	b530      	push	{r4, r5, lr}
 8001b54:	68dc      	ldr	r4, [r3, #12]
 8001b56:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b5a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	bf28      	it	cs
 8001b64:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6c:	bf98      	it	ls
 8001b6e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	fa05 f303 	lsl.w	r3, r5, r3
 8001b74:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b78:	bf88      	it	hi
 8001b7a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4019      	ands	r1, r3
 8001b7e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b80:	fa05 f404 	lsl.w	r4, r5, r4
 8001b84:	3c01      	subs	r4, #1
 8001b86:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001b88:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8a:	ea42 0201 	orr.w	r2, r2, r1
 8001b8e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	bfaf      	iteee	ge
 8001b94:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	4b06      	ldrlt	r3, [pc, #24]	; (8001bb4 <HAL_NVIC_SetPriority+0x64>)
 8001b9a:	f000 000f 	andlt.w	r0, r0, #15
 8001b9e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	bfa5      	ittet	ge
 8001ba2:	b2d2      	uxtbge	r2, r2
 8001ba4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001baa:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001bae:	bd30      	pop	{r4, r5, pc}
 8001bb0:	e000ed00 	.word	0xe000ed00
 8001bb4:	e000ed14 	.word	0xe000ed14

08001bb8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb8:	3801      	subs	r0, #1
 8001bba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001bbe:	d20a      	bcs.n	8001bd6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bcc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bce:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e010 	.word	0xe000e010
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001be8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001bea:	4616      	mov	r6, r2
 8001bec:	4b65      	ldr	r3, [pc, #404]	; (8001d84 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bee:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001d94 <HAL_GPIO_Init+0x1b0>
 8001bf2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001d98 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001bf6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001bfc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c00:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001c04:	45a0      	cmp	r8, r4
 8001c06:	d17f      	bne.n	8001d08 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001c08:	684d      	ldr	r5, [r1, #4]
 8001c0a:	2d12      	cmp	r5, #18
 8001c0c:	f000 80af 	beq.w	8001d6e <HAL_GPIO_Init+0x18a>
 8001c10:	f200 8088 	bhi.w	8001d24 <HAL_GPIO_Init+0x140>
 8001c14:	2d02      	cmp	r5, #2
 8001c16:	f000 80a7 	beq.w	8001d68 <HAL_GPIO_Init+0x184>
 8001c1a:	d87c      	bhi.n	8001d16 <HAL_GPIO_Init+0x132>
 8001c1c:	2d00      	cmp	r5, #0
 8001c1e:	f000 808e 	beq.w	8001d3e <HAL_GPIO_Init+0x15a>
 8001c22:	2d01      	cmp	r5, #1
 8001c24:	f000 809e 	beq.w	8001d64 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c28:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c2c:	2cff      	cmp	r4, #255	; 0xff
 8001c2e:	bf93      	iteet	ls
 8001c30:	4682      	movls	sl, r0
 8001c32:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001c36:	3d08      	subhi	r5, #8
 8001c38:	f8d0 b000 	ldrls.w	fp, [r0]
 8001c3c:	bf92      	itee	ls
 8001c3e:	00b5      	lslls	r5, r6, #2
 8001c40:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001c44:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c46:	fa09 f805 	lsl.w	r8, r9, r5
 8001c4a:	ea2b 0808 	bic.w	r8, fp, r8
 8001c4e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c52:	bf88      	it	hi
 8001c54:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c58:	ea48 0505 	orr.w	r5, r8, r5
 8001c5c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c60:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001c64:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001c68:	d04e      	beq.n	8001d08 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c6a:	4d47      	ldr	r5, [pc, #284]	; (8001d88 <HAL_GPIO_Init+0x1a4>)
 8001c6c:	4f46      	ldr	r7, [pc, #280]	; (8001d88 <HAL_GPIO_Init+0x1a4>)
 8001c6e:	69ad      	ldr	r5, [r5, #24]
 8001c70:	f026 0803 	bic.w	r8, r6, #3
 8001c74:	f045 0501 	orr.w	r5, r5, #1
 8001c78:	61bd      	str	r5, [r7, #24]
 8001c7a:	69bd      	ldr	r5, [r7, #24]
 8001c7c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001c80:	f005 0501 	and.w	r5, r5, #1
 8001c84:	9501      	str	r5, [sp, #4]
 8001c86:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001c8a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c8e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001c90:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001c94:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001c98:	fa09 f90b 	lsl.w	r9, r9, fp
 8001c9c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca0:	4d3a      	ldr	r5, [pc, #232]	; (8001d8c <HAL_GPIO_Init+0x1a8>)
 8001ca2:	42a8      	cmp	r0, r5
 8001ca4:	d068      	beq.n	8001d78 <HAL_GPIO_Init+0x194>
 8001ca6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001caa:	42a8      	cmp	r0, r5
 8001cac:	d066      	beq.n	8001d7c <HAL_GPIO_Init+0x198>
 8001cae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cb2:	42a8      	cmp	r0, r5
 8001cb4:	d064      	beq.n	8001d80 <HAL_GPIO_Init+0x19c>
 8001cb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cba:	42a8      	cmp	r0, r5
 8001cbc:	bf0c      	ite	eq
 8001cbe:	2503      	moveq	r5, #3
 8001cc0:	2504      	movne	r5, #4
 8001cc2:	fa05 f50b 	lsl.w	r5, r5, fp
 8001cc6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001cca:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cce:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001cd4:	bf14      	ite	ne
 8001cd6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cd8:	43a5      	biceq	r5, r4
 8001cda:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cdc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cde:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001ce2:	bf14      	ite	ne
 8001ce4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ce6:	43a5      	biceq	r5, r4
 8001ce8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cea:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cec:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cf0:	bf14      	ite	ne
 8001cf2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cf4:	43a5      	biceq	r5, r4
 8001cf6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cfa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cfe:	bf14      	ite	ne
 8001d00:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d02:	ea25 0404 	biceq.w	r4, r5, r4
 8001d06:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001d08:	3601      	adds	r6, #1
 8001d0a:	2e10      	cmp	r6, #16
 8001d0c:	f47f af73 	bne.w	8001bf6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001d10:	b003      	add	sp, #12
 8001d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001d16:	2d03      	cmp	r5, #3
 8001d18:	d022      	beq.n	8001d60 <HAL_GPIO_Init+0x17c>
 8001d1a:	2d11      	cmp	r5, #17
 8001d1c:	d184      	bne.n	8001c28 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d1e:	68ca      	ldr	r2, [r1, #12]
 8001d20:	3204      	adds	r2, #4
          break;
 8001d22:	e781      	b.n	8001c28 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001d24:	4f1a      	ldr	r7, [pc, #104]	; (8001d90 <HAL_GPIO_Init+0x1ac>)
 8001d26:	42bd      	cmp	r5, r7
 8001d28:	d009      	beq.n	8001d3e <HAL_GPIO_Init+0x15a>
 8001d2a:	d812      	bhi.n	8001d52 <HAL_GPIO_Init+0x16e>
 8001d2c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001d9c <HAL_GPIO_Init+0x1b8>
 8001d30:	454d      	cmp	r5, r9
 8001d32:	d004      	beq.n	8001d3e <HAL_GPIO_Init+0x15a>
 8001d34:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001d38:	454d      	cmp	r5, r9
 8001d3a:	f47f af75 	bne.w	8001c28 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d3e:	688a      	ldr	r2, [r1, #8]
 8001d40:	b1c2      	cbz	r2, 8001d74 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d42:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001d44:	bf0c      	ite	eq
 8001d46:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001d4a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d4e:	2208      	movs	r2, #8
 8001d50:	e76a      	b.n	8001c28 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001d52:	4575      	cmp	r5, lr
 8001d54:	d0f3      	beq.n	8001d3e <HAL_GPIO_Init+0x15a>
 8001d56:	4565      	cmp	r5, ip
 8001d58:	d0f1      	beq.n	8001d3e <HAL_GPIO_Init+0x15a>
 8001d5a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001da0 <HAL_GPIO_Init+0x1bc>
 8001d5e:	e7eb      	b.n	8001d38 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d60:	2200      	movs	r2, #0
 8001d62:	e761      	b.n	8001c28 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d64:	68ca      	ldr	r2, [r1, #12]
          break;
 8001d66:	e75f      	b.n	8001c28 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d68:	68ca      	ldr	r2, [r1, #12]
 8001d6a:	3208      	adds	r2, #8
          break;
 8001d6c:	e75c      	b.n	8001c28 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d6e:	68ca      	ldr	r2, [r1, #12]
 8001d70:	320c      	adds	r2, #12
          break;
 8001d72:	e759      	b.n	8001c28 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d74:	2204      	movs	r2, #4
 8001d76:	e757      	b.n	8001c28 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d78:	2500      	movs	r5, #0
 8001d7a:	e7a2      	b.n	8001cc2 <HAL_GPIO_Init+0xde>
 8001d7c:	2501      	movs	r5, #1
 8001d7e:	e7a0      	b.n	8001cc2 <HAL_GPIO_Init+0xde>
 8001d80:	2502      	movs	r5, #2
 8001d82:	e79e      	b.n	8001cc2 <HAL_GPIO_Init+0xde>
 8001d84:	40010400 	.word	0x40010400
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40010800 	.word	0x40010800
 8001d90:	10210000 	.word	0x10210000
 8001d94:	10310000 	.word	0x10310000
 8001d98:	10320000 	.word	0x10320000
 8001d9c:	10110000 	.word	0x10110000
 8001da0:	10220000 	.word	0x10220000

08001da4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001da4:	b10a      	cbz	r2, 8001daa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da6:	6101      	str	r1, [r0, #16]
 8001da8:	4770      	bx	lr
 8001daa:	0409      	lsls	r1, r1, #16
 8001dac:	e7fb      	b.n	8001da6 <HAL_GPIO_WritePin+0x2>

08001dae <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dae:	6802      	ldr	r2, [r0, #0]
 8001db0:	6953      	ldr	r3, [r2, #20]
 8001db2:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001db6:	d00d      	beq.n	8001dd4 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001dbc:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001dbe:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001dc0:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001dc2:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001dcc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	4770      	bx	lr
  }
  return HAL_OK;
 8001dd4:	4618      	mov	r0, r3
}
 8001dd6:	4770      	bx	lr

08001dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ddc:	4604      	mov	r4, r0
 8001dde:	4617      	mov	r7, r2
 8001de0:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001de2:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001de6:	b28e      	uxth	r6, r1
 8001de8:	6825      	ldr	r5, [r4, #0]
 8001dea:	f1b8 0f01 	cmp.w	r8, #1
 8001dee:	bf0c      	ite	eq
 8001df0:	696b      	ldreq	r3, [r5, #20]
 8001df2:	69ab      	ldrne	r3, [r5, #24]
 8001df4:	ea36 0303 	bics.w	r3, r6, r3
 8001df8:	bf14      	ite	ne
 8001dfa:	2001      	movne	r0, #1
 8001dfc:	2000      	moveq	r0, #0
 8001dfe:	b908      	cbnz	r0, 8001e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e04:	696b      	ldr	r3, [r5, #20]
 8001e06:	055a      	lsls	r2, r3, #21
 8001e08:	d512      	bpl.n	8001e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e0a:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001e0c:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e12:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e14:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001e18:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e1e:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001e20:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e22:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001e24:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001e28:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001e30:	1c7b      	adds	r3, r7, #1
 8001e32:	d0d9      	beq.n	8001de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001e34:	b94f      	cbnz	r7, 8001e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e36:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001e38:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e3a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001e3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001e40:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001e44:	2003      	movs	r0, #3
 8001e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001e4a:	f7ff fe57 	bl	8001afc <HAL_GetTick>
 8001e4e:	eba0 0009 	sub.w	r0, r0, r9
 8001e52:	4287      	cmp	r7, r0
 8001e54:	d2c8      	bcs.n	8001de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001e56:	e7ee      	b.n	8001e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001e58 <I2C_WaitOnFlagUntilTimeout>:
{
 8001e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	4690      	mov	r8, r2
 8001e60:	461f      	mov	r7, r3
 8001e62:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001e64:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001e68:	b28d      	uxth	r5, r1
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	f1b9 0f01 	cmp.w	r9, #1
 8001e70:	bf0c      	ite	eq
 8001e72:	695b      	ldreq	r3, [r3, #20]
 8001e74:	699b      	ldrne	r3, [r3, #24]
 8001e76:	ea35 0303 	bics.w	r3, r5, r3
 8001e7a:	bf0c      	ite	eq
 8001e7c:	2301      	moveq	r3, #1
 8001e7e:	2300      	movne	r3, #0
 8001e80:	4543      	cmp	r3, r8
 8001e82:	d002      	beq.n	8001e8a <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001e84:	2000      	movs	r0, #0
}
 8001e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001e8a:	1c7b      	adds	r3, r7, #1
 8001e8c:	d0ed      	beq.n	8001e6a <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001e8e:	b95f      	cbnz	r7, 8001ea8 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e90:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001e92:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e94:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001e96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001e9a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001e9e:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001ea8:	f7ff fe28 	bl	8001afc <HAL_GetTick>
 8001eac:	1b80      	subs	r0, r0, r6
 8001eae:	4287      	cmp	r7, r0
 8001eb0:	d2db      	bcs.n	8001e6a <I2C_WaitOnFlagUntilTimeout+0x12>
 8001eb2:	e7ed      	b.n	8001e90 <I2C_WaitOnFlagUntilTimeout+0x38>

08001eb4 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001eb4:	b570      	push	{r4, r5, r6, lr}
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	460d      	mov	r5, r1
 8001eba:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	d501      	bpl.n	8001ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7ff ff70 	bl	8001dae <I2C_IsAcknowledgeFailed>
 8001ece:	b9a8      	cbnz	r0, 8001efc <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001ed0:	1c6a      	adds	r2, r5, #1
 8001ed2:	d0f3      	beq.n	8001ebc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ed4:	b965      	cbnz	r5, 8001ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ed6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001ed8:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eda:	f043 0320 	orr.w	r3, r3, #32
 8001ede:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ee0:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001ee2:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ee4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001ee6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001eea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001eee:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ef0:	f7ff fe04 	bl	8001afc <HAL_GetTick>
 8001ef4:	1b80      	subs	r0, r0, r6
 8001ef6:	4285      	cmp	r5, r0
 8001ef8:	d2e0      	bcs.n	8001ebc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001efa:	e7ec      	b.n	8001ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001efc:	2001      	movs	r0, #1
}
 8001efe:	bd70      	pop	{r4, r5, r6, pc}

08001f00 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001f00:	b570      	push	{r4, r5, r6, lr}
 8001f02:	4604      	mov	r4, r0
 8001f04:	460d      	mov	r5, r1
 8001f06:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f08:	6820      	ldr	r0, [r4, #0]
 8001f0a:	6943      	ldr	r3, [r0, #20]
 8001f0c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001f10:	d001      	beq.n	8001f16 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001f12:	2000      	movs	r0, #0
}
 8001f14:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f16:	6942      	ldr	r2, [r0, #20]
 8001f18:	06d2      	lsls	r2, r2, #27
 8001f1a:	d50b      	bpl.n	8001f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f1c:	f06f 0210 	mvn.w	r2, #16
 8001f20:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001f22:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f24:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001f26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f2a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001f2c:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001f2e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001f32:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001f34:	b95d      	cbnz	r5, 8001f4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001f38:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f3a:	f043 0320 	orr.w	r3, r3, #32
 8001f3e:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001f40:	2320      	movs	r3, #32
 8001f42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001f46:	2300      	movs	r3, #0
 8001f48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001f4e:	f7ff fdd5 	bl	8001afc <HAL_GetTick>
 8001f52:	1b80      	subs	r0, r0, r6
 8001f54:	4285      	cmp	r5, r0
 8001f56:	d2d7      	bcs.n	8001f08 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001f58:	e7ed      	b.n	8001f36 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001f5a <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001f5a:	b570      	push	{r4, r5, r6, lr}
 8001f5c:	4604      	mov	r4, r0
 8001f5e:	460d      	mov	r5, r1
 8001f60:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	075b      	lsls	r3, r3, #29
 8001f68:	d501      	bpl.n	8001f6e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f7ff ff1d 	bl	8001dae <I2C_IsAcknowledgeFailed>
 8001f74:	b9a8      	cbnz	r0, 8001fa2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001f76:	1c6a      	adds	r2, r5, #1
 8001f78:	d0f3      	beq.n	8001f62 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001f7a:	b965      	cbnz	r5, 8001f96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001f7e:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f80:	f043 0320 	orr.w	r3, r3, #32
 8001f84:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f86:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001f88:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f8a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001f8c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001f90:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001f94:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001f96:	f7ff fdb1 	bl	8001afc <HAL_GetTick>
 8001f9a:	1b80      	subs	r0, r0, r6
 8001f9c:	4285      	cmp	r5, r0
 8001f9e:	d2e0      	bcs.n	8001f62 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001fa0:	e7ec      	b.n	8001f7c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001fa2:	2001      	movs	r0, #1
}
 8001fa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08001fa8 <HAL_I2C_Init>:
{
 8001fa8:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8001faa:	4604      	mov	r4, r0
 8001fac:	b908      	cbnz	r0, 8001fb2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001fae:	2001      	movs	r0, #1
 8001fb0:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001fb2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001fb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fba:	b91b      	cbnz	r3, 8001fc4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001fbc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001fc0:	f7ff fa24 	bl	800140c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc4:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001fc6:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001fcc:	6813      	ldr	r3, [r2, #0]
 8001fce:	f023 0301 	bic.w	r3, r3, #1
 8001fd2:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fd4:	f000 fd3a 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fd8:	6863      	ldr	r3, [r4, #4]
 8001fda:	4a2f      	ldr	r2, [pc, #188]	; (8002098 <HAL_I2C_Init+0xf0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d830      	bhi.n	8002042 <HAL_I2C_Init+0x9a>
 8001fe0:	4a2e      	ldr	r2, [pc, #184]	; (800209c <HAL_I2C_Init+0xf4>)
 8001fe2:	4290      	cmp	r0, r2
 8001fe4:	d9e3      	bls.n	8001fae <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001fe6:	4a2e      	ldr	r2, [pc, #184]	; (80020a0 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001fe8:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001fea:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8001fee:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ff0:	3201      	adds	r2, #1
 8001ff2:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001ff4:	4a28      	ldr	r2, [pc, #160]	; (8002098 <HAL_I2C_Init+0xf0>)
 8001ff6:	3801      	subs	r0, #1
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d832      	bhi.n	8002062 <HAL_I2C_Init+0xba>
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fbb0 f0f3 	udiv	r0, r0, r3
 8002002:	1c43      	adds	r3, r0, #1
 8002004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002008:	2b04      	cmp	r3, #4
 800200a:	bf38      	it	cc
 800200c:	2304      	movcc	r3, #4
 800200e:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002010:	6a22      	ldr	r2, [r4, #32]
 8002012:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002014:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800201a:	68e2      	ldr	r2, [r4, #12]
 800201c:	6923      	ldr	r3, [r4, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002022:	69a2      	ldr	r2, [r4, #24]
 8002024:	6963      	ldr	r3, [r4, #20]
 8002026:	4313      	orrs	r3, r2
 8002028:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800202a:	680b      	ldr	r3, [r1, #0]
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002032:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002034:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002036:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800203a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800203c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002040:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002042:	4a18      	ldr	r2, [pc, #96]	; (80020a4 <HAL_I2C_Init+0xfc>)
 8002044:	4290      	cmp	r0, r2
 8002046:	d9b2      	bls.n	8001fae <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8002048:	4d15      	ldr	r5, [pc, #84]	; (80020a0 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800204a:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800204e:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8002052:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002054:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8002056:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002058:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800205c:	fbb2 f2f5 	udiv	r2, r2, r5
 8002060:	e7c6      	b.n	8001ff0 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002062:	68a2      	ldr	r2, [r4, #8]
 8002064:	b952      	cbnz	r2, 800207c <HAL_I2C_Init+0xd4>
 8002066:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800206a:	fbb0 f0f3 	udiv	r0, r0, r3
 800206e:	1c43      	adds	r3, r0, #1
 8002070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002074:	b16b      	cbz	r3, 8002092 <HAL_I2C_Init+0xea>
 8002076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800207a:	e7c8      	b.n	800200e <HAL_I2C_Init+0x66>
 800207c:	2219      	movs	r2, #25
 800207e:	4353      	muls	r3, r2
 8002080:	fbb0 f0f3 	udiv	r0, r0, r3
 8002084:	1c43      	adds	r3, r0, #1
 8002086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208a:	b113      	cbz	r3, 8002092 <HAL_I2C_Init+0xea>
 800208c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002090:	e7bd      	b.n	800200e <HAL_I2C_Init+0x66>
 8002092:	2301      	movs	r3, #1
 8002094:	e7bb      	b.n	800200e <HAL_I2C_Init+0x66>
 8002096:	bf00      	nop
 8002098:	000186a0 	.word	0x000186a0
 800209c:	001e847f 	.word	0x001e847f
 80020a0:	000f4240 	.word	0x000f4240
 80020a4:	003d08ff 	.word	0x003d08ff

080020a8 <HAL_I2C_Master_Transmit>:
{
 80020a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80020ac:	4604      	mov	r4, r0
 80020ae:	461f      	mov	r7, r3
 80020b0:	460d      	mov	r5, r1
 80020b2:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80020b4:	f7ff fd22 	bl	8001afc <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80020b8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80020bc:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80020be:	2b20      	cmp	r3, #32
 80020c0:	d004      	beq.n	80020cc <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80020c2:	2502      	movs	r5, #2
}
 80020c4:	4628      	mov	r0, r5
 80020c6:	b004      	add	sp, #16
 80020c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020cc:	9000      	str	r0, [sp, #0]
 80020ce:	2319      	movs	r3, #25
 80020d0:	2201      	movs	r2, #1
 80020d2:	495d      	ldr	r1, [pc, #372]	; (8002248 <HAL_I2C_Master_Transmit+0x1a0>)
 80020d4:	4620      	mov	r0, r4
 80020d6:	f7ff febf 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 80020da:	2800      	cmp	r0, #0
 80020dc:	d1f1      	bne.n	80020c2 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80020de:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d0ed      	beq.n	80020c2 <HAL_I2C_Master_Transmit+0x1a>
 80020e6:	2301      	movs	r3, #1
 80020e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80020f2:	bf5e      	ittt	pl
 80020f4:	681a      	ldrpl	r2, [r3, #0]
 80020f6:	f042 0201 	orrpl.w	r2, r2, #1
 80020fa:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002102:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002104:	2221      	movs	r2, #33	; 0x21
 8002106:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800210a:	2210      	movs	r2, #16
 800210c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002110:	2200      	movs	r2, #0
 8002112:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002114:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8002118:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800211a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800211c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800211e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002122:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002124:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002126:	2a04      	cmp	r2, #4
 8002128:	d004      	beq.n	8002134 <HAL_I2C_Master_Transmit+0x8c>
 800212a:	2a01      	cmp	r2, #1
 800212c:	d002      	beq.n	8002134 <HAL_I2C_Master_Transmit+0x8c>
 800212e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002132:	d104      	bne.n	800213e <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e002      	b.n	8002144 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800213e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002140:	2a12      	cmp	r2, #18
 8002142:	d0f7      	beq.n	8002134 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002144:	9600      	str	r6, [sp, #0]
 8002146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002148:	2200      	movs	r2, #0
 800214a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800214e:	4620      	mov	r0, r4
 8002150:	f7ff fe82 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 8002154:	bb28      	cbnz	r0, 80021a2 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002156:	6923      	ldr	r3, [r4, #16]
 8002158:	6822      	ldr	r2, [r4, #0]
 800215a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800215e:	d112      	bne.n	8002186 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002160:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002164:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002166:	4633      	mov	r3, r6
 8002168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800216a:	4938      	ldr	r1, [pc, #224]	; (800224c <HAL_I2C_Master_Transmit+0x1a4>)
 800216c:	4620      	mov	r0, r4
 800216e:	f7ff fe33 	bl	8001dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002172:	4605      	mov	r5, r0
 8002174:	b9a0      	cbnz	r0, 80021a0 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	9003      	str	r0, [sp, #12]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	9203      	str	r2, [sp, #12]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	9303      	str	r3, [sp, #12]
 8002182:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8002184:	e050      	b.n	8002228 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002186:	11eb      	asrs	r3, r5, #7
 8002188:	f003 0306 	and.w	r3, r3, #6
 800218c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002190:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002192:	492f      	ldr	r1, [pc, #188]	; (8002250 <HAL_I2C_Master_Transmit+0x1a8>)
 8002194:	4633      	mov	r3, r6
 8002196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002198:	4620      	mov	r0, r4
 800219a:	f7ff fe1d 	bl	8001dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800219e:	b148      	cbz	r0, 80021b4 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	d107      	bne.n	80021bc <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 80021ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80021b0:	2501      	movs	r5, #1
 80021b2:	e787      	b.n	80020c4 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	b2ed      	uxtb	r5, r5
 80021b8:	611d      	str	r5, [r3, #16]
 80021ba:	e7d4      	b.n	8002166 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 80021bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80021c0:	2503      	movs	r5, #3
 80021c2:	e77f      	b.n	80020c4 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c4:	4632      	mov	r2, r6
 80021c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7ff fe73 	bl	8001eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80021ce:	b140      	cbz	r0, 80021e2 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d1f4      	bne.n	80021c0 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021d6:	6822      	ldr	r2, [r4, #0]
 80021d8:	6813      	ldr	r3, [r2, #0]
 80021da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	e7e6      	b.n	80021b0 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80021e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80021e4:	6820      	ldr	r0, [r4, #0]
 80021e6:	1c4b      	adds	r3, r1, #1
 80021e8:	6263      	str	r3, [r4, #36]	; 0x24
 80021ea:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80021ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80021ee:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80021f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021f8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80021fa:	1e53      	subs	r3, r2, #1
 80021fc:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021fe:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8002200:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002202:	d50a      	bpl.n	800221a <HAL_I2C_Master_Transmit+0x172>
 8002204:	b14b      	cbz	r3, 800221a <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002206:	1c8b      	adds	r3, r1, #2
 8002208:	6263      	str	r3, [r4, #36]	; 0x24
 800220a:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 800220c:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800220e:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8002210:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002212:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002214:	3b01      	subs	r3, #1
 8002216:	b29b      	uxth	r3, r3
 8002218:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221a:	4632      	mov	r2, r6
 800221c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800221e:	4620      	mov	r0, r4
 8002220:	f7ff fe9b 	bl	8001f5a <I2C_WaitOnBTFFlagUntilTimeout>
 8002224:	2800      	cmp	r0, #0
 8002226:	d1d3      	bne.n	80021d0 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8002228:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1ca      	bne.n	80021c4 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800222e:	6821      	ldr	r1, [r4, #0]
 8002230:	680a      	ldr	r2, [r1, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002236:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002238:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800223a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800223e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002242:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002246:	e73d      	b.n	80020c4 <HAL_I2C_Master_Transmit+0x1c>
 8002248:	00100002 	.word	0x00100002
 800224c:	00010002 	.word	0x00010002
 8002250:	00010008 	.word	0x00010008

08002254 <HAL_I2C_Master_Receive>:
{
 8002254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002258:	4604      	mov	r4, r0
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	4698      	mov	r8, r3
 800225e:	460d      	mov	r5, r1
 8002260:	4691      	mov	r9, r2
 8002262:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002264:	f7ff fc4a 	bl	8001afc <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002268:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800226c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800226e:	2b20      	cmp	r3, #32
 8002270:	d004      	beq.n	800227c <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8002272:	2502      	movs	r5, #2
}
 8002274:	4628      	mov	r0, r5
 8002276:	b009      	add	sp, #36	; 0x24
 8002278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800227c:	9000      	str	r0, [sp, #0]
 800227e:	2319      	movs	r3, #25
 8002280:	2201      	movs	r2, #1
 8002282:	49a2      	ldr	r1, [pc, #648]	; (800250c <HAL_I2C_Master_Receive+0x2b8>)
 8002284:	4620      	mov	r0, r4
 8002286:	f7ff fde7 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 800228a:	2800      	cmp	r0, #0
 800228c:	d1f1      	bne.n	8002272 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800228e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002292:	2b01      	cmp	r3, #1
 8002294:	d0ed      	beq.n	8002272 <HAL_I2C_Master_Receive+0x1e>
 8002296:	2301      	movs	r3, #1
 8002298:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80022a2:	bf5e      	ittt	pl
 80022a4:	681a      	ldrpl	r2, [r3, #0]
 80022a6:	f042 0201 	orrpl.w	r2, r2, #1
 80022aa:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b2:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022b4:	2222      	movs	r2, #34	; 0x22
 80022b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ba:	2210      	movs	r2, #16
 80022bc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022c0:	2200      	movs	r2, #0
 80022c2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022c4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80022c8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022cc:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80022ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80022d0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80022d4:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80022d8:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022da:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80022dc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80022e0:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022e2:	d004      	beq.n	80022ee <HAL_I2C_Master_Receive+0x9a>
 80022e4:	2a01      	cmp	r2, #1
 80022e6:	d002      	beq.n	80022ee <HAL_I2C_Master_Receive+0x9a>
 80022e8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80022ec:	d104      	bne.n	80022f8 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	e002      	b.n	80022fe <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80022f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80022fa:	2a11      	cmp	r2, #17
 80022fc:	d0f7      	beq.n	80022ee <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022fe:	9600      	str	r6, [sp, #0]
 8002300:	463b      	mov	r3, r7
 8002302:	2200      	movs	r2, #0
 8002304:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002308:	4620      	mov	r0, r4
 800230a:	f7ff fda5 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 800230e:	2800      	cmp	r0, #0
 8002310:	d14d      	bne.n	80023ae <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002312:	6923      	ldr	r3, [r4, #16]
 8002314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	d139      	bne.n	8002390 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800231c:	f045 0501 	orr.w	r5, r5, #1
 8002320:	b2ed      	uxtb	r5, r5
 8002322:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002324:	4633      	mov	r3, r6
 8002326:	463a      	mov	r2, r7
 8002328:	4979      	ldr	r1, [pc, #484]	; (8002510 <HAL_I2C_Master_Receive+0x2bc>)
 800232a:	4620      	mov	r0, r4
 800232c:	f7ff fd54 	bl	8001dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002330:	4605      	mov	r5, r0
 8002332:	2800      	cmp	r0, #0
 8002334:	d13a      	bne.n	80023ac <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8002336:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002338:	6823      	ldr	r3, [r4, #0]
 800233a:	2a00      	cmp	r2, #0
 800233c:	d069      	beq.n	8002412 <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 800233e:	2a01      	cmp	r2, #1
 8002340:	d17a      	bne.n	8002438 <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002348:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800234a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	9504      	str	r5, [sp, #16]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	9204      	str	r2, [sp, #16]
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	9204      	str	r2, [sp, #16]
 8002358:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002360:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002362:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002364:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002518 <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 8002368:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800236a:	2b00      	cmp	r3, #0
 800236c:	d05b      	beq.n	8002426 <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 800236e:	2b03      	cmp	r3, #3
 8002370:	f200 80d4 	bhi.w	800251c <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8002374:	2b01      	cmp	r3, #1
 8002376:	d17b      	bne.n	8002470 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002378:	4632      	mov	r2, r6
 800237a:	4639      	mov	r1, r7
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff fdbf 	bl	8001f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002382:	2800      	cmp	r0, #0
 8002384:	f000 8093 	beq.w	80024ae <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002388:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800238a:	2b20      	cmp	r3, #32
 800238c:	d116      	bne.n	80023bc <HAL_I2C_Master_Receive+0x168>
 800238e:	e03e      	b.n	800240e <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002390:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8002394:	f008 0806 	and.w	r8, r8, #6
 8002398:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800239c:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800239e:	495d      	ldr	r1, [pc, #372]	; (8002514 <HAL_I2C_Master_Receive+0x2c0>)
 80023a0:	4633      	mov	r3, r6
 80023a2:	463a      	mov	r2, r7
 80023a4:	4620      	mov	r0, r4
 80023a6:	f7ff fd17 	bl	8001dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023aa:	b148      	cbz	r0, 80023c0 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	d128      	bne.n	800240a <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 80023b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 80023bc:	2501      	movs	r5, #1
 80023be:	e759      	b.n	8002274 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	b2ed      	uxtb	r5, r5
 80023c4:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c6:	463a      	mov	r2, r7
 80023c8:	4633      	mov	r3, r6
 80023ca:	4951      	ldr	r1, [pc, #324]	; (8002510 <HAL_I2C_Master_Receive+0x2bc>)
 80023cc:	4620      	mov	r0, r4
 80023ce:	f7ff fd03 	bl	8001dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d2:	4602      	mov	r2, r0
 80023d4:	2800      	cmp	r0, #0
 80023d6:	d1e9      	bne.n	80023ac <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	9007      	str	r0, [sp, #28]
 80023dc:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023de:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e0:	9107      	str	r1, [sp, #28]
 80023e2:	6999      	ldr	r1, [r3, #24]
 80023e4:	9107      	str	r1, [sp, #28]
 80023e6:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80023e8:	6819      	ldr	r1, [r3, #0]
 80023ea:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80023ee:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023f0:	9600      	str	r6, [sp, #0]
 80023f2:	463b      	mov	r3, r7
 80023f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023f8:	f7ff fd2e 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d1d6      	bne.n	80023ae <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002400:	6822      	ldr	r2, [r4, #0]
 8002402:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8002406:	6113      	str	r3, [r2, #16]
 8002408:	e78c      	b.n	8002324 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 800240a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 800240e:	2503      	movs	r5, #3
 8002410:	e730      	b.n	8002274 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002412:	9503      	str	r5, [sp, #12]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	9203      	str	r2, [sp, #12]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	9203      	str	r2, [sp, #12]
 800241c:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002424:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002426:	2320      	movs	r3, #32
 8002428:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	2300      	movs	r3, #0
 800242e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002432:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002436:	e71d      	b.n	8002274 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8002438:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800243a:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 800243c:	d10e      	bne.n	800245c <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800243e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002442:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002444:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	9505      	str	r5, [sp, #20]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	9205      	str	r2, [sp, #20]
 800244e:	699a      	ldr	r2, [r3, #24]
 8002450:	9205      	str	r2, [sp, #20]
 8002452:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245a:	e781      	b.n	8002360 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800245c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002460:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002462:	9506      	str	r5, [sp, #24]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	9206      	str	r2, [sp, #24]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	9306      	str	r3, [sp, #24]
 800246c:	9b06      	ldr	r3, [sp, #24]
 800246e:	e779      	b.n	8002364 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8002470:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002472:	9600      	str	r6, [sp, #0]
 8002474:	463b      	mov	r3, r7
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4641      	mov	r1, r8
 800247c:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 800247e:	d124      	bne.n	80024ca <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002480:	f7ff fcea 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 8002484:	2800      	cmp	r0, #0
 8002486:	d1c2      	bne.n	800240e <HAL_I2C_Master_Receive+0x1ba>
 8002488:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002492:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002494:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	1c51      	adds	r1, r2, #1
 800249a:	6261      	str	r1, [r4, #36]	; 0x24
 800249c:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 800249e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80024a0:	3b01      	subs	r3, #1
 80024a2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80024a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024ac:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	6262      	str	r2, [r4, #36]	; 0x24
 80024b4:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024b6:	6912      	ldr	r2, [r2, #16]
 80024b8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80024ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80024bc:	3b01      	subs	r3, #1
 80024be:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80024c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80024c8:	e74e      	b.n	8002368 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ca:	f7ff fcc5 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 80024ce:	4602      	mov	r2, r0
 80024d0:	2800      	cmp	r0, #0
 80024d2:	d19c      	bne.n	800240e <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80024d4:	6821      	ldr	r1, [r4, #0]
 80024d6:	680b      	ldr	r3, [r1, #0]
 80024d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024dc:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024de:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024e2:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024e4:	1c59      	adds	r1, r3, #1
 80024e6:	6261      	str	r1, [r4, #36]	; 0x24
 80024e8:	6821      	ldr	r1, [r4, #0]
 80024ea:	6909      	ldr	r1, [r1, #16]
 80024ec:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 80024ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024f0:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 80024f2:	3b01      	subs	r3, #1
 80024f4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80024f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024f8:	4641      	mov	r1, r8
          hi2c->XferCount--;
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002500:	463b      	mov	r3, r7
 8002502:	f7ff fca9 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 8002506:	2800      	cmp	r0, #0
 8002508:	d0bf      	beq.n	800248a <HAL_I2C_Master_Receive+0x236>
 800250a:	e780      	b.n	800240e <HAL_I2C_Master_Receive+0x1ba>
 800250c:	00100002 	.word	0x00100002
 8002510:	00010002 	.word	0x00010002
 8002514:	00010008 	.word	0x00010008
 8002518:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800251c:	4632      	mov	r2, r6
 800251e:	4639      	mov	r1, r7
 8002520:	4620      	mov	r0, r4
 8002522:	f7ff fced 	bl	8001f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002526:	2800      	cmp	r0, #0
 8002528:	f47f af2e 	bne.w	8002388 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800252c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	6262      	str	r2, [r4, #36]	; 0x24
 8002532:	6822      	ldr	r2, [r4, #0]
 8002534:	6912      	ldr	r2, [r2, #16]
 8002536:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002538:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800253a:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 800253c:	3b01      	subs	r3, #1
 800253e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002540:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002542:	3b01      	subs	r3, #1
 8002544:	b29b      	uxth	r3, r3
 8002546:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002548:	6953      	ldr	r3, [r2, #20]
 800254a:	075b      	lsls	r3, r3, #29
 800254c:	f57f af0c 	bpl.w	8002368 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002552:	1c59      	adds	r1, r3, #1
 8002554:	6261      	str	r1, [r4, #36]	; 0x24
 8002556:	e7ae      	b.n	80024b6 <HAL_I2C_Master_Receive+0x262>

08002558 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002558:	6803      	ldr	r3, [r0, #0]
{
 800255a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255e:	07db      	lsls	r3, r3, #31
{
 8002560:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002562:	d410      	bmi.n	8002586 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002564:	682b      	ldr	r3, [r5, #0]
 8002566:	079f      	lsls	r7, r3, #30
 8002568:	d45e      	bmi.n	8002628 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256a:	682b      	ldr	r3, [r5, #0]
 800256c:	0719      	lsls	r1, r3, #28
 800256e:	f100 8095 	bmi.w	800269c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002572:	682b      	ldr	r3, [r5, #0]
 8002574:	075a      	lsls	r2, r3, #29
 8002576:	f100 80bf 	bmi.w	80026f8 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257a:	69ea      	ldr	r2, [r5, #28]
 800257c:	2a00      	cmp	r2, #0
 800257e:	f040 812d 	bne.w	80027dc <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002582:	2000      	movs	r0, #0
 8002584:	e014      	b.n	80025b0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002586:	4c90      	ldr	r4, [pc, #576]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002588:	6863      	ldr	r3, [r4, #4]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b04      	cmp	r3, #4
 8002590:	d007      	beq.n	80025a2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002592:	6863      	ldr	r3, [r4, #4]
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	2b08      	cmp	r3, #8
 800259a:	d10c      	bne.n	80025b6 <HAL_RCC_OscConfig+0x5e>
 800259c:	6863      	ldr	r3, [r4, #4]
 800259e:	03de      	lsls	r6, r3, #15
 80025a0:	d509      	bpl.n	80025b6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	039c      	lsls	r4, r3, #14
 80025a6:	d5dd      	bpl.n	8002564 <HAL_RCC_OscConfig+0xc>
 80025a8:	686b      	ldr	r3, [r5, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1da      	bne.n	8002564 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80025ae:	2001      	movs	r0, #1
}
 80025b0:	b002      	add	sp, #8
 80025b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b6:	686b      	ldr	r3, [r5, #4]
 80025b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025bc:	d110      	bne.n	80025e0 <HAL_RCC_OscConfig+0x88>
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80025c6:	f7ff fa99 	bl	8001afc <HAL_GetTick>
 80025ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	0398      	lsls	r0, r3, #14
 80025d0:	d4c8      	bmi.n	8002564 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d2:	f7ff fa93 	bl	8001afc <HAL_GetTick>
 80025d6:	1b80      	subs	r0, r0, r6
 80025d8:	2864      	cmp	r0, #100	; 0x64
 80025da:	d9f7      	bls.n	80025cc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80025dc:	2003      	movs	r0, #3
 80025de:	e7e7      	b.n	80025b0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e0:	b99b      	cbnz	r3, 800260a <HAL_RCC_OscConfig+0xb2>
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e8:	6023      	str	r3, [r4, #0]
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80025f2:	f7ff fa83 	bl	8001afc <HAL_GetTick>
 80025f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	0399      	lsls	r1, r3, #14
 80025fc:	d5b2      	bpl.n	8002564 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025fe:	f7ff fa7d 	bl	8001afc <HAL_GetTick>
 8002602:	1b80      	subs	r0, r0, r6
 8002604:	2864      	cmp	r0, #100	; 0x64
 8002606:	d9f7      	bls.n	80025f8 <HAL_RCC_OscConfig+0xa0>
 8002608:	e7e8      	b.n	80025dc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	d103      	bne.n	800261a <HAL_RCC_OscConfig+0xc2>
 8002612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002616:	6023      	str	r3, [r4, #0]
 8002618:	e7d1      	b.n	80025be <HAL_RCC_OscConfig+0x66>
 800261a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261e:	6023      	str	r3, [r4, #0]
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002626:	e7cd      	b.n	80025c4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002628:	4c67      	ldr	r4, [pc, #412]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 800262a:	6863      	ldr	r3, [r4, #4]
 800262c:	f013 0f0c 	tst.w	r3, #12
 8002630:	d007      	beq.n	8002642 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002632:	6863      	ldr	r3, [r4, #4]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d110      	bne.n	800265e <HAL_RCC_OscConfig+0x106>
 800263c:	6863      	ldr	r3, [r4, #4]
 800263e:	03da      	lsls	r2, r3, #15
 8002640:	d40d      	bmi.n	800265e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	079b      	lsls	r3, r3, #30
 8002646:	d502      	bpl.n	800264e <HAL_RCC_OscConfig+0xf6>
 8002648:	692b      	ldr	r3, [r5, #16]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d1af      	bne.n	80025ae <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	696a      	ldr	r2, [r5, #20]
 8002652:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002656:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800265a:	6023      	str	r3, [r4, #0]
 800265c:	e785      	b.n	800256a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800265e:	692a      	ldr	r2, [r5, #16]
 8002660:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002662:	b16a      	cbz	r2, 8002680 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002668:	f7ff fa48 	bl	8001afc <HAL_GetTick>
 800266c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	079f      	lsls	r7, r3, #30
 8002672:	d4ec      	bmi.n	800264e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002674:	f7ff fa42 	bl	8001afc <HAL_GetTick>
 8002678:	1b80      	subs	r0, r0, r6
 800267a:	2802      	cmp	r0, #2
 800267c:	d9f7      	bls.n	800266e <HAL_RCC_OscConfig+0x116>
 800267e:	e7ad      	b.n	80025dc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002680:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002682:	f7ff fa3b 	bl	8001afc <HAL_GetTick>
 8002686:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	0798      	lsls	r0, r3, #30
 800268c:	f57f af6d 	bpl.w	800256a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002690:	f7ff fa34 	bl	8001afc <HAL_GetTick>
 8002694:	1b80      	subs	r0, r0, r6
 8002696:	2802      	cmp	r0, #2
 8002698:	d9f6      	bls.n	8002688 <HAL_RCC_OscConfig+0x130>
 800269a:	e79f      	b.n	80025dc <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800269c:	69aa      	ldr	r2, [r5, #24]
 800269e:	4c4a      	ldr	r4, [pc, #296]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80026a0:	4b4b      	ldr	r3, [pc, #300]	; (80027d0 <HAL_RCC_OscConfig+0x278>)
 80026a2:	b1da      	cbz	r2, 80026dc <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80026a8:	f7ff fa28 	bl	8001afc <HAL_GetTick>
 80026ac:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026b0:	079b      	lsls	r3, r3, #30
 80026b2:	d50d      	bpl.n	80026d0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026b4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80026b8:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <HAL_RCC_OscConfig+0x27c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80026c0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80026c2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80026c4:	9b01      	ldr	r3, [sp, #4]
 80026c6:	1e5a      	subs	r2, r3, #1
 80026c8:	9201      	str	r2, [sp, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f9      	bne.n	80026c2 <HAL_RCC_OscConfig+0x16a>
 80026ce:	e750      	b.n	8002572 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d0:	f7ff fa14 	bl	8001afc <HAL_GetTick>
 80026d4:	1b80      	subs	r0, r0, r6
 80026d6:	2802      	cmp	r0, #2
 80026d8:	d9e9      	bls.n	80026ae <HAL_RCC_OscConfig+0x156>
 80026da:	e77f      	b.n	80025dc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80026dc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80026de:	f7ff fa0d 	bl	8001afc <HAL_GetTick>
 80026e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026e6:	079f      	lsls	r7, r3, #30
 80026e8:	f57f af43 	bpl.w	8002572 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ec:	f7ff fa06 	bl	8001afc <HAL_GetTick>
 80026f0:	1b80      	subs	r0, r0, r6
 80026f2:	2802      	cmp	r0, #2
 80026f4:	d9f6      	bls.n	80026e4 <HAL_RCC_OscConfig+0x18c>
 80026f6:	e771      	b.n	80025dc <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f8:	4c33      	ldr	r4, [pc, #204]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80026fa:	69e3      	ldr	r3, [r4, #28]
 80026fc:	00d8      	lsls	r0, r3, #3
 80026fe:	d424      	bmi.n	800274a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8002700:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	69e3      	ldr	r3, [r4, #28]
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	61e3      	str	r3, [r4, #28]
 800270a:	69e3      	ldr	r3, [r4, #28]
 800270c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002714:	4e30      	ldr	r6, [pc, #192]	; (80027d8 <HAL_RCC_OscConfig+0x280>)
 8002716:	6833      	ldr	r3, [r6, #0]
 8002718:	05d9      	lsls	r1, r3, #23
 800271a:	d518      	bpl.n	800274e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271c:	68eb      	ldr	r3, [r5, #12]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d126      	bne.n	8002770 <HAL_RCC_OscConfig+0x218>
 8002722:	6a23      	ldr	r3, [r4, #32]
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800272a:	f7ff f9e7 	bl	8001afc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002732:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	6a23      	ldr	r3, [r4, #32]
 8002736:	079b      	lsls	r3, r3, #30
 8002738:	d53f      	bpl.n	80027ba <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800273a:	2f00      	cmp	r7, #0
 800273c:	f43f af1d 	beq.w	800257a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002740:	69e3      	ldr	r3, [r4, #28]
 8002742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002746:	61e3      	str	r3, [r4, #28]
 8002748:	e717      	b.n	800257a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800274a:	2700      	movs	r7, #0
 800274c:	e7e2      	b.n	8002714 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274e:	6833      	ldr	r3, [r6, #0]
 8002750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002754:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002756:	f7ff f9d1 	bl	8001afc <HAL_GetTick>
 800275a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	6833      	ldr	r3, [r6, #0]
 800275e:	05da      	lsls	r2, r3, #23
 8002760:	d4dc      	bmi.n	800271c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7ff f9cb 	bl	8001afc <HAL_GetTick>
 8002766:	eba0 0008 	sub.w	r0, r0, r8
 800276a:	2864      	cmp	r0, #100	; 0x64
 800276c:	d9f6      	bls.n	800275c <HAL_RCC_OscConfig+0x204>
 800276e:	e735      	b.n	80025dc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002770:	b9ab      	cbnz	r3, 800279e <HAL_RCC_OscConfig+0x246>
 8002772:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6223      	str	r3, [r4, #32]
 800277e:	6a23      	ldr	r3, [r4, #32]
 8002780:	f023 0304 	bic.w	r3, r3, #4
 8002784:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002786:	f7ff f9b9 	bl	8001afc <HAL_GetTick>
 800278a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278c:	6a23      	ldr	r3, [r4, #32]
 800278e:	0798      	lsls	r0, r3, #30
 8002790:	d5d3      	bpl.n	800273a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7ff f9b3 	bl	8001afc <HAL_GetTick>
 8002796:	1b80      	subs	r0, r0, r6
 8002798:	4540      	cmp	r0, r8
 800279a:	d9f7      	bls.n	800278c <HAL_RCC_OscConfig+0x234>
 800279c:	e71e      	b.n	80025dc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279e:	2b05      	cmp	r3, #5
 80027a0:	6a23      	ldr	r3, [r4, #32]
 80027a2:	d103      	bne.n	80027ac <HAL_RCC_OscConfig+0x254>
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	6223      	str	r3, [r4, #32]
 80027aa:	e7ba      	b.n	8002722 <HAL_RCC_OscConfig+0x1ca>
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	6223      	str	r3, [r4, #32]
 80027b2:	6a23      	ldr	r3, [r4, #32]
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	e7b6      	b.n	8002728 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7ff f99f 	bl	8001afc <HAL_GetTick>
 80027be:	eba0 0008 	sub.w	r0, r0, r8
 80027c2:	42b0      	cmp	r0, r6
 80027c4:	d9b6      	bls.n	8002734 <HAL_RCC_OscConfig+0x1dc>
 80027c6:	e709      	b.n	80025dc <HAL_RCC_OscConfig+0x84>
 80027c8:	40021000 	.word	0x40021000
 80027cc:	42420000 	.word	0x42420000
 80027d0:	42420480 	.word	0x42420480
 80027d4:	20000000 	.word	0x20000000
 80027d8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027dc:	4c22      	ldr	r4, [pc, #136]	; (8002868 <HAL_RCC_OscConfig+0x310>)
 80027de:	6863      	ldr	r3, [r4, #4]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	f43f aee2 	beq.w	80025ae <HAL_RCC_OscConfig+0x56>
 80027ea:	2300      	movs	r3, #0
 80027ec:	4e1f      	ldr	r6, [pc, #124]	; (800286c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ee:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80027f0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f2:	d12b      	bne.n	800284c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80027f4:	f7ff f982 	bl	8001afc <HAL_GetTick>
 80027f8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	0199      	lsls	r1, r3, #6
 80027fe:	d41f      	bmi.n	8002840 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002800:	6a2b      	ldr	r3, [r5, #32]
 8002802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002808:	6862      	ldr	r2, [r4, #4]
 800280a:	68a9      	ldr	r1, [r5, #8]
 800280c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002810:	430a      	orrs	r2, r1
 8002812:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002814:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002816:	6862      	ldr	r2, [r4, #4]
 8002818:	430b      	orrs	r3, r1
 800281a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800281e:	4313      	orrs	r3, r2
 8002820:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002822:	2301      	movs	r3, #1
 8002824:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002826:	f7ff f969 	bl	8001afc <HAL_GetTick>
 800282a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	019a      	lsls	r2, r3, #6
 8002830:	f53f aea7 	bmi.w	8002582 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002834:	f7ff f962 	bl	8001afc <HAL_GetTick>
 8002838:	1b40      	subs	r0, r0, r5
 800283a:	2802      	cmp	r0, #2
 800283c:	d9f6      	bls.n	800282c <HAL_RCC_OscConfig+0x2d4>
 800283e:	e6cd      	b.n	80025dc <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002840:	f7ff f95c 	bl	8001afc <HAL_GetTick>
 8002844:	1bc0      	subs	r0, r0, r7
 8002846:	2802      	cmp	r0, #2
 8002848:	d9d7      	bls.n	80027fa <HAL_RCC_OscConfig+0x2a2>
 800284a:	e6c7      	b.n	80025dc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800284c:	f7ff f956 	bl	8001afc <HAL_GetTick>
 8002850:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	019b      	lsls	r3, r3, #6
 8002856:	f57f ae94 	bpl.w	8002582 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285a:	f7ff f94f 	bl	8001afc <HAL_GetTick>
 800285e:	1b40      	subs	r0, r0, r5
 8002860:	2802      	cmp	r0, #2
 8002862:	d9f6      	bls.n	8002852 <HAL_RCC_OscConfig+0x2fa>
 8002864:	e6ba      	b.n	80025dc <HAL_RCC_OscConfig+0x84>
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	42420060 	.word	0x42420060

08002870 <HAL_RCC_GetSysClockFreq>:
{
 8002870:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002872:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002874:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002876:	ac02      	add	r4, sp, #8
 8002878:	f103 0510 	add.w	r5, r3, #16
 800287c:	4622      	mov	r2, r4
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	3308      	adds	r3, #8
 8002884:	c203      	stmia	r2!, {r0, r1}
 8002886:	42ab      	cmp	r3, r5
 8002888:	4614      	mov	r4, r2
 800288a:	d1f7      	bne.n	800287c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800288c:	2301      	movs	r3, #1
 800288e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002892:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002894:	4911      	ldr	r1, [pc, #68]	; (80028dc <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002896:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800289a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800289c:	f003 020c 	and.w	r2, r3, #12
 80028a0:	2a08      	cmp	r2, #8
 80028a2:	d117      	bne.n	80028d4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028a4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80028a8:	a806      	add	r0, sp, #24
 80028aa:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ac:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ae:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028b2:	d50c      	bpl.n	80028ce <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028b4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028b6:	480a      	ldr	r0, [pc, #40]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028b8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028bc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028be:	aa06      	add	r2, sp, #24
 80028c0:	4413      	add	r3, r2
 80028c2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028c6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80028ca:	b007      	add	sp, #28
 80028cc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028ce:	4805      	ldr	r0, [pc, #20]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x74>)
 80028d0:	4350      	muls	r0, r2
 80028d2:	e7fa      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80028d6:	e7f8      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x5a>
 80028d8:	08003db8 	.word	0x08003db8
 80028dc:	40021000 	.word	0x40021000
 80028e0:	007a1200 	.word	0x007a1200
 80028e4:	003d0900 	.word	0x003d0900

080028e8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80028e8:	4a54      	ldr	r2, [pc, #336]	; (8002a3c <HAL_RCC_ClockConfig+0x154>)
{
 80028ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80028ee:	6813      	ldr	r3, [r2, #0]
{
 80028f0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	428b      	cmp	r3, r1
{
 80028f8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80028fa:	d32a      	bcc.n	8002952 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	6829      	ldr	r1, [r5, #0]
 80028fe:	078c      	lsls	r4, r1, #30
 8002900:	d434      	bmi.n	800296c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002902:	07ca      	lsls	r2, r1, #31
 8002904:	d447      	bmi.n	8002996 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002906:	4a4d      	ldr	r2, [pc, #308]	; (8002a3c <HAL_RCC_ClockConfig+0x154>)
 8002908:	6813      	ldr	r3, [r2, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	429e      	cmp	r6, r3
 8002910:	f0c0 8082 	bcc.w	8002a18 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	682a      	ldr	r2, [r5, #0]
 8002916:	4c4a      	ldr	r4, [pc, #296]	; (8002a40 <HAL_RCC_ClockConfig+0x158>)
 8002918:	f012 0f04 	tst.w	r2, #4
 800291c:	f040 8087 	bne.w	8002a2e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002920:	0713      	lsls	r3, r2, #28
 8002922:	d506      	bpl.n	8002932 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002924:	6863      	ldr	r3, [r4, #4]
 8002926:	692a      	ldr	r2, [r5, #16]
 8002928:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800292c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002930:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002932:	f7ff ff9d 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 8002936:	6863      	ldr	r3, [r4, #4]
 8002938:	4a42      	ldr	r2, [pc, #264]	; (8002a44 <HAL_RCC_ClockConfig+0x15c>)
 800293a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800293e:	5cd3      	ldrb	r3, [r2, r3]
 8002940:	40d8      	lsrs	r0, r3
 8002942:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <HAL_RCC_ClockConfig+0x160>)
 8002944:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002946:	2000      	movs	r0, #0
 8002948:	f7ff f896 	bl	8001a78 <HAL_InitTick>
  return HAL_OK;
 800294c:	2000      	movs	r0, #0
}
 800294e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	6813      	ldr	r3, [r2, #0]
 8002954:	f023 0307 	bic.w	r3, r3, #7
 8002958:	430b      	orrs	r3, r1
 800295a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800295c:	6813      	ldr	r3, [r2, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	4299      	cmp	r1, r3
 8002964:	d0ca      	beq.n	80028fc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002966:	2001      	movs	r0, #1
 8002968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800296c:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002972:	bf1e      	ittt	ne
 8002974:	685a      	ldrne	r2, [r3, #4]
 8002976:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800297a:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800297e:	bf42      	ittt	mi
 8002980:	685a      	ldrmi	r2, [r3, #4]
 8002982:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002986:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	68a8      	ldr	r0, [r5, #8]
 800298c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002990:	4302      	orrs	r2, r0
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	e7b5      	b.n	8002902 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002996:	686a      	ldr	r2, [r5, #4]
 8002998:	4c29      	ldr	r4, [pc, #164]	; (8002a40 <HAL_RCC_ClockConfig+0x158>)
 800299a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299e:	d11c      	bne.n	80029da <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	d0df      	beq.n	8002966 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a6:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ac:	f023 0303 	bic.w	r3, r3, #3
 80029b0:	4313      	orrs	r3, r2
 80029b2:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80029b4:	f7ff f8a2 	bl	8001afc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b8:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80029ba:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d114      	bne.n	80029ea <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029c0:	6863      	ldr	r3, [r4, #4]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d09d      	beq.n	8002906 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ca:	f7ff f897 	bl	8001afc <HAL_GetTick>
 80029ce:	1bc0      	subs	r0, r0, r7
 80029d0:	4540      	cmp	r0, r8
 80029d2:	d9f5      	bls.n	80029c0 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80029d4:	2003      	movs	r0, #3
 80029d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029da:	2a02      	cmp	r2, #2
 80029dc:	d102      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029e2:	e7df      	b.n	80029a4 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	f013 0f02 	tst.w	r3, #2
 80029e8:	e7dc      	b.n	80029a4 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d10f      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ee:	6863      	ldr	r3, [r4, #4]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d086      	beq.n	8002906 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7ff f880 	bl	8001afc <HAL_GetTick>
 80029fc:	1bc0      	subs	r0, r0, r7
 80029fe:	4540      	cmp	r0, r8
 8002a00:	d9f5      	bls.n	80029ee <HAL_RCC_ClockConfig+0x106>
 8002a02:	e7e7      	b.n	80029d4 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7ff f87a 	bl	8001afc <HAL_GetTick>
 8002a08:	1bc0      	subs	r0, r0, r7
 8002a0a:	4540      	cmp	r0, r8
 8002a0c:	d8e2      	bhi.n	80029d4 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a0e:	6863      	ldr	r3, [r4, #4]
 8002a10:	f013 0f0c 	tst.w	r3, #12
 8002a14:	d1f6      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x11c>
 8002a16:	e776      	b.n	8002906 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a18:	6813      	ldr	r3, [r2, #0]
 8002a1a:	f023 0307 	bic.w	r3, r3, #7
 8002a1e:	4333      	orrs	r3, r6
 8002a20:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a22:	6813      	ldr	r3, [r2, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	429e      	cmp	r6, r3
 8002a2a:	d19c      	bne.n	8002966 <HAL_RCC_ClockConfig+0x7e>
 8002a2c:	e772      	b.n	8002914 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2e:	6863      	ldr	r3, [r4, #4]
 8002a30:	68e9      	ldr	r1, [r5, #12]
 8002a32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a36:	430b      	orrs	r3, r1
 8002a38:	6063      	str	r3, [r4, #4]
 8002a3a:	e771      	b.n	8002920 <HAL_RCC_ClockConfig+0x38>
 8002a3c:	40022000 	.word	0x40022000
 8002a40:	40021000 	.word	0x40021000
 8002a44:	08003dc8 	.word	0x08003dc8
 8002a48:	20000000 	.word	0x20000000

08002a4c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002a4e:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002a56:	5cd3      	ldrb	r3, [r2, r3]
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a5a:	6810      	ldr	r0, [r2, #0]
}    
 8002a5c:	40d8      	lsrs	r0, r3
 8002a5e:	4770      	bx	lr
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08003dd8 	.word	0x08003dd8
 8002a68:	20000000 	.word	0x20000000

08002a6c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002a6e:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002a76:	5cd3      	ldrb	r3, [r2, r3]
 8002a78:	4a03      	ldr	r2, [pc, #12]	; (8002a88 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a7a:	6810      	ldr	r0, [r2, #0]
} 
 8002a7c:	40d8      	lsrs	r0, r3
 8002a7e:	4770      	bx	lr
 8002a80:	40021000 	.word	0x40021000
 8002a84:	08003dd8 	.word	0x08003dd8
 8002a88:	20000000 	.word	0x20000000

08002a8c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a90:	6805      	ldr	r5, [r0, #0]
 8002a92:	68c2      	ldr	r2, [r0, #12]
 8002a94:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a96:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002aa0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002aa2:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002aa8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002aac:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ab0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ab6:	696b      	ldr	r3, [r5, #20]
 8002ab8:	6982      	ldr	r2, [r0, #24]
 8002aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002ac2:	4b40      	ldr	r3, [pc, #256]	; (8002bc4 <UART_SetConfig+0x138>)
{
 8002ac4:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002ac6:	429d      	cmp	r5, r3
 8002ac8:	f04f 0419 	mov.w	r4, #25
 8002acc:	d146      	bne.n	8002b5c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ace:	f7ff ffcd 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 8002ad2:	fb04 f300 	mul.w	r3, r4, r0
 8002ad6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002ada:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002ade:	00b6      	lsls	r6, r6, #2
 8002ae0:	fbb3 f3f6 	udiv	r3, r3, r6
 8002ae4:	fbb3 f3f8 	udiv	r3, r3, r8
 8002ae8:	011e      	lsls	r6, r3, #4
 8002aea:	f7ff ffbf 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 8002aee:	4360      	muls	r0, r4
 8002af0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	fbb0 f7f3 	udiv	r7, r0, r3
 8002afa:	f7ff ffb7 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 8002afe:	4360      	muls	r0, r4
 8002b00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0a:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b0e:	fb08 7313 	mls	r3, r8, r3, r7
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	3332      	adds	r3, #50	; 0x32
 8002b16:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b1a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002b1e:	f7ff ffa5 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 8002b22:	4360      	muls	r0, r4
 8002b24:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002b28:	0092      	lsls	r2, r2, #2
 8002b2a:	fbb0 faf2 	udiv	sl, r0, r2
 8002b2e:	f7ff ff9d 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b32:	4360      	muls	r0, r4
 8002b34:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b42:	fb08 a313 	mls	r3, r8, r3, sl
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	3332      	adds	r3, #50	; 0x32
 8002b4a:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	433b      	orrs	r3, r7
 8002b54:	4433      	add	r3, r6
 8002b56:	60ab      	str	r3, [r5, #8]
 8002b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b5c:	f7ff ff76 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 8002b60:	fb04 f300 	mul.w	r3, r4, r0
 8002b64:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002b68:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002b6c:	00b6      	lsls	r6, r6, #2
 8002b6e:	fbb3 f3f6 	udiv	r3, r3, r6
 8002b72:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b76:	011e      	lsls	r6, r3, #4
 8002b78:	f7ff ff68 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 8002b7c:	4360      	muls	r0, r4
 8002b7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	fbb0 f7f3 	udiv	r7, r0, r3
 8002b88:	f7ff ff60 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 8002b8c:	4360      	muls	r0, r4
 8002b8e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b98:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b9c:	fb08 7313 	mls	r3, r8, r3, r7
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	3332      	adds	r3, #50	; 0x32
 8002ba4:	fbb3 f3f8 	udiv	r3, r3, r8
 8002ba8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002bac:	f7ff ff4e 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 8002bb0:	4360      	muls	r0, r4
 8002bb2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	fbb0 faf2 	udiv	sl, r0, r2
 8002bbc:	f7ff ff46 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 8002bc0:	e7b7      	b.n	8002b32 <UART_SetConfig+0xa6>
 8002bc2:	bf00      	nop
 8002bc4:	40013800 	.word	0x40013800

08002bc8 <HAL_UART_Init>:
{
 8002bc8:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002bca:	4604      	mov	r4, r0
 8002bcc:	b340      	cbz	r0, 8002c20 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002bce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002bd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bd6:	b91b      	cbnz	r3, 8002be0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002bd8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002bdc:	f7fe ff10 	bl	8001a00 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002be2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002be4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002be8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002bea:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bf0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002bf2:	f7ff ff4b 	bl	8002a8c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c08:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c10:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002c12:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c14:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002c16:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002c1a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002c1e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c20:	2001      	movs	r0, #1
}
 8002c22:	bd10      	pop	{r4, pc}

08002c24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c26:	e003      	b.n	8002c30 <LoopCopyDataInit>

08002c28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002c2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c2e:	3104      	adds	r1, #4

08002c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c30:	480a      	ldr	r0, [pc, #40]	; (8002c5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002c34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c38:	d3f6      	bcc.n	8002c28 <CopyDataInit>
  ldr r2, =_sbss
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002c3c:	e002      	b.n	8002c44 <LoopFillZerobss>

08002c3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002c40:	f842 3b04 	str.w	r3, [r2], #4

08002c44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002c46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002c48:	d3f9      	bcc.n	8002c3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c4a:	f7fe fe95 	bl	8001978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c4e:	f000 f80f 	bl	8002c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c52:	f7fe fda1 	bl	8001798 <main>
  bx lr
 8002c56:	4770      	bx	lr
  ldr r3, =_sidata
 8002c58:	08003e38 	.word	0x08003e38
  ldr r0, =_sdata
 8002c5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002c60:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8002c64:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8002c68:	20001748 	.word	0x20001748

08002c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c6c:	e7fe      	b.n	8002c6c <ADC1_2_IRQHandler>
	...

08002c70 <__libc_init_array>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	2500      	movs	r5, #0
 8002c74:	4e0c      	ldr	r6, [pc, #48]	; (8002ca8 <__libc_init_array+0x38>)
 8002c76:	4c0d      	ldr	r4, [pc, #52]	; (8002cac <__libc_init_array+0x3c>)
 8002c78:	1ba4      	subs	r4, r4, r6
 8002c7a:	10a4      	asrs	r4, r4, #2
 8002c7c:	42a5      	cmp	r5, r4
 8002c7e:	d109      	bne.n	8002c94 <__libc_init_array+0x24>
 8002c80:	f001 f88e 	bl	8003da0 <_init>
 8002c84:	2500      	movs	r5, #0
 8002c86:	4e0a      	ldr	r6, [pc, #40]	; (8002cb0 <__libc_init_array+0x40>)
 8002c88:	4c0a      	ldr	r4, [pc, #40]	; (8002cb4 <__libc_init_array+0x44>)
 8002c8a:	1ba4      	subs	r4, r4, r6
 8002c8c:	10a4      	asrs	r4, r4, #2
 8002c8e:	42a5      	cmp	r5, r4
 8002c90:	d105      	bne.n	8002c9e <__libc_init_array+0x2e>
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
 8002c94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c98:	4798      	blx	r3
 8002c9a:	3501      	adds	r5, #1
 8002c9c:	e7ee      	b.n	8002c7c <__libc_init_array+0xc>
 8002c9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ca2:	4798      	blx	r3
 8002ca4:	3501      	adds	r5, #1
 8002ca6:	e7f2      	b.n	8002c8e <__libc_init_array+0x1e>
 8002ca8:	08003e30 	.word	0x08003e30
 8002cac:	08003e30 	.word	0x08003e30
 8002cb0:	08003e30 	.word	0x08003e30
 8002cb4:	08003e34 	.word	0x08003e34

08002cb8 <memset>:
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4402      	add	r2, r0
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d100      	bne.n	8002cc2 <memset+0xa>
 8002cc0:	4770      	bx	lr
 8002cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cc6:	e7f9      	b.n	8002cbc <memset+0x4>

08002cc8 <pow>:
 8002cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ccc:	b08f      	sub	sp, #60	; 0x3c
 8002cce:	461d      	mov	r5, r3
 8002cd0:	4680      	mov	r8, r0
 8002cd2:	4689      	mov	r9, r1
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	f000 f9af 	bl	8003038 <__ieee754_pow>
 8002cda:	4fa5      	ldr	r7, [pc, #660]	; (8002f70 <pow+0x2a8>)
 8002cdc:	e9cd 0100 	strd	r0, r1, [sp]
 8002ce0:	f997 3000 	ldrsb.w	r3, [r7]
 8002ce4:	463e      	mov	r6, r7
 8002ce6:	9302      	str	r3, [sp, #8]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	d05f      	beq.n	8002dac <pow+0xe4>
 8002cec:	4622      	mov	r2, r4
 8002cee:	462b      	mov	r3, r5
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	f7fd fe7e 	bl	80009f4 <__aeabi_dcmpun>
 8002cf8:	4682      	mov	sl, r0
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	d156      	bne.n	8002dac <pow+0xe4>
 8002cfe:	4642      	mov	r2, r8
 8002d00:	464b      	mov	r3, r9
 8002d02:	4640      	mov	r0, r8
 8002d04:	4649      	mov	r1, r9
 8002d06:	f7fd fe75 	bl	80009f4 <__aeabi_dcmpun>
 8002d0a:	9003      	str	r0, [sp, #12]
 8002d0c:	b1e8      	cbz	r0, 8002d4a <pow+0x82>
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2300      	movs	r3, #0
 8002d12:	4620      	mov	r0, r4
 8002d14:	4629      	mov	r1, r5
 8002d16:	f7fd fe3b 	bl	8000990 <__aeabi_dcmpeq>
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	d046      	beq.n	8002dac <pow+0xe4>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	2200      	movs	r2, #0
 8002d22:	9304      	str	r3, [sp, #16]
 8002d24:	4b93      	ldr	r3, [pc, #588]	; (8002f74 <pow+0x2ac>)
 8002d26:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8002d2a:	9305      	str	r3, [sp, #20]
 8002d2c:	4b92      	ldr	r3, [pc, #584]	; (8002f78 <pow+0x2b0>)
 8002d2e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002d32:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002d36:	9b02      	ldr	r3, [sp, #8]
 8002d38:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d031      	beq.n	8002da4 <pow+0xdc>
 8002d40:	a804      	add	r0, sp, #16
 8002d42:	f000 ff20 	bl	8003b86 <matherr>
 8002d46:	bb38      	cbnz	r0, 8002d98 <pow+0xd0>
 8002d48:	e058      	b.n	8002dfc <pow+0x134>
 8002d4a:	f04f 0a00 	mov.w	sl, #0
 8002d4e:	f04f 0b00 	mov.w	fp, #0
 8002d52:	4652      	mov	r2, sl
 8002d54:	465b      	mov	r3, fp
 8002d56:	4640      	mov	r0, r8
 8002d58:	4649      	mov	r1, r9
 8002d5a:	f7fd fe19 	bl	8000990 <__aeabi_dcmpeq>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d051      	beq.n	8002e06 <pow+0x13e>
 8002d62:	4652      	mov	r2, sl
 8002d64:	465b      	mov	r3, fp
 8002d66:	4620      	mov	r0, r4
 8002d68:	4629      	mov	r1, r5
 8002d6a:	f7fd fe11 	bl	8000990 <__aeabi_dcmpeq>
 8002d6e:	4606      	mov	r6, r0
 8002d70:	b308      	cbz	r0, 8002db6 <pow+0xee>
 8002d72:	2301      	movs	r3, #1
 8002d74:	9304      	str	r3, [sp, #16]
 8002d76:	4b7f      	ldr	r3, [pc, #508]	; (8002f74 <pow+0x2ac>)
 8002d78:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002d7c:	9305      	str	r3, [sp, #20]
 8002d7e:	9b03      	ldr	r3, [sp, #12]
 8002d80:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002d84:	930c      	str	r3, [sp, #48]	; 0x30
 8002d86:	9b02      	ldr	r3, [sp, #8]
 8002d88:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0d7      	beq.n	8002d40 <pow+0x78>
 8002d90:	2200      	movs	r2, #0
 8002d92:	4b79      	ldr	r3, [pc, #484]	; (8002f78 <pow+0x2b0>)
 8002d94:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d9a:	b11b      	cbz	r3, 8002da4 <pow+0xdc>
 8002d9c:	f000 fffa 	bl	8003d94 <__errno>
 8002da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002da2:	6003      	str	r3, [r0, #0]
 8002da4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8002da8:	e88d 0018 	stmia.w	sp, {r3, r4}
 8002dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002db0:	b00f      	add	sp, #60	; 0x3c
 8002db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db6:	4620      	mov	r0, r4
 8002db8:	4629      	mov	r1, r5
 8002dba:	f000 fede 	bl	8003b7a <finite>
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d0f4      	beq.n	8002dac <pow+0xe4>
 8002dc2:	4652      	mov	r2, sl
 8002dc4:	465b      	mov	r3, fp
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	4629      	mov	r1, r5
 8002dca:	f7fd fdeb 	bl	80009a4 <__aeabi_dcmplt>
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	d0ec      	beq.n	8002dac <pow+0xe4>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	9304      	str	r3, [sp, #16]
 8002dd6:	4b67      	ldr	r3, [pc, #412]	; (8002f74 <pow+0x2ac>)
 8002dd8:	960c      	str	r6, [sp, #48]	; 0x30
 8002dda:	9305      	str	r3, [sp, #20]
 8002ddc:	f997 3000 	ldrsb.w	r3, [r7]
 8002de0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002de4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002de8:	b913      	cbnz	r3, 8002df0 <pow+0x128>
 8002dea:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002dee:	e7a7      	b.n	8002d40 <pow+0x78>
 8002df0:	2000      	movs	r0, #0
 8002df2:	4962      	ldr	r1, [pc, #392]	; (8002f7c <pow+0x2b4>)
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002dfa:	d1a1      	bne.n	8002d40 <pow+0x78>
 8002dfc:	f000 ffca 	bl	8003d94 <__errno>
 8002e00:	2321      	movs	r3, #33	; 0x21
 8002e02:	6003      	str	r3, [r0, #0]
 8002e04:	e7c8      	b.n	8002d98 <pow+0xd0>
 8002e06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e0a:	f000 feb6 	bl	8003b7a <finite>
 8002e0e:	9002      	str	r0, [sp, #8]
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d17f      	bne.n	8002f14 <pow+0x24c>
 8002e14:	4640      	mov	r0, r8
 8002e16:	4649      	mov	r1, r9
 8002e18:	f000 feaf 	bl	8003b7a <finite>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d079      	beq.n	8002f14 <pow+0x24c>
 8002e20:	4620      	mov	r0, r4
 8002e22:	4629      	mov	r1, r5
 8002e24:	f000 fea9 	bl	8003b7a <finite>
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	d073      	beq.n	8002f14 <pow+0x24c>
 8002e2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002e30:	4619      	mov	r1, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f7fd fdde 	bl	80009f4 <__aeabi_dcmpun>
 8002e38:	f997 7000 	ldrsb.w	r7, [r7]
 8002e3c:	4b4d      	ldr	r3, [pc, #308]	; (8002f74 <pow+0x2ac>)
 8002e3e:	b1a0      	cbz	r0, 8002e6a <pow+0x1a2>
 8002e40:	2201      	movs	r2, #1
 8002e42:	9305      	str	r3, [sp, #20]
 8002e44:	9b02      	ldr	r3, [sp, #8]
 8002e46:	9204      	str	r2, [sp, #16]
 8002e48:	930c      	str	r3, [sp, #48]	; 0x30
 8002e4a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002e4e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002e52:	2f00      	cmp	r7, #0
 8002e54:	d0c9      	beq.n	8002dea <pow+0x122>
 8002e56:	4652      	mov	r2, sl
 8002e58:	465b      	mov	r3, fp
 8002e5a:	4650      	mov	r0, sl
 8002e5c:	4659      	mov	r1, fp
 8002e5e:	f7fd fc59 	bl	8000714 <__aeabi_ddiv>
 8002e62:	2f02      	cmp	r7, #2
 8002e64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002e68:	e7c7      	b.n	8002dfa <pow+0x132>
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	9305      	str	r3, [sp, #20]
 8002e6e:	9204      	str	r2, [sp, #16]
 8002e70:	900c      	str	r0, [sp, #48]	; 0x30
 8002e72:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002e76:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002e7a:	bb57      	cbnz	r7, 8002ed2 <pow+0x20a>
 8002e7c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002e80:	4b3f      	ldr	r3, [pc, #252]	; (8002f80 <pow+0x2b8>)
 8002e82:	4640      	mov	r0, r8
 8002e84:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002e88:	4649      	mov	r1, r9
 8002e8a:	4652      	mov	r2, sl
 8002e8c:	465b      	mov	r3, fp
 8002e8e:	f7fd fd89 	bl	80009a4 <__aeabi_dcmplt>
 8002e92:	2800      	cmp	r0, #0
 8002e94:	d064      	beq.n	8002f60 <pow+0x298>
 8002e96:	2200      	movs	r2, #0
 8002e98:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <pow+0x2bc>)
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	f7fd fb0f 	bl	80004c0 <__aeabi_dmul>
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	460d      	mov	r5, r1
 8002ea6:	f000 fe77 	bl	8003b98 <rint>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4620      	mov	r0, r4
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	f7fd fd6d 	bl	8000990 <__aeabi_dcmpeq>
 8002eb6:	b920      	cbnz	r0, 8002ec2 <pow+0x1fa>
 8002eb8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002ebc:	4b32      	ldr	r3, [pc, #200]	; (8002f88 <pow+0x2c0>)
 8002ebe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002ec2:	f996 3000 	ldrsb.w	r3, [r6]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d14a      	bne.n	8002f60 <pow+0x298>
 8002eca:	f000 ff63 	bl	8003d94 <__errno>
 8002ece:	2322      	movs	r3, #34	; 0x22
 8002ed0:	e797      	b.n	8002e02 <pow+0x13a>
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <pow+0x2c4>)
 8002ed6:	4640      	mov	r0, r8
 8002ed8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002edc:	4649      	mov	r1, r9
 8002ede:	4652      	mov	r2, sl
 8002ee0:	465b      	mov	r3, fp
 8002ee2:	f7fd fd5f 	bl	80009a4 <__aeabi_dcmplt>
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	d0eb      	beq.n	8002ec2 <pow+0x1fa>
 8002eea:	2200      	movs	r2, #0
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <pow+0x2bc>)
 8002eee:	4620      	mov	r0, r4
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	f7fd fae5 	bl	80004c0 <__aeabi_dmul>
 8002ef6:	4604      	mov	r4, r0
 8002ef8:	460d      	mov	r5, r1
 8002efa:	f000 fe4d 	bl	8003b98 <rint>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4620      	mov	r0, r4
 8002f04:	4629      	mov	r1, r5
 8002f06:	f7fd fd43 	bl	8000990 <__aeabi_dcmpeq>
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	d1d9      	bne.n	8002ec2 <pow+0x1fa>
 8002f0e:	2200      	movs	r2, #0
 8002f10:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <pow+0x2b4>)
 8002f12:	e7d4      	b.n	8002ebe <pow+0x1f6>
 8002f14:	2200      	movs	r2, #0
 8002f16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f7fd fd38 	bl	8000990 <__aeabi_dcmpeq>
 8002f20:	2800      	cmp	r0, #0
 8002f22:	f43f af43 	beq.w	8002dac <pow+0xe4>
 8002f26:	4640      	mov	r0, r8
 8002f28:	4649      	mov	r1, r9
 8002f2a:	f000 fe26 	bl	8003b7a <finite>
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	f43f af3c 	beq.w	8002dac <pow+0xe4>
 8002f34:	4620      	mov	r0, r4
 8002f36:	4629      	mov	r1, r5
 8002f38:	f000 fe1f 	bl	8003b7a <finite>
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	f43f af35 	beq.w	8002dac <pow+0xe4>
 8002f42:	2304      	movs	r3, #4
 8002f44:	9304      	str	r3, [sp, #16]
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <pow+0x2ac>)
 8002f48:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002f4c:	9305      	str	r3, [sp, #20]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	2400      	movs	r4, #0
 8002f52:	930c      	str	r3, [sp, #48]	; 0x30
 8002f54:	2300      	movs	r3, #0
 8002f56:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002f5a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8002f5e:	e7b0      	b.n	8002ec2 <pow+0x1fa>
 8002f60:	a804      	add	r0, sp, #16
 8002f62:	f000 fe10 	bl	8003b86 <matherr>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	f47f af16 	bne.w	8002d98 <pow+0xd0>
 8002f6c:	e7ad      	b.n	8002eca <pow+0x202>
 8002f6e:	bf00      	nop
 8002f70:	20000070 	.word	0x20000070
 8002f74:	08003de0 	.word	0x08003de0
 8002f78:	3ff00000 	.word	0x3ff00000
 8002f7c:	fff00000 	.word	0xfff00000
 8002f80:	47efffff 	.word	0x47efffff
 8002f84:	3fe00000 	.word	0x3fe00000
 8002f88:	c7efffff 	.word	0xc7efffff
 8002f8c:	7ff00000 	.word	0x7ff00000

08002f90 <sqrt>:
 8002f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f94:	b08b      	sub	sp, #44	; 0x2c
 8002f96:	4604      	mov	r4, r0
 8002f98:	460d      	mov	r5, r1
 8002f9a:	f000 fd3f 	bl	8003a1c <__ieee754_sqrt>
 8002f9e:	4b24      	ldr	r3, [pc, #144]	; (8003030 <sqrt+0xa0>)
 8002fa0:	4680      	mov	r8, r0
 8002fa2:	f993 a000 	ldrsb.w	sl, [r3]
 8002fa6:	4689      	mov	r9, r1
 8002fa8:	f1ba 3fff 	cmp.w	sl, #4294967295
 8002fac:	d02b      	beq.n	8003006 <sqrt+0x76>
 8002fae:	4622      	mov	r2, r4
 8002fb0:	462b      	mov	r3, r5
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	f7fd fd1d 	bl	80009f4 <__aeabi_dcmpun>
 8002fba:	4683      	mov	fp, r0
 8002fbc:	bb18      	cbnz	r0, 8003006 <sqrt+0x76>
 8002fbe:	2600      	movs	r6, #0
 8002fc0:	2700      	movs	r7, #0
 8002fc2:	4632      	mov	r2, r6
 8002fc4:	463b      	mov	r3, r7
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	4629      	mov	r1, r5
 8002fca:	f7fd fceb 	bl	80009a4 <__aeabi_dcmplt>
 8002fce:	b1d0      	cbz	r0, 8003006 <sqrt+0x76>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <sqrt+0xa4>)
 8002fd6:	f8cd b020 	str.w	fp, [sp, #32]
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002fe0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002fe4:	f1ba 0f00 	cmp.w	sl, #0
 8002fe8:	d112      	bne.n	8003010 <sqrt+0x80>
 8002fea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002fee:	4668      	mov	r0, sp
 8002ff0:	f000 fdc9 	bl	8003b86 <matherr>
 8002ff4:	b1b8      	cbz	r0, 8003026 <sqrt+0x96>
 8002ff6:	9b08      	ldr	r3, [sp, #32]
 8002ff8:	b11b      	cbz	r3, 8003002 <sqrt+0x72>
 8002ffa:	f000 fecb 	bl	8003d94 <__errno>
 8002ffe:	9b08      	ldr	r3, [sp, #32]
 8003000:	6003      	str	r3, [r0, #0]
 8003002:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003006:	4640      	mov	r0, r8
 8003008:	4649      	mov	r1, r9
 800300a:	b00b      	add	sp, #44	; 0x2c
 800300c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003010:	4632      	mov	r2, r6
 8003012:	463b      	mov	r3, r7
 8003014:	4630      	mov	r0, r6
 8003016:	4639      	mov	r1, r7
 8003018:	f7fd fb7c 	bl	8000714 <__aeabi_ddiv>
 800301c:	f1ba 0f02 	cmp.w	sl, #2
 8003020:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003024:	d1e3      	bne.n	8002fee <sqrt+0x5e>
 8003026:	f000 feb5 	bl	8003d94 <__errno>
 800302a:	2321      	movs	r3, #33	; 0x21
 800302c:	6003      	str	r3, [r0, #0]
 800302e:	e7e2      	b.n	8002ff6 <sqrt+0x66>
 8003030:	20000070 	.word	0x20000070
 8003034:	08003de4 	.word	0x08003de4

08003038 <__ieee754_pow>:
 8003038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800303c:	b093      	sub	sp, #76	; 0x4c
 800303e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003042:	9e03      	ldr	r6, [sp, #12]
 8003044:	9a02      	ldr	r2, [sp, #8]
 8003046:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800304a:	ea55 0302 	orrs.w	r3, r5, r2
 800304e:	4607      	mov	r7, r0
 8003050:	4688      	mov	r8, r1
 8003052:	4682      	mov	sl, r0
 8003054:	4689      	mov	r9, r1
 8003056:	f000 849e 	beq.w	8003996 <__ieee754_pow+0x95e>
 800305a:	4b77      	ldr	r3, [pc, #476]	; (8003238 <__ieee754_pow+0x200>)
 800305c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8003060:	429c      	cmp	r4, r3
 8003062:	dc09      	bgt.n	8003078 <__ieee754_pow+0x40>
 8003064:	d103      	bne.n	800306e <__ieee754_pow+0x36>
 8003066:	b938      	cbnz	r0, 8003078 <__ieee754_pow+0x40>
 8003068:	42a5      	cmp	r5, r4
 800306a:	dc0d      	bgt.n	8003088 <__ieee754_pow+0x50>
 800306c:	e001      	b.n	8003072 <__ieee754_pow+0x3a>
 800306e:	429d      	cmp	r5, r3
 8003070:	dc02      	bgt.n	8003078 <__ieee754_pow+0x40>
 8003072:	429d      	cmp	r5, r3
 8003074:	d10e      	bne.n	8003094 <__ieee754_pow+0x5c>
 8003076:	b16a      	cbz	r2, 8003094 <__ieee754_pow+0x5c>
 8003078:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800307c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003080:	ea54 030a 	orrs.w	r3, r4, sl
 8003084:	f000 8487 	beq.w	8003996 <__ieee754_pow+0x95e>
 8003088:	486c      	ldr	r0, [pc, #432]	; (800323c <__ieee754_pow+0x204>)
 800308a:	b013      	add	sp, #76	; 0x4c
 800308c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003090:	f000 bd7c 	b.w	8003b8c <nan>
 8003094:	f1b9 0f00 	cmp.w	r9, #0
 8003098:	da4f      	bge.n	800313a <__ieee754_pow+0x102>
 800309a:	4b69      	ldr	r3, [pc, #420]	; (8003240 <__ieee754_pow+0x208>)
 800309c:	429d      	cmp	r5, r3
 800309e:	dc4a      	bgt.n	8003136 <__ieee754_pow+0xfe>
 80030a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80030a4:	429d      	cmp	r5, r3
 80030a6:	dd48      	ble.n	800313a <__ieee754_pow+0x102>
 80030a8:	152b      	asrs	r3, r5, #20
 80030aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80030ae:	2b14      	cmp	r3, #20
 80030b0:	dd24      	ble.n	80030fc <__ieee754_pow+0xc4>
 80030b2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80030b6:	fa22 f103 	lsr.w	r1, r2, r3
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	429a      	cmp	r2, r3
 80030c0:	d13b      	bne.n	800313a <__ieee754_pow+0x102>
 80030c2:	f001 0101 	and.w	r1, r1, #1
 80030c6:	f1c1 0302 	rsb	r3, r1, #2
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2a00      	cmp	r2, #0
 80030ce:	d156      	bne.n	800317e <__ieee754_pow+0x146>
 80030d0:	4b59      	ldr	r3, [pc, #356]	; (8003238 <__ieee754_pow+0x200>)
 80030d2:	429d      	cmp	r5, r3
 80030d4:	d122      	bne.n	800311c <__ieee754_pow+0xe4>
 80030d6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80030da:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80030de:	ea53 030a 	orrs.w	r3, r3, sl
 80030e2:	f000 8458 	beq.w	8003996 <__ieee754_pow+0x95e>
 80030e6:	4b57      	ldr	r3, [pc, #348]	; (8003244 <__ieee754_pow+0x20c>)
 80030e8:	429c      	cmp	r4, r3
 80030ea:	dd28      	ble.n	800313e <__ieee754_pow+0x106>
 80030ec:	2e00      	cmp	r6, #0
 80030ee:	f280 8456 	bge.w	800399e <__ieee754_pow+0x966>
 80030f2:	2000      	movs	r0, #0
 80030f4:	2100      	movs	r1, #0
 80030f6:	b013      	add	sp, #76	; 0x4c
 80030f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030fc:	2a00      	cmp	r2, #0
 80030fe:	d13c      	bne.n	800317a <__ieee754_pow+0x142>
 8003100:	f1c3 0314 	rsb	r3, r3, #20
 8003104:	fa45 f103 	asr.w	r1, r5, r3
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	429d      	cmp	r5, r3
 800310e:	f040 844e 	bne.w	80039ae <__ieee754_pow+0x976>
 8003112:	f001 0101 	and.w	r1, r1, #1
 8003116:	f1c1 0302 	rsb	r3, r1, #2
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <__ieee754_pow+0x210>)
 800311e:	429d      	cmp	r5, r3
 8003120:	d114      	bne.n	800314c <__ieee754_pow+0x114>
 8003122:	2e00      	cmp	r6, #0
 8003124:	f280 843f 	bge.w	80039a6 <__ieee754_pow+0x96e>
 8003128:	463a      	mov	r2, r7
 800312a:	4643      	mov	r3, r8
 800312c:	2000      	movs	r0, #0
 800312e:	4946      	ldr	r1, [pc, #280]	; (8003248 <__ieee754_pow+0x210>)
 8003130:	f7fd faf0 	bl	8000714 <__aeabi_ddiv>
 8003134:	e7df      	b.n	80030f6 <__ieee754_pow+0xbe>
 8003136:	2302      	movs	r3, #2
 8003138:	e7c7      	b.n	80030ca <__ieee754_pow+0x92>
 800313a:	2300      	movs	r3, #0
 800313c:	e7c5      	b.n	80030ca <__ieee754_pow+0x92>
 800313e:	2e00      	cmp	r6, #0
 8003140:	dad7      	bge.n	80030f2 <__ieee754_pow+0xba>
 8003142:	9b03      	ldr	r3, [sp, #12]
 8003144:	9802      	ldr	r0, [sp, #8]
 8003146:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800314a:	e7d4      	b.n	80030f6 <__ieee754_pow+0xbe>
 800314c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8003150:	d106      	bne.n	8003160 <__ieee754_pow+0x128>
 8003152:	463a      	mov	r2, r7
 8003154:	4643      	mov	r3, r8
 8003156:	4638      	mov	r0, r7
 8003158:	4641      	mov	r1, r8
 800315a:	f7fd f9b1 	bl	80004c0 <__aeabi_dmul>
 800315e:	e7ca      	b.n	80030f6 <__ieee754_pow+0xbe>
 8003160:	4b3a      	ldr	r3, [pc, #232]	; (800324c <__ieee754_pow+0x214>)
 8003162:	429e      	cmp	r6, r3
 8003164:	d10b      	bne.n	800317e <__ieee754_pow+0x146>
 8003166:	f1b9 0f00 	cmp.w	r9, #0
 800316a:	db08      	blt.n	800317e <__ieee754_pow+0x146>
 800316c:	4638      	mov	r0, r7
 800316e:	4641      	mov	r1, r8
 8003170:	b013      	add	sp, #76	; 0x4c
 8003172:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003176:	f000 bc51 	b.w	8003a1c <__ieee754_sqrt>
 800317a:	2300      	movs	r3, #0
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	4638      	mov	r0, r7
 8003180:	4641      	mov	r1, r8
 8003182:	f000 fcf7 	bl	8003b74 <fabs>
 8003186:	f1ba 0f00 	cmp.w	sl, #0
 800318a:	d125      	bne.n	80031d8 <__ieee754_pow+0x1a0>
 800318c:	b124      	cbz	r4, 8003198 <__ieee754_pow+0x160>
 800318e:	4b2e      	ldr	r3, [pc, #184]	; (8003248 <__ieee754_pow+0x210>)
 8003190:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8003194:	429a      	cmp	r2, r3
 8003196:	d11f      	bne.n	80031d8 <__ieee754_pow+0x1a0>
 8003198:	2e00      	cmp	r6, #0
 800319a:	da05      	bge.n	80031a8 <__ieee754_pow+0x170>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	2000      	movs	r0, #0
 80031a2:	4929      	ldr	r1, [pc, #164]	; (8003248 <__ieee754_pow+0x210>)
 80031a4:	f7fd fab6 	bl	8000714 <__aeabi_ddiv>
 80031a8:	f1b9 0f00 	cmp.w	r9, #0
 80031ac:	daa3      	bge.n	80030f6 <__ieee754_pow+0xbe>
 80031ae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80031b2:	9b00      	ldr	r3, [sp, #0]
 80031b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80031b8:	4323      	orrs	r3, r4
 80031ba:	d106      	bne.n	80031ca <__ieee754_pow+0x192>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	f7fc ffca 	bl	8000158 <__aeabi_dsub>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	e7b2      	b.n	8003130 <__ieee754_pow+0xf8>
 80031ca:	9b00      	ldr	r3, [sp, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d192      	bne.n	80030f6 <__ieee754_pow+0xbe>
 80031d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80031d4:	4619      	mov	r1, r3
 80031d6:	e78e      	b.n	80030f6 <__ieee754_pow+0xbe>
 80031d8:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80031dc:	f109 33ff 	add.w	r3, r9, #4294967295
 80031e0:	930c      	str	r3, [sp, #48]	; 0x30
 80031e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80031e4:	9b00      	ldr	r3, [sp, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	d104      	bne.n	80031f4 <__ieee754_pow+0x1bc>
 80031ea:	463a      	mov	r2, r7
 80031ec:	4643      	mov	r3, r8
 80031ee:	4638      	mov	r0, r7
 80031f0:	4641      	mov	r1, r8
 80031f2:	e7e5      	b.n	80031c0 <__ieee754_pow+0x188>
 80031f4:	4b16      	ldr	r3, [pc, #88]	; (8003250 <__ieee754_pow+0x218>)
 80031f6:	429d      	cmp	r5, r3
 80031f8:	f340 80fc 	ble.w	80033f4 <__ieee754_pow+0x3bc>
 80031fc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003200:	429d      	cmp	r5, r3
 8003202:	dd0b      	ble.n	800321c <__ieee754_pow+0x1e4>
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <__ieee754_pow+0x20c>)
 8003206:	429c      	cmp	r4, r3
 8003208:	dc0e      	bgt.n	8003228 <__ieee754_pow+0x1f0>
 800320a:	2e00      	cmp	r6, #0
 800320c:	f6bf af71 	bge.w	80030f2 <__ieee754_pow+0xba>
 8003210:	a307      	add	r3, pc, #28	; (adr r3, 8003230 <__ieee754_pow+0x1f8>)
 8003212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003216:	4610      	mov	r0, r2
 8003218:	4619      	mov	r1, r3
 800321a:	e79e      	b.n	800315a <__ieee754_pow+0x122>
 800321c:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <__ieee754_pow+0x21c>)
 800321e:	429c      	cmp	r4, r3
 8003220:	ddf3      	ble.n	800320a <__ieee754_pow+0x1d2>
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <__ieee754_pow+0x210>)
 8003224:	429c      	cmp	r4, r3
 8003226:	dd17      	ble.n	8003258 <__ieee754_pow+0x220>
 8003228:	2e00      	cmp	r6, #0
 800322a:	dcf1      	bgt.n	8003210 <__ieee754_pow+0x1d8>
 800322c:	e761      	b.n	80030f2 <__ieee754_pow+0xba>
 800322e:	bf00      	nop
 8003230:	8800759c 	.word	0x8800759c
 8003234:	7e37e43c 	.word	0x7e37e43c
 8003238:	7ff00000 	.word	0x7ff00000
 800323c:	08003de8 	.word	0x08003de8
 8003240:	433fffff 	.word	0x433fffff
 8003244:	3fefffff 	.word	0x3fefffff
 8003248:	3ff00000 	.word	0x3ff00000
 800324c:	3fe00000 	.word	0x3fe00000
 8003250:	41e00000 	.word	0x41e00000
 8003254:	3feffffe 	.word	0x3feffffe
 8003258:	2200      	movs	r2, #0
 800325a:	4b61      	ldr	r3, [pc, #388]	; (80033e0 <__ieee754_pow+0x3a8>)
 800325c:	f7fc ff7c 	bl	8000158 <__aeabi_dsub>
 8003260:	a355      	add	r3, pc, #340	; (adr r3, 80033b8 <__ieee754_pow+0x380>)
 8003262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003266:	4604      	mov	r4, r0
 8003268:	460d      	mov	r5, r1
 800326a:	f7fd f929 	bl	80004c0 <__aeabi_dmul>
 800326e:	a354      	add	r3, pc, #336	; (adr r3, 80033c0 <__ieee754_pow+0x388>)
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	4606      	mov	r6, r0
 8003276:	460f      	mov	r7, r1
 8003278:	4620      	mov	r0, r4
 800327a:	4629      	mov	r1, r5
 800327c:	f7fd f920 	bl	80004c0 <__aeabi_dmul>
 8003280:	2200      	movs	r2, #0
 8003282:	4682      	mov	sl, r0
 8003284:	468b      	mov	fp, r1
 8003286:	4b57      	ldr	r3, [pc, #348]	; (80033e4 <__ieee754_pow+0x3ac>)
 8003288:	4620      	mov	r0, r4
 800328a:	4629      	mov	r1, r5
 800328c:	f7fd f918 	bl	80004c0 <__aeabi_dmul>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	a14c      	add	r1, pc, #304	; (adr r1, 80033c8 <__ieee754_pow+0x390>)
 8003296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800329a:	f7fc ff5d 	bl	8000158 <__aeabi_dsub>
 800329e:	4622      	mov	r2, r4
 80032a0:	462b      	mov	r3, r5
 80032a2:	f7fd f90d 	bl	80004c0 <__aeabi_dmul>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	2000      	movs	r0, #0
 80032ac:	494e      	ldr	r1, [pc, #312]	; (80033e8 <__ieee754_pow+0x3b0>)
 80032ae:	f7fc ff53 	bl	8000158 <__aeabi_dsub>
 80032b2:	4622      	mov	r2, r4
 80032b4:	462b      	mov	r3, r5
 80032b6:	4680      	mov	r8, r0
 80032b8:	4689      	mov	r9, r1
 80032ba:	4620      	mov	r0, r4
 80032bc:	4629      	mov	r1, r5
 80032be:	f7fd f8ff 	bl	80004c0 <__aeabi_dmul>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4640      	mov	r0, r8
 80032c8:	4649      	mov	r1, r9
 80032ca:	f7fd f8f9 	bl	80004c0 <__aeabi_dmul>
 80032ce:	a340      	add	r3, pc, #256	; (adr r3, 80033d0 <__ieee754_pow+0x398>)
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f7fd f8f4 	bl	80004c0 <__aeabi_dmul>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4650      	mov	r0, sl
 80032de:	4659      	mov	r1, fp
 80032e0:	f7fc ff3a 	bl	8000158 <__aeabi_dsub>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4604      	mov	r4, r0
 80032ea:	460d      	mov	r5, r1
 80032ec:	4630      	mov	r0, r6
 80032ee:	4639      	mov	r1, r7
 80032f0:	f7fc ff34 	bl	800015c <__adddf3>
 80032f4:	2000      	movs	r0, #0
 80032f6:	468b      	mov	fp, r1
 80032f8:	4682      	mov	sl, r0
 80032fa:	4632      	mov	r2, r6
 80032fc:	463b      	mov	r3, r7
 80032fe:	f7fc ff2b 	bl	8000158 <__aeabi_dsub>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4620      	mov	r0, r4
 8003308:	4629      	mov	r1, r5
 800330a:	f7fc ff25 	bl	8000158 <__aeabi_dsub>
 800330e:	9b00      	ldr	r3, [sp, #0]
 8003310:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003312:	3b01      	subs	r3, #1
 8003314:	4313      	orrs	r3, r2
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	bf0c      	ite	eq
 800331c:	4c33      	ldreq	r4, [pc, #204]	; (80033ec <__ieee754_pow+0x3b4>)
 800331e:	4c30      	ldrne	r4, [pc, #192]	; (80033e0 <__ieee754_pow+0x3a8>)
 8003320:	4606      	mov	r6, r0
 8003322:	e88d 0018 	stmia.w	sp, {r3, r4}
 8003326:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800332a:	2400      	movs	r4, #0
 800332c:	460f      	mov	r7, r1
 800332e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003332:	4622      	mov	r2, r4
 8003334:	462b      	mov	r3, r5
 8003336:	f7fc ff0f 	bl	8000158 <__aeabi_dsub>
 800333a:	4652      	mov	r2, sl
 800333c:	465b      	mov	r3, fp
 800333e:	f7fd f8bf 	bl	80004c0 <__aeabi_dmul>
 8003342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003346:	4680      	mov	r8, r0
 8003348:	4689      	mov	r9, r1
 800334a:	4630      	mov	r0, r6
 800334c:	4639      	mov	r1, r7
 800334e:	f7fd f8b7 	bl	80004c0 <__aeabi_dmul>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4640      	mov	r0, r8
 8003358:	4649      	mov	r1, r9
 800335a:	f7fc feff 	bl	800015c <__adddf3>
 800335e:	4622      	mov	r2, r4
 8003360:	462b      	mov	r3, r5
 8003362:	4680      	mov	r8, r0
 8003364:	4689      	mov	r9, r1
 8003366:	4650      	mov	r0, sl
 8003368:	4659      	mov	r1, fp
 800336a:	f7fd f8a9 	bl	80004c0 <__aeabi_dmul>
 800336e:	4604      	mov	r4, r0
 8003370:	460d      	mov	r5, r1
 8003372:	460b      	mov	r3, r1
 8003374:	4602      	mov	r2, r0
 8003376:	4649      	mov	r1, r9
 8003378:	4640      	mov	r0, r8
 800337a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800337e:	f7fc feed 	bl	800015c <__adddf3>
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <__ieee754_pow+0x3b8>)
 8003384:	4682      	mov	sl, r0
 8003386:	4299      	cmp	r1, r3
 8003388:	460f      	mov	r7, r1
 800338a:	460e      	mov	r6, r1
 800338c:	f340 82da 	ble.w	8003944 <__ieee754_pow+0x90c>
 8003390:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003394:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003398:	4303      	orrs	r3, r0
 800339a:	f000 81d5 	beq.w	8003748 <__ieee754_pow+0x710>
 800339e:	a30e      	add	r3, pc, #56	; (adr r3, 80033d8 <__ieee754_pow+0x3a0>)
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033a8:	f7fd f88a 	bl	80004c0 <__aeabi_dmul>
 80033ac:	a30a      	add	r3, pc, #40	; (adr r3, 80033d8 <__ieee754_pow+0x3a0>)
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	e6d2      	b.n	800315a <__ieee754_pow+0x122>
 80033b4:	f3af 8000 	nop.w
 80033b8:	60000000 	.word	0x60000000
 80033bc:	3ff71547 	.word	0x3ff71547
 80033c0:	f85ddf44 	.word	0xf85ddf44
 80033c4:	3e54ae0b 	.word	0x3e54ae0b
 80033c8:	55555555 	.word	0x55555555
 80033cc:	3fd55555 	.word	0x3fd55555
 80033d0:	652b82fe 	.word	0x652b82fe
 80033d4:	3ff71547 	.word	0x3ff71547
 80033d8:	8800759c 	.word	0x8800759c
 80033dc:	7e37e43c 	.word	0x7e37e43c
 80033e0:	3ff00000 	.word	0x3ff00000
 80033e4:	3fd00000 	.word	0x3fd00000
 80033e8:	3fe00000 	.word	0x3fe00000
 80033ec:	bff00000 	.word	0xbff00000
 80033f0:	408fffff 	.word	0x408fffff
 80033f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	da05      	bge.n	800340a <__ieee754_pow+0x3d2>
 80033fe:	4bca      	ldr	r3, [pc, #808]	; (8003728 <__ieee754_pow+0x6f0>)
 8003400:	f7fd f85e 	bl	80004c0 <__aeabi_dmul>
 8003404:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003408:	460c      	mov	r4, r1
 800340a:	1523      	asrs	r3, r4, #20
 800340c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003410:	4413      	add	r3, r2
 8003412:	9307      	str	r3, [sp, #28]
 8003414:	4bc5      	ldr	r3, [pc, #788]	; (800372c <__ieee754_pow+0x6f4>)
 8003416:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800341a:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800341e:	429c      	cmp	r4, r3
 8003420:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003424:	dd08      	ble.n	8003438 <__ieee754_pow+0x400>
 8003426:	4bc2      	ldr	r3, [pc, #776]	; (8003730 <__ieee754_pow+0x6f8>)
 8003428:	429c      	cmp	r4, r3
 800342a:	f340 8154 	ble.w	80036d6 <__ieee754_pow+0x69e>
 800342e:	9b07      	ldr	r3, [sp, #28]
 8003430:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003434:	3301      	adds	r3, #1
 8003436:	9307      	str	r3, [sp, #28]
 8003438:	2600      	movs	r6, #0
 800343a:	4629      	mov	r1, r5
 800343c:	00f3      	lsls	r3, r6, #3
 800343e:	930d      	str	r3, [sp, #52]	; 0x34
 8003440:	4bbc      	ldr	r3, [pc, #752]	; (8003734 <__ieee754_pow+0x6fc>)
 8003442:	00f2      	lsls	r2, r6, #3
 8003444:	4413      	add	r3, r2
 8003446:	cb18      	ldmia	r3, {r3, r4}
 8003448:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800344c:	461a      	mov	r2, r3
 800344e:	4623      	mov	r3, r4
 8003450:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003454:	f7fc fe80 	bl	8000158 <__aeabi_dsub>
 8003458:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800345c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003460:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003464:	f7fc fe7a 	bl	800015c <__adddf3>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	2000      	movs	r0, #0
 800346e:	49b2      	ldr	r1, [pc, #712]	; (8003738 <__ieee754_pow+0x700>)
 8003470:	f7fd f950 	bl	8000714 <__aeabi_ddiv>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800347c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003480:	f7fd f81e 	bl	80004c0 <__aeabi_dmul>
 8003484:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003488:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800348c:	f04f 0a00 	mov.w	sl, #0
 8003490:	2200      	movs	r2, #0
 8003492:	106d      	asrs	r5, r5, #1
 8003494:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003498:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800349c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80034a0:	4659      	mov	r1, fp
 80034a2:	4650      	mov	r0, sl
 80034a4:	4614      	mov	r4, r2
 80034a6:	461d      	mov	r5, r3
 80034a8:	f7fd f80a 	bl	80004c0 <__aeabi_dmul>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80034b4:	f7fc fe50 	bl	8000158 <__aeabi_dsub>
 80034b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80034bc:	4606      	mov	r6, r0
 80034be:	460f      	mov	r7, r1
 80034c0:	4620      	mov	r0, r4
 80034c2:	4629      	mov	r1, r5
 80034c4:	f7fc fe48 	bl	8000158 <__aeabi_dsub>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80034d0:	f7fc fe42 	bl	8000158 <__aeabi_dsub>
 80034d4:	465b      	mov	r3, fp
 80034d6:	4652      	mov	r2, sl
 80034d8:	f7fc fff2 	bl	80004c0 <__aeabi_dmul>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4630      	mov	r0, r6
 80034e2:	4639      	mov	r1, r7
 80034e4:	f7fc fe38 	bl	8000158 <__aeabi_dsub>
 80034e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80034ec:	f7fc ffe8 	bl	80004c0 <__aeabi_dmul>
 80034f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	f7fc ffe0 	bl	80004c0 <__aeabi_dmul>
 8003500:	a377      	add	r3, pc, #476	; (adr r3, 80036e0 <__ieee754_pow+0x6a8>)
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	4604      	mov	r4, r0
 8003508:	460d      	mov	r5, r1
 800350a:	f7fc ffd9 	bl	80004c0 <__aeabi_dmul>
 800350e:	a376      	add	r3, pc, #472	; (adr r3, 80036e8 <__ieee754_pow+0x6b0>)
 8003510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003514:	f7fc fe22 	bl	800015c <__adddf3>
 8003518:	4622      	mov	r2, r4
 800351a:	462b      	mov	r3, r5
 800351c:	f7fc ffd0 	bl	80004c0 <__aeabi_dmul>
 8003520:	a373      	add	r3, pc, #460	; (adr r3, 80036f0 <__ieee754_pow+0x6b8>)
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	f7fc fe19 	bl	800015c <__adddf3>
 800352a:	4622      	mov	r2, r4
 800352c:	462b      	mov	r3, r5
 800352e:	f7fc ffc7 	bl	80004c0 <__aeabi_dmul>
 8003532:	a371      	add	r3, pc, #452	; (adr r3, 80036f8 <__ieee754_pow+0x6c0>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f7fc fe10 	bl	800015c <__adddf3>
 800353c:	4622      	mov	r2, r4
 800353e:	462b      	mov	r3, r5
 8003540:	f7fc ffbe 	bl	80004c0 <__aeabi_dmul>
 8003544:	a36e      	add	r3, pc, #440	; (adr r3, 8003700 <__ieee754_pow+0x6c8>)
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f7fc fe07 	bl	800015c <__adddf3>
 800354e:	4622      	mov	r2, r4
 8003550:	462b      	mov	r3, r5
 8003552:	f7fc ffb5 	bl	80004c0 <__aeabi_dmul>
 8003556:	a36c      	add	r3, pc, #432	; (adr r3, 8003708 <__ieee754_pow+0x6d0>)
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f7fc fdfe 	bl	800015c <__adddf3>
 8003560:	4622      	mov	r2, r4
 8003562:	4606      	mov	r6, r0
 8003564:	460f      	mov	r7, r1
 8003566:	462b      	mov	r3, r5
 8003568:	4620      	mov	r0, r4
 800356a:	4629      	mov	r1, r5
 800356c:	f7fc ffa8 	bl	80004c0 <__aeabi_dmul>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4630      	mov	r0, r6
 8003576:	4639      	mov	r1, r7
 8003578:	f7fc ffa2 	bl	80004c0 <__aeabi_dmul>
 800357c:	4604      	mov	r4, r0
 800357e:	460d      	mov	r5, r1
 8003580:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003584:	465b      	mov	r3, fp
 8003586:	4652      	mov	r2, sl
 8003588:	f7fc fde8 	bl	800015c <__adddf3>
 800358c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003590:	f7fc ff96 	bl	80004c0 <__aeabi_dmul>
 8003594:	4622      	mov	r2, r4
 8003596:	462b      	mov	r3, r5
 8003598:	f7fc fde0 	bl	800015c <__adddf3>
 800359c:	465b      	mov	r3, fp
 800359e:	4606      	mov	r6, r0
 80035a0:	460f      	mov	r7, r1
 80035a2:	4652      	mov	r2, sl
 80035a4:	4659      	mov	r1, fp
 80035a6:	4650      	mov	r0, sl
 80035a8:	f7fc ff8a 	bl	80004c0 <__aeabi_dmul>
 80035ac:	2200      	movs	r2, #0
 80035ae:	4b63      	ldr	r3, [pc, #396]	; (800373c <__ieee754_pow+0x704>)
 80035b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80035b4:	f7fc fdd2 	bl	800015c <__adddf3>
 80035b8:	4632      	mov	r2, r6
 80035ba:	463b      	mov	r3, r7
 80035bc:	f7fc fdce 	bl	800015c <__adddf3>
 80035c0:	4650      	mov	r0, sl
 80035c2:	460d      	mov	r5, r1
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4650      	mov	r0, sl
 80035ca:	4659      	mov	r1, fp
 80035cc:	f7fc ff78 	bl	80004c0 <__aeabi_dmul>
 80035d0:	2200      	movs	r2, #0
 80035d2:	4680      	mov	r8, r0
 80035d4:	4689      	mov	r9, r1
 80035d6:	4b59      	ldr	r3, [pc, #356]	; (800373c <__ieee754_pow+0x704>)
 80035d8:	4629      	mov	r1, r5
 80035da:	4650      	mov	r0, sl
 80035dc:	f7fc fdbc 	bl	8000158 <__aeabi_dsub>
 80035e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80035e4:	f7fc fdb8 	bl	8000158 <__aeabi_dsub>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4630      	mov	r0, r6
 80035ee:	4639      	mov	r1, r7
 80035f0:	f7fc fdb2 	bl	8000158 <__aeabi_dsub>
 80035f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035f8:	f7fc ff62 	bl	80004c0 <__aeabi_dmul>
 80035fc:	462b      	mov	r3, r5
 80035fe:	4606      	mov	r6, r0
 8003600:	460f      	mov	r7, r1
 8003602:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003606:	4652      	mov	r2, sl
 8003608:	f7fc ff5a 	bl	80004c0 <__aeabi_dmul>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4630      	mov	r0, r6
 8003612:	4639      	mov	r1, r7
 8003614:	f7fc fda2 	bl	800015c <__adddf3>
 8003618:	4606      	mov	r6, r0
 800361a:	460f      	mov	r7, r1
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4640      	mov	r0, r8
 8003622:	4649      	mov	r1, r9
 8003624:	f7fc fd9a 	bl	800015c <__adddf3>
 8003628:	a339      	add	r3, pc, #228	; (adr r3, 8003710 <__ieee754_pow+0x6d8>)
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	4650      	mov	r0, sl
 8003630:	460d      	mov	r5, r1
 8003632:	f7fc ff45 	bl	80004c0 <__aeabi_dmul>
 8003636:	4642      	mov	r2, r8
 8003638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800363c:	464b      	mov	r3, r9
 800363e:	4629      	mov	r1, r5
 8003640:	4650      	mov	r0, sl
 8003642:	f7fc fd89 	bl	8000158 <__aeabi_dsub>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4630      	mov	r0, r6
 800364c:	4639      	mov	r1, r7
 800364e:	f7fc fd83 	bl	8000158 <__aeabi_dsub>
 8003652:	a331      	add	r3, pc, #196	; (adr r3, 8003718 <__ieee754_pow+0x6e0>)
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	f7fc ff32 	bl	80004c0 <__aeabi_dmul>
 800365c:	a330      	add	r3, pc, #192	; (adr r3, 8003720 <__ieee754_pow+0x6e8>)
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	4606      	mov	r6, r0
 8003664:	460f      	mov	r7, r1
 8003666:	4650      	mov	r0, sl
 8003668:	4629      	mov	r1, r5
 800366a:	f7fc ff29 	bl	80004c0 <__aeabi_dmul>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4630      	mov	r0, r6
 8003674:	4639      	mov	r1, r7
 8003676:	f7fc fd71 	bl	800015c <__adddf3>
 800367a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800367c:	4b30      	ldr	r3, [pc, #192]	; (8003740 <__ieee754_pow+0x708>)
 800367e:	4413      	add	r3, r2
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f7fc fd6a 	bl	800015c <__adddf3>
 8003688:	4604      	mov	r4, r0
 800368a:	9807      	ldr	r0, [sp, #28]
 800368c:	460d      	mov	r5, r1
 800368e:	f7fc feb1 	bl	80003f4 <__aeabi_i2d>
 8003692:	4606      	mov	r6, r0
 8003694:	460f      	mov	r7, r1
 8003696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003698:	4b2a      	ldr	r3, [pc, #168]	; (8003744 <__ieee754_pow+0x70c>)
 800369a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800369e:	4413      	add	r3, r2
 80036a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80036a4:	4622      	mov	r2, r4
 80036a6:	462b      	mov	r3, r5
 80036a8:	f7fc fd58 	bl	800015c <__adddf3>
 80036ac:	4642      	mov	r2, r8
 80036ae:	464b      	mov	r3, r9
 80036b0:	f7fc fd54 	bl	800015c <__adddf3>
 80036b4:	4632      	mov	r2, r6
 80036b6:	463b      	mov	r3, r7
 80036b8:	f7fc fd50 	bl	800015c <__adddf3>
 80036bc:	4632      	mov	r2, r6
 80036be:	463b      	mov	r3, r7
 80036c0:	4650      	mov	r0, sl
 80036c2:	468b      	mov	fp, r1
 80036c4:	f7fc fd48 	bl	8000158 <__aeabi_dsub>
 80036c8:	4642      	mov	r2, r8
 80036ca:	464b      	mov	r3, r9
 80036cc:	f7fc fd44 	bl	8000158 <__aeabi_dsub>
 80036d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036d4:	e613      	b.n	80032fe <__ieee754_pow+0x2c6>
 80036d6:	2601      	movs	r6, #1
 80036d8:	e6af      	b.n	800343a <__ieee754_pow+0x402>
 80036da:	bf00      	nop
 80036dc:	f3af 8000 	nop.w
 80036e0:	4a454eef 	.word	0x4a454eef
 80036e4:	3fca7e28 	.word	0x3fca7e28
 80036e8:	93c9db65 	.word	0x93c9db65
 80036ec:	3fcd864a 	.word	0x3fcd864a
 80036f0:	a91d4101 	.word	0xa91d4101
 80036f4:	3fd17460 	.word	0x3fd17460
 80036f8:	518f264d 	.word	0x518f264d
 80036fc:	3fd55555 	.word	0x3fd55555
 8003700:	db6fabff 	.word	0xdb6fabff
 8003704:	3fdb6db6 	.word	0x3fdb6db6
 8003708:	33333303 	.word	0x33333303
 800370c:	3fe33333 	.word	0x3fe33333
 8003710:	e0000000 	.word	0xe0000000
 8003714:	3feec709 	.word	0x3feec709
 8003718:	dc3a03fd 	.word	0xdc3a03fd
 800371c:	3feec709 	.word	0x3feec709
 8003720:	145b01f5 	.word	0x145b01f5
 8003724:	be3e2fe0 	.word	0xbe3e2fe0
 8003728:	43400000 	.word	0x43400000
 800372c:	0003988e 	.word	0x0003988e
 8003730:	000bb679 	.word	0x000bb679
 8003734:	08003df0 	.word	0x08003df0
 8003738:	3ff00000 	.word	0x3ff00000
 800373c:	40080000 	.word	0x40080000
 8003740:	08003e10 	.word	0x08003e10
 8003744:	08003e00 	.word	0x08003e00
 8003748:	a39b      	add	r3, pc, #620	; (adr r3, 80039b8 <__ieee754_pow+0x980>)
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	4640      	mov	r0, r8
 8003750:	4649      	mov	r1, r9
 8003752:	f7fc fd03 	bl	800015c <__adddf3>
 8003756:	4622      	mov	r2, r4
 8003758:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800375c:	462b      	mov	r3, r5
 800375e:	4650      	mov	r0, sl
 8003760:	4639      	mov	r1, r7
 8003762:	f7fc fcf9 	bl	8000158 <__aeabi_dsub>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800376e:	f7fd f937 	bl	80009e0 <__aeabi_dcmpgt>
 8003772:	2800      	cmp	r0, #0
 8003774:	f47f ae13 	bne.w	800339e <__ieee754_pow+0x366>
 8003778:	4aa3      	ldr	r2, [pc, #652]	; (8003a08 <__ieee754_pow+0x9d0>)
 800377a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800377e:	4293      	cmp	r3, r2
 8003780:	f340 8104 	ble.w	800398c <__ieee754_pow+0x954>
 8003784:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003788:	2000      	movs	r0, #0
 800378a:	151b      	asrs	r3, r3, #20
 800378c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003790:	fa4a f303 	asr.w	r3, sl, r3
 8003794:	4433      	add	r3, r6
 8003796:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800379a:	4f9c      	ldr	r7, [pc, #624]	; (8003a0c <__ieee754_pow+0x9d4>)
 800379c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80037a0:	4117      	asrs	r7, r2
 80037a2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80037a6:	ea23 0107 	bic.w	r1, r3, r7
 80037aa:	f1c2 0214 	rsb	r2, r2, #20
 80037ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80037b2:	fa4a fa02 	asr.w	sl, sl, r2
 80037b6:	2e00      	cmp	r6, #0
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4620      	mov	r0, r4
 80037be:	4629      	mov	r1, r5
 80037c0:	bfb8      	it	lt
 80037c2:	f1ca 0a00 	rsblt	sl, sl, #0
 80037c6:	f7fc fcc7 	bl	8000158 <__aeabi_dsub>
 80037ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037d2:	4642      	mov	r2, r8
 80037d4:	464b      	mov	r3, r9
 80037d6:	f7fc fcc1 	bl	800015c <__adddf3>
 80037da:	a379      	add	r3, pc, #484	; (adr r3, 80039c0 <__ieee754_pow+0x988>)
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	2000      	movs	r0, #0
 80037e2:	460d      	mov	r5, r1
 80037e4:	4604      	mov	r4, r0
 80037e6:	f7fc fe6b 	bl	80004c0 <__aeabi_dmul>
 80037ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80037ee:	4606      	mov	r6, r0
 80037f0:	460f      	mov	r7, r1
 80037f2:	4620      	mov	r0, r4
 80037f4:	4629      	mov	r1, r5
 80037f6:	f7fc fcaf 	bl	8000158 <__aeabi_dsub>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4640      	mov	r0, r8
 8003800:	4649      	mov	r1, r9
 8003802:	f7fc fca9 	bl	8000158 <__aeabi_dsub>
 8003806:	a370      	add	r3, pc, #448	; (adr r3, 80039c8 <__ieee754_pow+0x990>)
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	f7fc fe58 	bl	80004c0 <__aeabi_dmul>
 8003810:	a36f      	add	r3, pc, #444	; (adr r3, 80039d0 <__ieee754_pow+0x998>)
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	4680      	mov	r8, r0
 8003818:	4689      	mov	r9, r1
 800381a:	4620      	mov	r0, r4
 800381c:	4629      	mov	r1, r5
 800381e:	f7fc fe4f 	bl	80004c0 <__aeabi_dmul>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4640      	mov	r0, r8
 8003828:	4649      	mov	r1, r9
 800382a:	f7fc fc97 	bl	800015c <__adddf3>
 800382e:	4604      	mov	r4, r0
 8003830:	460d      	mov	r5, r1
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4630      	mov	r0, r6
 8003838:	4639      	mov	r1, r7
 800383a:	f7fc fc8f 	bl	800015c <__adddf3>
 800383e:	4632      	mov	r2, r6
 8003840:	463b      	mov	r3, r7
 8003842:	4680      	mov	r8, r0
 8003844:	4689      	mov	r9, r1
 8003846:	f7fc fc87 	bl	8000158 <__aeabi_dsub>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4620      	mov	r0, r4
 8003850:	4629      	mov	r1, r5
 8003852:	f7fc fc81 	bl	8000158 <__aeabi_dsub>
 8003856:	4642      	mov	r2, r8
 8003858:	4606      	mov	r6, r0
 800385a:	460f      	mov	r7, r1
 800385c:	464b      	mov	r3, r9
 800385e:	4640      	mov	r0, r8
 8003860:	4649      	mov	r1, r9
 8003862:	f7fc fe2d 	bl	80004c0 <__aeabi_dmul>
 8003866:	a35c      	add	r3, pc, #368	; (adr r3, 80039d8 <__ieee754_pow+0x9a0>)
 8003868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386c:	4604      	mov	r4, r0
 800386e:	460d      	mov	r5, r1
 8003870:	f7fc fe26 	bl	80004c0 <__aeabi_dmul>
 8003874:	a35a      	add	r3, pc, #360	; (adr r3, 80039e0 <__ieee754_pow+0x9a8>)
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f7fc fc6d 	bl	8000158 <__aeabi_dsub>
 800387e:	4622      	mov	r2, r4
 8003880:	462b      	mov	r3, r5
 8003882:	f7fc fe1d 	bl	80004c0 <__aeabi_dmul>
 8003886:	a358      	add	r3, pc, #352	; (adr r3, 80039e8 <__ieee754_pow+0x9b0>)
 8003888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388c:	f7fc fc66 	bl	800015c <__adddf3>
 8003890:	4622      	mov	r2, r4
 8003892:	462b      	mov	r3, r5
 8003894:	f7fc fe14 	bl	80004c0 <__aeabi_dmul>
 8003898:	a355      	add	r3, pc, #340	; (adr r3, 80039f0 <__ieee754_pow+0x9b8>)
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	f7fc fc5b 	bl	8000158 <__aeabi_dsub>
 80038a2:	4622      	mov	r2, r4
 80038a4:	462b      	mov	r3, r5
 80038a6:	f7fc fe0b 	bl	80004c0 <__aeabi_dmul>
 80038aa:	a353      	add	r3, pc, #332	; (adr r3, 80039f8 <__ieee754_pow+0x9c0>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f7fc fc54 	bl	800015c <__adddf3>
 80038b4:	4622      	mov	r2, r4
 80038b6:	462b      	mov	r3, r5
 80038b8:	f7fc fe02 	bl	80004c0 <__aeabi_dmul>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4640      	mov	r0, r8
 80038c2:	4649      	mov	r1, r9
 80038c4:	f7fc fc48 	bl	8000158 <__aeabi_dsub>
 80038c8:	4604      	mov	r4, r0
 80038ca:	460d      	mov	r5, r1
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4640      	mov	r0, r8
 80038d2:	4649      	mov	r1, r9
 80038d4:	f7fc fdf4 	bl	80004c0 <__aeabi_dmul>
 80038d8:	2200      	movs	r2, #0
 80038da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038e2:	4620      	mov	r0, r4
 80038e4:	4629      	mov	r1, r5
 80038e6:	f7fc fc37 	bl	8000158 <__aeabi_dsub>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038f2:	f7fc ff0f 	bl	8000714 <__aeabi_ddiv>
 80038f6:	4632      	mov	r2, r6
 80038f8:	4604      	mov	r4, r0
 80038fa:	460d      	mov	r5, r1
 80038fc:	463b      	mov	r3, r7
 80038fe:	4640      	mov	r0, r8
 8003900:	4649      	mov	r1, r9
 8003902:	f7fc fddd 	bl	80004c0 <__aeabi_dmul>
 8003906:	4632      	mov	r2, r6
 8003908:	463b      	mov	r3, r7
 800390a:	f7fc fc27 	bl	800015c <__adddf3>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4620      	mov	r0, r4
 8003914:	4629      	mov	r1, r5
 8003916:	f7fc fc1f 	bl	8000158 <__aeabi_dsub>
 800391a:	4642      	mov	r2, r8
 800391c:	464b      	mov	r3, r9
 800391e:	f7fc fc1b 	bl	8000158 <__aeabi_dsub>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	2000      	movs	r0, #0
 8003928:	4939      	ldr	r1, [pc, #228]	; (8003a10 <__ieee754_pow+0x9d8>)
 800392a:	f7fc fc15 	bl	8000158 <__aeabi_dsub>
 800392e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003932:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003936:	da2c      	bge.n	8003992 <__ieee754_pow+0x95a>
 8003938:	4652      	mov	r2, sl
 800393a:	f000 f9b5 	bl	8003ca8 <scalbn>
 800393e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003942:	e40a      	b.n	800315a <__ieee754_pow+0x122>
 8003944:	4b33      	ldr	r3, [pc, #204]	; (8003a14 <__ieee754_pow+0x9dc>)
 8003946:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800394a:	429f      	cmp	r7, r3
 800394c:	f77f af14 	ble.w	8003778 <__ieee754_pow+0x740>
 8003950:	4b31      	ldr	r3, [pc, #196]	; (8003a18 <__ieee754_pow+0x9e0>)
 8003952:	440b      	add	r3, r1
 8003954:	4303      	orrs	r3, r0
 8003956:	d00b      	beq.n	8003970 <__ieee754_pow+0x938>
 8003958:	a329      	add	r3, pc, #164	; (adr r3, 8003a00 <__ieee754_pow+0x9c8>)
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003962:	f7fc fdad 	bl	80004c0 <__aeabi_dmul>
 8003966:	a326      	add	r3, pc, #152	; (adr r3, 8003a00 <__ieee754_pow+0x9c8>)
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f7ff bbf5 	b.w	800315a <__ieee754_pow+0x122>
 8003970:	4622      	mov	r2, r4
 8003972:	462b      	mov	r3, r5
 8003974:	f7fc fbf0 	bl	8000158 <__aeabi_dsub>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4640      	mov	r0, r8
 800397e:	4649      	mov	r1, r9
 8003980:	f7fd f81a 	bl	80009b8 <__aeabi_dcmple>
 8003984:	2800      	cmp	r0, #0
 8003986:	f43f aef7 	beq.w	8003778 <__ieee754_pow+0x740>
 800398a:	e7e5      	b.n	8003958 <__ieee754_pow+0x920>
 800398c:	f04f 0a00 	mov.w	sl, #0
 8003990:	e71d      	b.n	80037ce <__ieee754_pow+0x796>
 8003992:	4621      	mov	r1, r4
 8003994:	e7d3      	b.n	800393e <__ieee754_pow+0x906>
 8003996:	2000      	movs	r0, #0
 8003998:	491d      	ldr	r1, [pc, #116]	; (8003a10 <__ieee754_pow+0x9d8>)
 800399a:	f7ff bbac 	b.w	80030f6 <__ieee754_pow+0xbe>
 800399e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039a2:	f7ff bba8 	b.w	80030f6 <__ieee754_pow+0xbe>
 80039a6:	4638      	mov	r0, r7
 80039a8:	4641      	mov	r1, r8
 80039aa:	f7ff bba4 	b.w	80030f6 <__ieee754_pow+0xbe>
 80039ae:	9200      	str	r2, [sp, #0]
 80039b0:	f7ff bbb4 	b.w	800311c <__ieee754_pow+0xe4>
 80039b4:	f3af 8000 	nop.w
 80039b8:	652b82fe 	.word	0x652b82fe
 80039bc:	3c971547 	.word	0x3c971547
 80039c0:	00000000 	.word	0x00000000
 80039c4:	3fe62e43 	.word	0x3fe62e43
 80039c8:	fefa39ef 	.word	0xfefa39ef
 80039cc:	3fe62e42 	.word	0x3fe62e42
 80039d0:	0ca86c39 	.word	0x0ca86c39
 80039d4:	be205c61 	.word	0xbe205c61
 80039d8:	72bea4d0 	.word	0x72bea4d0
 80039dc:	3e663769 	.word	0x3e663769
 80039e0:	c5d26bf1 	.word	0xc5d26bf1
 80039e4:	3ebbbd41 	.word	0x3ebbbd41
 80039e8:	af25de2c 	.word	0xaf25de2c
 80039ec:	3f11566a 	.word	0x3f11566a
 80039f0:	16bebd93 	.word	0x16bebd93
 80039f4:	3f66c16c 	.word	0x3f66c16c
 80039f8:	5555553e 	.word	0x5555553e
 80039fc:	3fc55555 	.word	0x3fc55555
 8003a00:	c2f8f359 	.word	0xc2f8f359
 8003a04:	01a56e1f 	.word	0x01a56e1f
 8003a08:	3fe00000 	.word	0x3fe00000
 8003a0c:	000fffff 	.word	0x000fffff
 8003a10:	3ff00000 	.word	0x3ff00000
 8003a14:	4090cbff 	.word	0x4090cbff
 8003a18:	3f6f3400 	.word	0x3f6f3400

08003a1c <__ieee754_sqrt>:
 8003a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a20:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8003b70 <__ieee754_sqrt+0x154>
 8003a24:	4606      	mov	r6, r0
 8003a26:	ea3e 0e01 	bics.w	lr, lr, r1
 8003a2a:	460d      	mov	r5, r1
 8003a2c:	4607      	mov	r7, r0
 8003a2e:	460a      	mov	r2, r1
 8003a30:	460c      	mov	r4, r1
 8003a32:	4603      	mov	r3, r0
 8003a34:	d10f      	bne.n	8003a56 <__ieee754_sqrt+0x3a>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	f7fc fd41 	bl	80004c0 <__aeabi_dmul>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4630      	mov	r0, r6
 8003a44:	4629      	mov	r1, r5
 8003a46:	f7fc fb89 	bl	800015c <__adddf3>
 8003a4a:	4606      	mov	r6, r0
 8003a4c:	460d      	mov	r5, r1
 8003a4e:	4630      	mov	r0, r6
 8003a50:	4629      	mov	r1, r5
 8003a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a56:	2900      	cmp	r1, #0
 8003a58:	dc0e      	bgt.n	8003a78 <__ieee754_sqrt+0x5c>
 8003a5a:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8003a5e:	ea5e 0707 	orrs.w	r7, lr, r7
 8003a62:	d0f4      	beq.n	8003a4e <__ieee754_sqrt+0x32>
 8003a64:	b141      	cbz	r1, 8003a78 <__ieee754_sqrt+0x5c>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	f7fc fb75 	bl	8000158 <__aeabi_dsub>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	f7fc fe4f 	bl	8000714 <__aeabi_ddiv>
 8003a76:	e7e8      	b.n	8003a4a <__ieee754_sqrt+0x2e>
 8003a78:	1512      	asrs	r2, r2, #20
 8003a7a:	d10c      	bne.n	8003a96 <__ieee754_sqrt+0x7a>
 8003a7c:	2c00      	cmp	r4, #0
 8003a7e:	d06e      	beq.n	8003b5e <__ieee754_sqrt+0x142>
 8003a80:	2100      	movs	r1, #0
 8003a82:	02e6      	lsls	r6, r4, #11
 8003a84:	d56f      	bpl.n	8003b66 <__ieee754_sqrt+0x14a>
 8003a86:	1e48      	subs	r0, r1, #1
 8003a88:	1a12      	subs	r2, r2, r0
 8003a8a:	f1c1 0020 	rsb	r0, r1, #32
 8003a8e:	fa23 f000 	lsr.w	r0, r3, r0
 8003a92:	4304      	orrs	r4, r0
 8003a94:	408b      	lsls	r3, r1
 8003a96:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003a9a:	07d5      	lsls	r5, r2, #31
 8003a9c:	f04f 0500 	mov.w	r5, #0
 8003aa0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003aa4:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8003aa8:	bf42      	ittt	mi
 8003aaa:	0064      	lslmi	r4, r4, #1
 8003aac:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8003ab0:	005b      	lslmi	r3, r3, #1
 8003ab2:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8003ab6:	1050      	asrs	r0, r2, #1
 8003ab8:	4421      	add	r1, r4
 8003aba:	2216      	movs	r2, #22
 8003abc:	462c      	mov	r4, r5
 8003abe:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	19a7      	adds	r7, r4, r6
 8003ac6:	428f      	cmp	r7, r1
 8003ac8:	bfde      	ittt	le
 8003aca:	1bc9      	suble	r1, r1, r7
 8003acc:	19bc      	addle	r4, r7, r6
 8003ace:	19ad      	addle	r5, r5, r6
 8003ad0:	0049      	lsls	r1, r1, #1
 8003ad2:	3a01      	subs	r2, #1
 8003ad4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8003ad8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003ae0:	d1f0      	bne.n	8003ac4 <__ieee754_sqrt+0xa8>
 8003ae2:	f04f 0e20 	mov.w	lr, #32
 8003ae6:	4694      	mov	ip, r2
 8003ae8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003aec:	42a1      	cmp	r1, r4
 8003aee:	eb06 070c 	add.w	r7, r6, ip
 8003af2:	dc02      	bgt.n	8003afa <__ieee754_sqrt+0xde>
 8003af4:	d112      	bne.n	8003b1c <__ieee754_sqrt+0x100>
 8003af6:	429f      	cmp	r7, r3
 8003af8:	d810      	bhi.n	8003b1c <__ieee754_sqrt+0x100>
 8003afa:	2f00      	cmp	r7, #0
 8003afc:	eb07 0c06 	add.w	ip, r7, r6
 8003b00:	da34      	bge.n	8003b6c <__ieee754_sqrt+0x150>
 8003b02:	f1bc 0f00 	cmp.w	ip, #0
 8003b06:	db31      	blt.n	8003b6c <__ieee754_sqrt+0x150>
 8003b08:	f104 0801 	add.w	r8, r4, #1
 8003b0c:	1b09      	subs	r1, r1, r4
 8003b0e:	4644      	mov	r4, r8
 8003b10:	429f      	cmp	r7, r3
 8003b12:	bf88      	it	hi
 8003b14:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8003b18:	1bdb      	subs	r3, r3, r7
 8003b1a:	4432      	add	r2, r6
 8003b1c:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8003b20:	f1be 0e01 	subs.w	lr, lr, #1
 8003b24:	4439      	add	r1, r7
 8003b26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003b2a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003b2e:	d1dd      	bne.n	8003aec <__ieee754_sqrt+0xd0>
 8003b30:	430b      	orrs	r3, r1
 8003b32:	d006      	beq.n	8003b42 <__ieee754_sqrt+0x126>
 8003b34:	1c54      	adds	r4, r2, #1
 8003b36:	bf0b      	itete	eq
 8003b38:	4672      	moveq	r2, lr
 8003b3a:	3201      	addne	r2, #1
 8003b3c:	3501      	addeq	r5, #1
 8003b3e:	f022 0201 	bicne.w	r2, r2, #1
 8003b42:	106b      	asrs	r3, r5, #1
 8003b44:	0852      	lsrs	r2, r2, #1
 8003b46:	07e9      	lsls	r1, r5, #31
 8003b48:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003b4c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003b50:	bf48      	it	mi
 8003b52:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003b56:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8003b5a:	4616      	mov	r6, r2
 8003b5c:	e777      	b.n	8003a4e <__ieee754_sqrt+0x32>
 8003b5e:	0adc      	lsrs	r4, r3, #11
 8003b60:	3a15      	subs	r2, #21
 8003b62:	055b      	lsls	r3, r3, #21
 8003b64:	e78a      	b.n	8003a7c <__ieee754_sqrt+0x60>
 8003b66:	0064      	lsls	r4, r4, #1
 8003b68:	3101      	adds	r1, #1
 8003b6a:	e78a      	b.n	8003a82 <__ieee754_sqrt+0x66>
 8003b6c:	46a0      	mov	r8, r4
 8003b6e:	e7cd      	b.n	8003b0c <__ieee754_sqrt+0xf0>
 8003b70:	7ff00000 	.word	0x7ff00000

08003b74 <fabs>:
 8003b74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003b78:	4770      	bx	lr

08003b7a <finite>:
 8003b7a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003b7e:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8003b82:	0fc0      	lsrs	r0, r0, #31
 8003b84:	4770      	bx	lr

08003b86 <matherr>:
 8003b86:	2000      	movs	r0, #0
 8003b88:	4770      	bx	lr
	...

08003b8c <nan>:
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	4901      	ldr	r1, [pc, #4]	; (8003b94 <nan+0x8>)
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	7ff80000 	.word	0x7ff80000

08003b98 <rint>:
 8003b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b9a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 8003b9e:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 8003ba2:	2f13      	cmp	r7, #19
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4684      	mov	ip, r0
 8003baa:	460c      	mov	r4, r1
 8003bac:	4605      	mov	r5, r0
 8003bae:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8003bb2:	dc56      	bgt.n	8003c62 <rint+0xca>
 8003bb4:	2f00      	cmp	r7, #0
 8003bb6:	da29      	bge.n	8003c0c <rint+0x74>
 8003bb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003bbc:	4301      	orrs	r1, r0
 8003bbe:	d021      	beq.n	8003c04 <rint+0x6c>
 8003bc0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8003bc4:	4305      	orrs	r5, r0
 8003bc6:	426b      	negs	r3, r5
 8003bc8:	432b      	orrs	r3, r5
 8003bca:	0b1b      	lsrs	r3, r3, #12
 8003bcc:	0c64      	lsrs	r4, r4, #17
 8003bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd2:	0464      	lsls	r4, r4, #17
 8003bd4:	ea43 0104 	orr.w	r1, r3, r4
 8003bd8:	4b31      	ldr	r3, [pc, #196]	; (8003ca0 <rint+0x108>)
 8003bda:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003bde:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003be2:	4622      	mov	r2, r4
 8003be4:	462b      	mov	r3, r5
 8003be6:	f7fc fab9 	bl	800015c <__adddf3>
 8003bea:	e9cd 0100 	strd	r0, r1, [sp]
 8003bee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	462b      	mov	r3, r5
 8003bf6:	f7fc faaf 	bl	8000158 <__aeabi_dsub>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003c00:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 8003c04:	4610      	mov	r0, r2
 8003c06:	4619      	mov	r1, r3
 8003c08:	b003      	add	sp, #12
 8003c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c0c:	4925      	ldr	r1, [pc, #148]	; (8003ca4 <rint+0x10c>)
 8003c0e:	4139      	asrs	r1, r7
 8003c10:	ea03 0001 	and.w	r0, r3, r1
 8003c14:	4310      	orrs	r0, r2
 8003c16:	d0f5      	beq.n	8003c04 <rint+0x6c>
 8003c18:	084b      	lsrs	r3, r1, #1
 8003c1a:	ea04 0203 	and.w	r2, r4, r3
 8003c1e:	ea52 050c 	orrs.w	r5, r2, ip
 8003c22:	d00a      	beq.n	8003c3a <rint+0xa2>
 8003c24:	ea24 0303 	bic.w	r3, r4, r3
 8003c28:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8003c2c:	2f13      	cmp	r7, #19
 8003c2e:	bf0c      	ite	eq
 8003c30:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8003c34:	2500      	movne	r5, #0
 8003c36:	413c      	asrs	r4, r7
 8003c38:	431c      	orrs	r4, r3
 8003c3a:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <rint+0x108>)
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8003c42:	4628      	mov	r0, r5
 8003c44:	e9d6 4500 	ldrd	r4, r5, [r6]
 8003c48:	4622      	mov	r2, r4
 8003c4a:	462b      	mov	r3, r5
 8003c4c:	f7fc fa86 	bl	800015c <__adddf3>
 8003c50:	e9cd 0100 	strd	r0, r1, [sp]
 8003c54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c58:	4622      	mov	r2, r4
 8003c5a:	462b      	mov	r3, r5
 8003c5c:	f7fc fa7c 	bl	8000158 <__aeabi_dsub>
 8003c60:	e006      	b.n	8003c70 <rint+0xd8>
 8003c62:	2f33      	cmp	r7, #51	; 0x33
 8003c64:	dd07      	ble.n	8003c76 <rint+0xde>
 8003c66:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8003c6a:	d1cb      	bne.n	8003c04 <rint+0x6c>
 8003c6c:	f7fc fa76 	bl	800015c <__adddf3>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	e7c6      	b.n	8003c04 <rint+0x6c>
 8003c76:	f04f 31ff 	mov.w	r1, #4294967295
 8003c7a:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 8003c7e:	fa21 f10e 	lsr.w	r1, r1, lr
 8003c82:	4208      	tst	r0, r1
 8003c84:	d0be      	beq.n	8003c04 <rint+0x6c>
 8003c86:	084b      	lsrs	r3, r1, #1
 8003c88:	4218      	tst	r0, r3
 8003c8a:	bf1f      	itttt	ne
 8003c8c:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8003c90:	ea20 0303 	bicne.w	r3, r0, r3
 8003c94:	fa45 fe0e 	asrne.w	lr, r5, lr
 8003c98:	ea4e 0503 	orrne.w	r5, lr, r3
 8003c9c:	e7cd      	b.n	8003c3a <rint+0xa2>
 8003c9e:	bf00      	nop
 8003ca0:	08003e20 	.word	0x08003e20
 8003ca4:	000fffff 	.word	0x000fffff

08003ca8 <scalbn>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	4616      	mov	r6, r2
 8003cac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	460d      	mov	r5, r1
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	b98a      	cbnz	r2, 8003cdc <scalbn+0x34>
 8003cb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003cbc:	4303      	orrs	r3, r0
 8003cbe:	d035      	beq.n	8003d2c <scalbn+0x84>
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <scalbn+0xd0>)
 8003cc4:	f7fc fbfc 	bl	80004c0 <__aeabi_dmul>
 8003cc8:	4a2c      	ldr	r2, [pc, #176]	; (8003d7c <scalbn+0xd4>)
 8003cca:	4604      	mov	r4, r0
 8003ccc:	4296      	cmp	r6, r2
 8003cce:	460d      	mov	r5, r1
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	da0e      	bge.n	8003cf2 <scalbn+0x4a>
 8003cd4:	a324      	add	r3, pc, #144	; (adr r3, 8003d68 <scalbn+0xc0>)
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	e01c      	b.n	8003d16 <scalbn+0x6e>
 8003cdc:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8003ce0:	42ba      	cmp	r2, r7
 8003ce2:	d109      	bne.n	8003cf8 <scalbn+0x50>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	f7fc fa38 	bl	800015c <__adddf3>
 8003cec:	4604      	mov	r4, r0
 8003cee:	460d      	mov	r5, r1
 8003cf0:	e01c      	b.n	8003d2c <scalbn+0x84>
 8003cf2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003cf6:	3a36      	subs	r2, #54	; 0x36
 8003cf8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003cfc:	4432      	add	r2, r6
 8003cfe:	428a      	cmp	r2, r1
 8003d00:	dd0c      	ble.n	8003d1c <scalbn+0x74>
 8003d02:	4622      	mov	r2, r4
 8003d04:	462b      	mov	r3, r5
 8003d06:	a11a      	add	r1, pc, #104	; (adr r1, 8003d70 <scalbn+0xc8>)
 8003d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d0c:	f000 f83a 	bl	8003d84 <copysign>
 8003d10:	a317      	add	r3, pc, #92	; (adr r3, 8003d70 <scalbn+0xc8>)
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	f7fc fbd3 	bl	80004c0 <__aeabi_dmul>
 8003d1a:	e7e7      	b.n	8003cec <scalbn+0x44>
 8003d1c:	2a00      	cmp	r2, #0
 8003d1e:	dd08      	ble.n	8003d32 <scalbn+0x8a>
 8003d20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003d24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003d28:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	4629      	mov	r1, r5
 8003d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d32:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003d36:	da0b      	bge.n	8003d50 <scalbn+0xa8>
 8003d38:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003d3c:	429e      	cmp	r6, r3
 8003d3e:	4622      	mov	r2, r4
 8003d40:	462b      	mov	r3, r5
 8003d42:	dce0      	bgt.n	8003d06 <scalbn+0x5e>
 8003d44:	a108      	add	r1, pc, #32	; (adr r1, 8003d68 <scalbn+0xc0>)
 8003d46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d4a:	f000 f81b 	bl	8003d84 <copysign>
 8003d4e:	e7c1      	b.n	8003cd4 <scalbn+0x2c>
 8003d50:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003d54:	3236      	adds	r2, #54	; 0x36
 8003d56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003d5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003d5e:	4620      	mov	r0, r4
 8003d60:	4629      	mov	r1, r5
 8003d62:	2200      	movs	r2, #0
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <scalbn+0xd8>)
 8003d66:	e7d6      	b.n	8003d16 <scalbn+0x6e>
 8003d68:	c2f8f359 	.word	0xc2f8f359
 8003d6c:	01a56e1f 	.word	0x01a56e1f
 8003d70:	8800759c 	.word	0x8800759c
 8003d74:	7e37e43c 	.word	0x7e37e43c
 8003d78:	43500000 	.word	0x43500000
 8003d7c:	ffff3cb0 	.word	0xffff3cb0
 8003d80:	3c900000 	.word	0x3c900000

08003d84 <copysign>:
 8003d84:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003d88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d8c:	ea42 0103 	orr.w	r1, r2, r3
 8003d90:	4770      	bx	lr
	...

08003d94 <__errno>:
 8003d94:	4b01      	ldr	r3, [pc, #4]	; (8003d9c <__errno+0x8>)
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	2000000c 	.word	0x2000000c

08003da0 <_init>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	bf00      	nop
 8003da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da6:	bc08      	pop	{r3}
 8003da8:	469e      	mov	lr, r3
 8003daa:	4770      	bx	lr

08003dac <_fini>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	bf00      	nop
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr
